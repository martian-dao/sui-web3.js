{"version":3,"sources":["../src/index.ts","../src/cryptography/ed25519-keypair.ts","../src/serialization/base64.ts","../src/cryptography/ed25519-publickey.ts","../src/cryptography/publickey.ts","../src/cryptography/mnemonics.ts","../src/utils/ed25519-hd-key.ts","../src/cryptography/secp256k1-keypair.ts","../src/cryptography/secp256k1-publickey.ts","../src/providers/provider.ts","../src/rpc/client.ts","../src/rpc/client.guard.ts","../src/types/index.guard.ts","../src/types/common.ts","../src/types/objects.ts","../src/types/transactions.ts","../src/types/option.ts","../src/types/framework.ts","../src/types/sui-bcs.ts","../src/types/version.ts","../src/rpc/websocket-client.ts","../src/utils/api-endpoints.ts","../src/rpc/faucet-client.ts","../src/providers/json-rpc-provider.ts","../src/providers/json-rpc-provider-with-cache.ts","../src/serialization/hex.ts","../src/signers/txn-data-serializers/rpc-txn-data-serializer.ts","../src/signers/txn-data-serializers/call-arg-serializer.ts","../src/signers/txn-data-serializers/type-tag-serializer.ts","../src/signers/txn-data-serializers/local-txn-data-serializer.ts","../src/providers/void-provider.ts","../src/signers/signer-with-provider.ts","../src/signers/raw-signer.ts","../src/wallet_client.ts","../src/nft_client.ts"],"sourcesContent":["// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\nexport * from './cryptography/ed25519-keypair';\r\nexport * from './cryptography/secp256k1-keypair';\r\nexport * from './cryptography/keypair';\r\nexport * from './cryptography/ed25519-publickey';\r\nexport * from './cryptography/secp256k1-publickey';\r\nexport * from './cryptography/publickey';\r\nexport * from './cryptography/mnemonics';\r\n\r\nexport * from './providers/provider';\r\nexport * from './providers/json-rpc-provider';\r\nexport * from './providers/json-rpc-provider-with-cache';\r\n\r\nexport * from './serialization/base64';\r\nexport * from './serialization/hex';\r\n\r\nexport * from './signers/txn-data-serializers/rpc-txn-data-serializer';\r\nexport * from './signers/txn-data-serializers/txn-data-serializer';\r\nexport * from './signers/txn-data-serializers/local-txn-data-serializer';\r\n\r\nexport * from './signers/signer';\r\nexport * from './signers/raw-signer';\r\nexport * from './signers/signer-with-provider';\r\n\r\nexport * from './types';\r\nexport * from './utils/api-endpoints';\r\nexport * from './types/index.guard';\r\n\r\nexport * from './wallet_client';\r\nexport * from './nft_client';","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport nacl from 'tweetnacl';\r\nimport { Base64DataBuffer } from '../serialization/base64';\r\nimport { Keypair } from './keypair';\r\nimport { Ed25519PublicKey } from './ed25519-publickey';\r\nimport { SignatureScheme } from './publickey';\r\nimport { isValidHardenedPath, mnemonicToSeedHex } from './mnemonics';\r\nimport { derivePath, getPublicKey } from '../utils/ed25519-hd-key';\r\nimport { toB64 } from '@mysten/bcs';\r\n\r\nexport const DEFAULT_ED25519_DERIVATION_PATH = \"m/44'/784'/0'/0'/0'\";\r\n\r\n/**\r\n * Ed25519 Keypair data\r\n */\r\nexport interface Ed25519KeypairData {\r\n  publicKey: Uint8Array;\r\n  secretKey: Uint8Array;\r\n}\r\n\r\n/**\r\n * An Ed25519 Keypair used for signing transactions.\r\n */\r\nexport class Ed25519Keypair implements Keypair {\r\n  private keypair: Ed25519KeypairData;\r\n\r\n  /**\r\n   * Create a new Ed25519 keypair instance.\r\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\r\n   *\r\n   * @param keypair Ed25519 keypair\r\n   */\r\n  constructor(keypair?: Ed25519KeypairData) {\r\n    if (keypair) {\r\n      this.keypair = keypair;\r\n    } else {\r\n      this.keypair = nacl.sign.keyPair();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the key scheme of the keypair ED25519\r\n   */\r\n  getKeyScheme(): SignatureScheme {\r\n    return 'ED25519';\r\n  }\r\n\r\n  /**\r\n   * Generate a new random Ed25519 keypair\r\n   */\r\n  static generate(): Ed25519Keypair {\r\n    return new Ed25519Keypair(nacl.sign.keyPair());\r\n  }\r\n\r\n  /**\r\n   * Create a Ed25519 keypair from a raw secret key byte array.\r\n   *\r\n   * This method should only be used to recreate a keypair from a previously\r\n   * generated secret key.\r\n   *\r\n   * @throws error if the provided secret key is invalid and validation is not skipped.\r\n   *\r\n   * @param secretKey secret key byte array\r\n   * @param options: skip secret key validation\r\n   */\r\n  static fromSecretKey(\r\n    secretKey: Uint8Array,\r\n    options?: { skipValidation?: boolean }\r\n  ): Ed25519Keypair {\r\n    const secretKeyLength = secretKey.length;\r\n    if (secretKeyLength != 64) {\r\n      // Many users actually wanted to invoke fromSeed(seed: Uint8Array), especially when reading from keystore.\r\n      if (secretKeyLength == 32) {\r\n        throw new Error(\r\n          'Wrong secretKey size. Expected 64 bytes, got 32. Similar function exists: fromSeed(seed: Uint8Array)'\r\n        );\r\n      }\r\n      throw new Error(\r\n        `Wrong secretKey size. Expected 64 bytes, got ${secretKeyLength}.`\r\n      );\r\n    }\r\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\r\n    if (!options || !options.skipValidation) {\r\n      const encoder = new TextEncoder();\r\n      const signData = encoder.encode('sui validation');\r\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\r\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\r\n        throw new Error('provided secretKey is invalid');\r\n      }\r\n    }\r\n    return new Ed25519Keypair(keypair);\r\n  }\r\n\r\n  /**\r\n   * Generate an Ed25519 keypair from a 32 byte seed.\r\n   *\r\n   * @param seed seed byte array\r\n   */\r\n  static fromSeed(seed: Uint8Array): Ed25519Keypair {\r\n    const seedLength = seed.length;\r\n    if (seedLength != 32) {\r\n      throw new Error(`Wrong seed size. Expected 32 bytes, got ${seedLength}.`);\r\n    }\r\n    return new Ed25519Keypair(nacl.sign.keyPair.fromSeed(seed));\r\n  }\r\n\r\n  /**\r\n   * The public key for this Ed25519 keypair\r\n   */\r\n  getPublicKey(): Ed25519PublicKey {\r\n    return new Ed25519PublicKey(this.keypair.publicKey);\r\n  }\r\n\r\n  /**\r\n   * The secret key for this Ed25519 keypair\r\n   */\r\n  getSecretKey(): string {\r\n    return toB64(this.keypair.secretKey);\r\n  }\r\n\r\n  /**\r\n   * Return the signature for the provided data using Ed25519.\r\n   */\r\n  signData(data: Base64DataBuffer): Base64DataBuffer {\r\n    return new Base64DataBuffer(\r\n      nacl.sign.detached(data.getData(), this.keypair.secretKey)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Return the signature for the provided data using Ed25519.\r\n   */\r\n  signBuffer(data: Uint8Array): Uint8Array {\r\n    return nacl.sign.detached(data, this.keypair.secretKey);\r\n  }\r\n\r\n  /**\r\n   * Derives account address, public key and private key\r\n   * @returns publicKey, address and privateKey\r\n   */\r\n  toPrivateKeyObject(): object {\r\n    const publicKeyHex = Buffer.from(this.getPublicKey().toBytes()).toString(\r\n      'hex'\r\n    );\r\n    const privateKeyHex = Buffer.from(\r\n      this.keypair.secretKey.slice(0, 32)\r\n    ).toString('hex');\r\n    const address = this.getPublicKey().toSuiAddress();\r\n    return {\r\n      address: address.startsWith('0x') ? address : '0x' + address,\r\n      publicKeyHex: publicKeyHex.startsWith('0x')\r\n        ? publicKeyHex\r\n        : '0x' + publicKeyHex,\r\n      privateKeyHex: privateKeyHex.startsWith('0x')\r\n        ? privateKeyHex\r\n        : '0x' + privateKeyHex,\r\n    };\r\n  }\r\n  /**\r\n   * Derive Ed25519 keypair from mnemonics and path. The mnemonics must be normalized\r\n   * and validated against the english wordlist.\r\n   *\r\n   * If path is none, it will default to m/44'/784'/0'/0'/0', otherwise the path must\r\n   * be compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\r\n   */\r\n  static deriveKeypair(mnemonics: string, path?: string): Ed25519Keypair {\r\n    if (path == null) {\r\n      path = DEFAULT_ED25519_DERIVATION_PATH;\r\n    }\r\n    if (!isValidHardenedPath(path)) {\r\n      throw new Error('Invalid derivation path');\r\n    }\r\n    const { key } = derivePath(path, mnemonicToSeedHex(mnemonics));\r\n    const pubkey = getPublicKey(key, false);\r\n\r\n    // Ed25519 private key returned here has 32 bytes. NaCl expects 64 bytes where the last 32 bytes are the public key.\r\n    let fullPrivateKey = new Uint8Array(64);\r\n    fullPrivateKey.set(key);\r\n    fullPrivateKey.set(pubkey, 32);\r\n\r\n    return new Ed25519Keypair({ publicKey: pubkey, secretKey: fullPrivateKey });\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { fromB64, toB64 } from '@mysten/bcs';\r\n\r\nexport class Base64DataBuffer {\r\n  private data: Uint8Array;\r\n\r\n  constructor(data: Uint8Array | string) {\r\n    if (typeof data === 'string') {\r\n      this.data = fromB64(data);\r\n    } else {\r\n      this.data = data;\r\n    }\r\n  }\r\n\r\n  getData(): Uint8Array {\r\n    return this.data;\r\n  }\r\n\r\n  getLength(): number {\r\n    return this.data.length;\r\n  }\r\n\r\n  toString(): string {\r\n    return toB64(this.data);\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport sha3 from 'js-sha3';\r\nimport { fromB64, toB64 } from '@mysten/bcs';\r\nimport {\r\n  bytesEqual,\r\n  PublicKeyInitData,\r\n  SIGNATURE_SCHEME_TO_FLAG,\r\n} from './publickey';\r\n\r\nconst PUBLIC_KEY_SIZE = 32;\r\n\r\n/**\r\n * An Ed25519 public key\r\n */\r\nexport class Ed25519PublicKey {\r\n  private data: Uint8Array;\r\n\r\n  /**\r\n   * Create a new Ed25519PublicKey object\r\n   * @param value ed25519 public key as buffer or base-64 encoded string\r\n   */\r\n  constructor(value: PublicKeyInitData) {\r\n    if (typeof value === 'string') {\r\n      this.data = fromB64(value);\r\n    } else if (value instanceof Uint8Array) {\r\n      this.data = value;\r\n    } else {\r\n      this.data = Uint8Array.from(value);\r\n    }\r\n\r\n    if (this.data.length !== PUBLIC_KEY_SIZE) {\r\n      throw new Error(\r\n        `Invalid public key input. Expected ${PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if two Ed25519 public keys are equal\r\n   */\r\n  equals(publicKey: Ed25519PublicKey): boolean {\r\n    return bytesEqual(this.toBytes(), publicKey.toBytes());\r\n  }\r\n\r\n  /**\r\n   * Return the base-64 representation of the Ed25519 public key\r\n   */\r\n  toBase64(): string {\r\n    return toB64(this.toBytes());\r\n  }\r\n\r\n  /**\r\n   * Return the byte array representation of the Ed25519 public key\r\n   */\r\n  toBytes(): Uint8Array {\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Return the base-64 representation of the Ed25519 public key\r\n   */\r\n  toString(): string {\r\n    return this.toBase64();\r\n  }\r\n\r\n  /**\r\n   * Return the Sui address associated with this Ed25519 public key\r\n   */\r\n  toSuiAddress(): string {\r\n    let tmp = new Uint8Array(PUBLIC_KEY_SIZE + 1);\r\n    tmp.set([SIGNATURE_SCHEME_TO_FLAG['ED25519']]);\r\n    tmp.set(this.toBytes(), 1);\r\n    return sha3.sha3_256(tmp).slice(0, 40);\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n/**\r\n * Value to be converted into public key.\r\n */\r\nexport type PublicKeyInitData = string | Uint8Array | Iterable<number>;\r\n\r\nexport function bytesEqual(a: Uint8Array, b: Uint8Array) {\r\n  if (a === b) return true;\r\n\r\n  if (a.length !== b.length) {\r\n    return false;\r\n  }\r\n\r\n  for (let i = 0; i < a.length; i++) {\r\n    if (a[i] !== b[i]) {\r\n      return false;\r\n    }\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * A keypair used for signing transactions.\r\n */\r\nexport type SignatureScheme = 'ED25519' | 'Secp256k1';\r\n\r\nexport const SIGNATURE_SCHEME_TO_FLAG = {\r\n  ED25519: 0x00,\r\n  Secp256k1: 0x01,\r\n};\r\n\r\n/**\r\n * A public key\r\n */\r\nexport interface PublicKey {\r\n  /**\r\n   * Checks if two public keys are equal\r\n   */\r\n  equals(publicKey: PublicKey): boolean;\r\n\r\n  /**\r\n   * Return the base-64 representation of the public key\r\n   */\r\n  toBase64(): string;\r\n\r\n  /**\r\n   * Return the byte array representation of the public key\r\n   */\r\n  toBytes(): Uint8Array;\r\n\r\n  /**\r\n   * Return the base-64 representation of the public key\r\n   */\r\n  toString(): string;\r\n\r\n  /**\r\n   * Return the Sui address associated with this public key\r\n   */\r\n  toSuiAddress(): string;\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\nimport { toHEX } from '@mysten/bcs';\r\nimport { mnemonicToSeedSync as bip39MnemonicToSeedSync } from '@scure/bip39';\r\n\r\n/**\r\n * Parse and validate a path that is compliant to SLIP-0010 in form m/44'/784'/{account_index}'/{change_index}'/{address_index}'.\r\n *\r\n * @param path path string (e.g. `m/44'/784'/0'/0'/0'`).\r\n */\r\nexport function isValidHardenedPath(path: string): boolean {\r\n  if (!new RegExp(\"^m\\\\/44'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+'\\\\/[0-9]+'+$\").test(path)) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Parse and validate a path that is compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}.\r\n * Note that the purpose for Secp256k1 is registered as 54, to differentiate from Ed25519 with purpose 44.\r\n *\r\n * @param path path string (e.g. `m/54'/784'/0'/0/0`).\r\n */\r\nexport function isValidBIP32Path(path: string): boolean {\r\n  if (!new RegExp(\"^m\\\\/54'\\\\/784'\\\\/[0-9]+'\\\\/[0-9]+\\\\/[0-9]+$\").test(path)) {\r\n    return false;\r\n  }\r\n  return true;\r\n}\r\n\r\n/**\r\n * Uses KDF to derive 64 bytes of key data from mnemonic with empty password.\r\n *\r\n * @param mnemonics 12 words string split by spaces.\r\n */\r\nexport function mnemonicToSeed(mnemonics: string): Uint8Array {\r\n  return bip39MnemonicToSeedSync(mnemonics, '');\r\n}\r\n\r\n/**\r\n * Derive the seed in hex format from a 12-word mnemonic string.\r\n *\r\n * @param mnemonics 12 words string split by spaces.\r\n */\r\nexport function mnemonicToSeedHex(mnemonics: string): string {\r\n  return toHEX(mnemonicToSeed(mnemonics));\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n// This is adapted from https://github.com/alepop/ed25519-hd-key replacing create-hmac\r\n// with @noble/hashes to be browser compatible.\r\n\r\nimport { sha512 } from '@noble/hashes/sha512';\r\nimport { hmac } from '@noble/hashes/hmac';\r\nimport nacl from 'tweetnacl';\r\nimport { fromHEX } from '@mysten/bcs';\r\n\r\ntype Hex = string;\r\ntype Path = string;\r\n\r\ntype Keys = {\r\n  key: Uint8Array;\r\n  chainCode: Uint8Array;\r\n};\r\n\r\nconst ED25519_CURVE = 'ed25519 seed';\r\nconst HARDENED_OFFSET = 0x80000000;\r\n\r\nexport const pathRegex = new RegExp(\"^m(\\\\/[0-9]+')+$\");\r\n\r\nexport const replaceDerive = (val: string): string => val.replace(\"'\", '');\r\n\r\nexport const getMasterKeyFromSeed = (seed: Hex): Keys => {\r\n  const h = hmac.create(sha512, ED25519_CURVE);\r\n  const I = h.update(fromHEX(seed)).digest();\r\n  const IL = I.slice(0, 32);\r\n  const IR = I.slice(32);\r\n  return {\r\n    key: IL,\r\n    chainCode: IR,\r\n  };\r\n};\r\n\r\nconst CKDPriv = ({ key, chainCode }: Keys, index: number): Keys => {\r\n  const indexBuffer = new ArrayBuffer(4);\r\n  const cv = new DataView(indexBuffer);\r\n  cv.setUint32(0, index);\r\n\r\n  const data = new Uint8Array(1 + key.length + indexBuffer.byteLength);\r\n  data.set(new Uint8Array(1).fill(0));\r\n  data.set(key, 1);\r\n  data.set(\r\n    new Uint8Array(indexBuffer, 0, indexBuffer.byteLength),\r\n    key.length + 1\r\n  );\r\n\r\n  const I = hmac.create(sha512, chainCode).update(data).digest();\r\n  const IL = I.slice(0, 32);\r\n  const IR = I.slice(32);\r\n  return {\r\n    key: IL,\r\n    chainCode: IR,\r\n  };\r\n};\r\n\r\nexport const getPublicKey = (\r\n  privateKey: Uint8Array,\r\n  withZeroByte = true\r\n): Uint8Array => {\r\n  const keyPair = nacl.sign.keyPair.fromSeed(privateKey);\r\n  const signPk = keyPair.secretKey.subarray(32);\r\n  const newArr = new Uint8Array(signPk.length + 1);\r\n  newArr.set([0]);\r\n  newArr.set(signPk, 1);\r\n  return withZeroByte ? newArr : signPk;\r\n};\r\n\r\nexport const isValidPath = (path: string): boolean => {\r\n  if (!pathRegex.test(path)) {\r\n    return false;\r\n  }\r\n  return !path\r\n    .split('/')\r\n    .slice(1)\r\n    .map(replaceDerive)\r\n    .some(isNaN as any /* ts T_T*/);\r\n};\r\n\r\nexport const derivePath = (\r\n  path: Path,\r\n  seed: Hex,\r\n  offset = HARDENED_OFFSET\r\n): Keys => {\r\n  if (!isValidPath(path)) {\r\n    throw new Error('Invalid derivation path');\r\n  }\r\n\r\n  const { key, chainCode } = getMasterKeyFromSeed(seed);\r\n  const segments = path\r\n    .split('/')\r\n    .slice(1)\r\n    .map(replaceDerive)\r\n    .map((el) => parseInt(el, 10));\r\n\r\n  return segments.reduce(\r\n    (parentKeys, segment) => CKDPriv(parentKeys, segment + offset),\r\n    { key, chainCode }\r\n  );\r\n};\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport * as secp from '@noble/secp256k1';\r\nimport { Base64DataBuffer } from '../serialization/base64';\r\nimport { Keypair } from './keypair';\r\nimport { PublicKey, SignatureScheme } from './publickey';\r\nimport { hmac } from '@noble/hashes/hmac';\r\nimport { sha256 } from '@noble/hashes/sha256';\r\nimport { Secp256k1PublicKey } from './secp256k1-publickey';\r\nimport { Signature } from '@noble/secp256k1';\r\nimport { isValidBIP32Path, mnemonicToSeed } from './mnemonics';\r\nimport { HDKey } from '@scure/bip32';\r\n\r\nexport const DEFAULT_SECP256K1_DERIVATION_PATH = \"m/54'/784'/0'/0/0\";\r\n\r\nsecp.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\r\n  const h = hmac.create(sha256, key);\r\n  msgs.forEach((msg) => h.update(msg));\r\n  return h.digest();\r\n};\r\n\r\n/**\r\n * Secp256k1 Keypair data\r\n */\r\nexport interface Secp256k1KeypairData {\r\n  publicKey: Uint8Array;\r\n  secretKey: Uint8Array;\r\n}\r\n\r\n/**\r\n * An Secp256k1 Keypair used for signing transactions.\r\n */\r\nexport class Secp256k1Keypair implements Keypair {\r\n  private keypair: Secp256k1KeypairData;\r\n\r\n  /**\r\n   * Create a new keypair instance.\r\n   * Generate random keypair if no {@link Secp256k1Keypair} is provided.\r\n   *\r\n   * @param keypair secp256k1 keypair\r\n   */\r\n  constructor(keypair?: Secp256k1KeypairData) {\r\n    if (keypair) {\r\n      this.keypair = keypair;\r\n    } else {\r\n      const secretKey: Uint8Array = secp.utils.randomPrivateKey();\r\n      const publicKey: Uint8Array = secp.getPublicKey(secretKey, true);\r\n\r\n      this.keypair = { publicKey, secretKey };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the key scheme of the keypair Secp256k1\r\n   */\r\n  getKeyScheme(): SignatureScheme {\r\n    return 'Secp256k1';\r\n  }\r\n\r\n  /**\r\n   * Generate a new random keypair\r\n   */\r\n  static generate(): Secp256k1Keypair {\r\n    const secretKey = secp.utils.randomPrivateKey();\r\n    const publicKey = secp.getPublicKey(secretKey, true);\r\n\r\n    return new Secp256k1Keypair({ publicKey, secretKey });\r\n  }\r\n\r\n  /**\r\n   * Create a keypair from a raw secret key byte array.\r\n   *\r\n   * This method should only be used to recreate a keypair from a previously\r\n   * generated secret key. Generating keypairs from a random seed should be done\r\n   * with the {@link Keypair.fromSeed} method.\r\n   *\r\n   * @throws error if the provided secret key is invalid and validation is not skipped.\r\n   *\r\n   * @param secretKey secret key byte array\r\n   * @param options: skip secret key validation\r\n   */\r\n\r\n  static fromSecretKey(\r\n    secretKey: Uint8Array,\r\n    options?: { skipValidation?: boolean }\r\n  ): Secp256k1Keypair {\r\n    const publicKey: Uint8Array = secp.getPublicKey(secretKey, true);\r\n    if (!options || !options.skipValidation) {\r\n      const encoder = new TextEncoder();\r\n      const signData = encoder.encode('sui validation');\r\n      const msgHash = sha256(signData);\r\n      const signature = secp.signSync(msgHash, secretKey);\r\n      if (!secp.verify(signature, msgHash, publicKey, { strict: true })) {\r\n        throw new Error('Provided secretKey is invalid');\r\n      }\r\n    }\r\n    return new Secp256k1Keypair({ publicKey, secretKey });\r\n  }\r\n\r\n  /**\r\n   * Generate a keypair from a 32 byte seed.\r\n   *\r\n   * @param seed seed byte array\r\n   */\r\n  static fromSeed(seed: Uint8Array): Secp256k1Keypair {\r\n    let publicKey = secp.getPublicKey(seed, true);\r\n    return new Secp256k1Keypair({ publicKey, secretKey: seed });\r\n  }\r\n\r\n  /**\r\n   * The public key for this keypair\r\n   */\r\n  getPublicKey(): PublicKey {\r\n    return new Secp256k1PublicKey(this.keypair.publicKey);\r\n  }\r\n\r\n  /**\r\n   * Return the signature for the provided data.\r\n   */\r\n  signData(data: Base64DataBuffer): Base64DataBuffer {\r\n    const msgHash = sha256(data.getData());\r\n    const [sig, rec_id] = secp.signSync(msgHash, this.keypair.secretKey, {\r\n      canonical: true,\r\n      recovered: true,\r\n    });\r\n    var recoverable_sig = new Uint8Array(65);\r\n    recoverable_sig.set(Signature.fromDER(sig).toCompactRawBytes());\r\n    recoverable_sig.set([rec_id], 64);\r\n    return new Base64DataBuffer(recoverable_sig);\r\n  }\r\n\r\n  /**\r\n   * Derive Secp256k1 keypair from mnemonics and path. The mnemonics must be normalized\r\n   * and validated against the english wordlist.\r\n   *\r\n   * If path is none, it will default to m/54'/784'/0'/0/0, otherwise the path must\r\n   * be compliant to BIP-32 in form m/54'/784'/{account_index}'/{change_index}/{address_index}.\r\n   */\r\n  static deriveKeypair(path: string, mnemonics: string): Secp256k1Keypair {\r\n    if (!isValidBIP32Path(path)) {\r\n      throw new Error('Invalid derivation path');\r\n    }\r\n    const key = HDKey.fromMasterSeed(mnemonicToSeed(mnemonics)).derive(path);\r\n    if (key.publicKey == null || key.privateKey == null) {\r\n      throw new Error('Invalid key');\r\n    }\r\n    return new Secp256k1Keypair({\r\n      publicKey: key.publicKey,\r\n      secretKey: key.privateKey,\r\n    });\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { fromB64, toB64 } from '@mysten/bcs';\r\nimport sha3 from 'js-sha3';\r\nimport {\r\n  bytesEqual,\r\n  PublicKey,\r\n  PublicKeyInitData,\r\n  SIGNATURE_SCHEME_TO_FLAG,\r\n} from './publickey';\r\n\r\nconst SECP256K1_PUBLIC_KEY_SIZE = 33;\r\n\r\n/**\r\n * A Secp256k1 public key\r\n */\r\nexport class Secp256k1PublicKey implements PublicKey {\r\n  private data: Uint8Array;\r\n\r\n  /**\r\n   * Create a new Secp256k1PublicKey object\r\n   * @param value secp256k1 public key as buffer or base-64 encoded string\r\n   */\r\n  constructor(value: PublicKeyInitData) {\r\n    if (typeof value === 'string') {\r\n      this.data = fromB64(value);\r\n    } else if (value instanceof Uint8Array) {\r\n      this.data = value;\r\n    } else {\r\n      this.data = Uint8Array.from(value);\r\n    }\r\n\r\n    if (this.data.length !== SECP256K1_PUBLIC_KEY_SIZE) {\r\n      throw new Error(\r\n        `Invalid public key input. Expected ${SECP256K1_PUBLIC_KEY_SIZE} bytes, got ${this.data.length}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Checks if two Secp256k1 public keys are equal\r\n   */\r\n  equals(publicKey: Secp256k1PublicKey): boolean {\r\n    return bytesEqual(this.toBytes(), publicKey.toBytes());\r\n  }\r\n\r\n  /**\r\n   * Return the base-64 representation of the Secp256k1 public key\r\n   */\r\n  toBase64(): string {\r\n    return toB64(this.toBytes());\r\n  }\r\n\r\n  /**\r\n   * Return the byte array representation of the Secp256k1 public key\r\n   */\r\n  toBytes(): Uint8Array {\r\n    return this.data;\r\n  }\r\n\r\n  /**\r\n   * Return the base-64 representation of the Secp256k1 public key\r\n   */\r\n  toString(): string {\r\n    return this.toBase64();\r\n  }\r\n\r\n  /**\r\n   * Return the Sui address associated with this Secp256k1 public key\r\n   */\r\n  toSuiAddress(): string {\r\n    let tmp = new Uint8Array(SECP256K1_PUBLIC_KEY_SIZE + 1);\r\n    tmp.set([SIGNATURE_SCHEME_TO_FLAG['Secp256k1']]);\r\n    tmp.set(this.toBytes(), 1);\r\n    return sha3.sha3_256(tmp).slice(0, 40);\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { SignatureScheme } from '../cryptography/publickey';\r\nimport { HttpHeaders } from '../rpc/client';\r\nimport {\r\n  CoinDenominationInfoResponse,\r\n  GetObjectDataResponse,\r\n  SuiObjectInfo,\r\n  GatewayTxSeqNumber,\r\n  GetTxnDigestsResponse,\r\n  SuiObjectRef,\r\n  SuiMoveFunctionArgTypes,\r\n  SuiMoveNormalizedFunction,\r\n  SuiMoveNormalizedStruct,\r\n  SuiMoveNormalizedModule,\r\n  SuiMoveNormalizedModules,\r\n  SuiEventFilter,\r\n  SuiEventEnvelope,\r\n  SubscriptionId,\r\n  ExecuteTransactionRequestType,\r\n  SuiExecuteTransactionResponse,\r\n  TransactionDigest,\r\n  ObjectId,\r\n  SuiAddress,\r\n  EventQuery,\r\n  EventId,\r\n  PaginatedTransactionDigests,\r\n  TransactionQuery,\r\n  PaginatedEvents,\r\n  RpcApiVersion,\r\n  FaucetResponse,\r\n  Order,\r\n  TransactionEffects,\r\n} from '../types';\r\n\r\n///////////////////////////////\r\n// Exported Abstracts\r\nexport abstract class Provider {\r\n  // API Version\r\n  /**\r\n   * Fetch and cache the RPC API version number\r\n   *\r\n   * @return the current version of the RPC API that the provider is\r\n   * connected to, or undefined if any error occurred\r\n   */\r\n  abstract getRpcApiVersion(): Promise<RpcApiVersion | undefined>;\r\n\r\n  // Faucet\r\n  /**\r\n   * Request gas tokens from a faucet server\r\n   * @param recipient the address for receiving the tokens\r\n   * @param httpHeaders optional request headers\r\n   */\r\n  abstract requestSuiFromFaucet(\r\n    recipient: SuiAddress,\r\n    httpHeaders?: HttpHeaders\r\n  ): Promise<FaucetResponse>;\r\n\r\n  // Objects\r\n  /**\r\n   * Get all objects owned by an address\r\n   */\r\n  abstract getObjectsOwnedByAddress(\r\n    addressOrObjectId: string\r\n  ): Promise<SuiObjectInfo[]>;\r\n\r\n  /**\r\n   * Convenience method for getting all gas objects(SUI Tokens) owned by an address\r\n   */\r\n  abstract getGasObjectsOwnedByAddress(\r\n    _address: string\r\n  ): Promise<SuiObjectInfo[]>;\r\n\r\n  /**\r\n   * Convenience method for getting all coins objects owned by an address\r\n   * @param typeArg optional argument for filter by coin type, e.g., '0x2::sui::SUI'\r\n   */\r\n  abstract getCoinBalancesOwnedByAddress(\r\n    address: string,\r\n    typeArg?: string\r\n  ): Promise<GetObjectDataResponse[]>;\r\n\r\n  /**\r\n   * Convenience method for select coin objects that has a balance greater than or equal to `amount`\r\n   *\r\n   * @param amount coin balance\r\n   * @param typeArg coin type, e.g., '0x2::sui::SUI'\r\n   * @param exclude object ids of the coins to exclude\r\n   * @return a list of coin objects that has balance greater than `amount` in an ascending order\r\n   */\r\n  abstract selectCoinsWithBalanceGreaterThanOrEqual(\r\n    address: string,\r\n    amount: bigint,\r\n    typeArg: string,\r\n    exclude: ObjectId[]\r\n  ): Promise<GetObjectDataResponse[]>;\r\n\r\n  /**\r\n   * Convenience method for select a minimal set of coin objects that has a balance greater than\r\n   * or equal to `amount`. The output can be used for `PayTransaction`\r\n   *\r\n   * @param amount coin balance\r\n   * @param typeArg coin type, e.g., '0x2::sui::SUI'\r\n   * @param exclude object ids of the coins to exclude\r\n   * @return a minimal list of coin objects that has a combined balance greater than or equal\r\n   * to`amount` in an ascending order. If no such set exists, an empty list is returned\r\n   */\r\n  abstract selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\r\n    address: string,\r\n    amount: bigint,\r\n    typeArg: string,\r\n    exclude: ObjectId[]\r\n  ): Promise<GetObjectDataResponse[]>;\r\n\r\n  /**\r\n   * Method to look up denomination of a specific type of coin.\r\n   * TODO: now only SUI coins are supported, will scale to other types\r\n   * based on their definitions in Move.\r\n   *\r\n   * @param coin_type coin type, e.g., '0x2::sui::SUI'\r\n   * @return denomination info of the coin including,\r\n   * coin type, the same as input coin type\r\n   * basic unit, the min unit of the coin, e.g., MIST;\r\n   * canonical unit, the commonly used unit, e.g., SUI;\r\n   * denomination, the value of 1 canonical over 1 basic unit,\r\n   * for example 1_000_000_000 = 1 SUI / 1 MIST;\r\n   * decimal number, the number of zeros in the denomination,\r\n   * e.g., 9 here for SUI coin.\r\n   */\r\n  abstract getCoinDenominationInfo(\r\n    coin_type: string\r\n  ): CoinDenominationInfoResponse;\r\n\r\n  /**\r\n   * Get details about an object\r\n   */\r\n  abstract getObject(objectId: string): Promise<GetObjectDataResponse>;\r\n\r\n  /**\r\n   * Get object reference(id, tx digest, version id)\r\n   * @param objectId\r\n   */\r\n  abstract getObjectRef(objectId: string): Promise<SuiObjectRef | undefined>;\r\n\r\n  // Transactions\r\n  /**\r\n   * Get transaction digests for a given range\r\n   *\r\n   * NOTE: this method may get deprecated after DevNet\r\n   */\r\n  abstract getTransactionDigestsInRange(\r\n    start: GatewayTxSeqNumber,\r\n    end: GatewayTxSeqNumber\r\n  ): Promise<GetTxnDigestsResponse>;\r\n\r\n  /**\r\n   * Get transactions for a given query criteria\r\n   */\r\n  abstract getTransactions(\r\n    query: TransactionQuery,\r\n    cursor: TransactionDigest | null,\r\n    limit: number | null,\r\n    order: Order\r\n  ): Promise<PaginatedTransactionDigests>;\r\n\r\n  /**\r\n   * Get total number of transactions\r\n   * NOTE: this method may get deprecated after DevNet\r\n   */\r\n  abstract getTotalTransactionNumber(): Promise<number>;\r\n\r\n  /**\r\n   * This is under development endpoint on Fullnode that will eventually\r\n   * replace the other `executeTransaction` that's only available on the\r\n   * Gateway\r\n   */\r\n  abstract executeTransaction(\r\n    txnBytes: string,\r\n    signatureScheme: SignatureScheme,\r\n    signature: string,\r\n    pubkey: string,\r\n    requestType: ExecuteTransactionRequestType\r\n  ): Promise<SuiExecuteTransactionResponse>;\r\n\r\n  // Move info\r\n  /**\r\n   * Get Move function argument types like read, write and full access\r\n   */\r\n  abstract getMoveFunctionArgTypes(\r\n    objectId: string,\r\n    moduleName: string,\r\n    functionName: string\r\n  ): Promise<SuiMoveFunctionArgTypes>;\r\n\r\n  /**\r\n   * Get a map from module name to\r\n   * structured representations of Move modules\r\n   */\r\n  abstract getNormalizedMoveModulesByPackage(\r\n    objectId: string\r\n  ): Promise<SuiMoveNormalizedModules>;\r\n\r\n  /**\r\n   * Get a structured representation of Move module\r\n   */\r\n  abstract getNormalizedMoveModule(\r\n    objectId: string,\r\n    moduleName: string\r\n  ): Promise<SuiMoveNormalizedModule>;\r\n\r\n  /**\r\n   * Get a structured representation of Move function\r\n   */\r\n  abstract getNormalizedMoveFunction(\r\n    objectId: string,\r\n    moduleName: string,\r\n    functionName: string\r\n  ): Promise<SuiMoveNormalizedFunction>;\r\n\r\n  /**\r\n   * Get a structured representation of Move struct\r\n   */\r\n  abstract getNormalizedMoveStruct(\r\n    objectId: string,\r\n    moduleName: string,\r\n    structName: string\r\n  ): Promise<SuiMoveNormalizedStruct>;\r\n\r\n  /**\r\n   * Get events for a given query criteria\r\n   * @param query - the event query criteria.\r\n   * @param cursor - optional paging cursor\r\n   * @param limit - maximum number of items per page\r\n   * @param order - event query ordering\r\n   */\r\n  abstract getEvents(\r\n      query: EventQuery,\r\n      cursor: EventId | null,\r\n      limit: number | null,\r\n      order: Order,\r\n  ): Promise<PaginatedEvents>;\r\n\r\n  /**\r\n   * Subscribe to get notifications whenever an event matching the filter occurs\r\n   * @param filter - filter describing the subset of events to follow\r\n   * @param onMessage - function to run when we receive a notification of a new event matching the filter\r\n   */\r\n  abstract subscribeEvent(\r\n    filter: SuiEventFilter,\r\n    onMessage: (event: SuiEventEnvelope) => void\r\n  ): Promise<SubscriptionId>;\r\n\r\n  /**\r\n   * Unsubscribe from an event subscription\r\n   * @param id - subscription id to unsubscribe from (previously received from subscribeEvent)\r\n   */\r\n  abstract unsubscribeEvent(id: SubscriptionId): Promise<boolean>;\r\n  // TODO: add more interface methods\r\n\r\n  abstract dryRunTransaction(txBytes: string): Promise<TransactionEffects>;\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport RpcClient from 'jayson/lib/client/browser/index.js';\r\nimport fetch from 'isomorphic-fetch';\r\nimport { isErrorResponse, isValidResponse } from './client.guard';\r\nimport * as LosslessJSON from 'lossless-json';\r\n\r\n/**\r\n * An object defining headers to be passed to the RPC server\r\n */\r\nexport type HttpHeaders = { [header: string]: string };\r\n\r\n/**\r\n * @internal\r\n */\r\nexport type RpcParams = {\r\n  method: string;\r\n  args: Array<any>;\r\n};\r\n\r\nconst TYPE_MISMATCH_ERROR =\r\n  `The response returned from RPC server does not match ` +\r\n  `the TypeScript definition. This is likely because the SDK version is not ` +\r\n  `compatible with the RPC server. Please update your SDK version to the latest. `;\r\n\r\nexport class JsonRpcClient {\r\n  private rpcClient: RpcClient;\r\n\r\n  constructor(url: string, httpHeaders?: HttpHeaders) {\r\n    this.rpcClient = this.createRpcClient(url, httpHeaders);\r\n  }\r\n\r\n  private createRpcClient(url: string, httpHeaders?: HttpHeaders): RpcClient {\r\n    const client = new RpcClient(\r\n      async (\r\n        request: any,\r\n        callback: (arg0: Error | null, arg1?: string | undefined) => void\r\n      ) => {\r\n        const options = {\r\n          method: 'POST',\r\n          body: request,\r\n          headers: Object.assign(\r\n            {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            httpHeaders || {}\r\n          ),\r\n        };\r\n\r\n        try {\r\n          let res: Response = await fetch(url, options);\r\n          const text = await res.text();\r\n          let result;\r\n          // wrapping this with try/catch because LosslessJSON\r\n          // returns error when parsing some struct.\r\n          // TODO: remove the usage of LosslessJSON once\r\n          // https://github.com/MystenLabs/sui/issues/2328 is done\r\n          try {\r\n            result = JSON.stringify(\r\n              LosslessJSON.parse(text, (key, value) => {\r\n                if (value == null) {\r\n                  return value;\r\n                }\r\n\r\n                // TODO: This is a bad hack, we really shouldn't be doing this here:\r\n                if (key === 'balance' && typeof value === 'number') {\r\n                  return value.toString();\r\n                }\r\n\r\n                try {\r\n                  if (value.isLosslessNumber) return value.valueOf();\r\n                } catch {\r\n                  return value.toString();\r\n                }\r\n                return value;\r\n              })\r\n            );\r\n          } catch (e) {\r\n            result = text;\r\n          }\r\n\r\n          if (res.ok) {\r\n            callback(null, result);\r\n          } else {\r\n            callback(new Error(`${res.status} ${res.statusText}: ${text}`));\r\n          }\r\n        } catch (err) {\r\n          if (err instanceof Error) callback(err);\r\n        }\r\n      },\r\n      {}\r\n    );\r\n\r\n    return client;\r\n  }\r\n\r\n  async requestWithType<T>(\r\n    method: string,\r\n    args: Array<any>,\r\n    isT: (val: any) => val is T,\r\n    skipDataValidation: boolean = false\r\n  ): Promise<T> {\r\n    const response = await this.request(method, args);\r\n    if (isErrorResponse(response)) {\r\n      throw new Error(`RPC Error: ${response.error.message}`);\r\n    } else if (isValidResponse(response)) {\r\n      const expectedSchema = isT(response.result);\r\n      const errMsg =\r\n        TYPE_MISMATCH_ERROR +\r\n        `Result received was: ${JSON.stringify(response.result)}`;\r\n\r\n      if (skipDataValidation && !expectedSchema) {\r\n        console.warn(errMsg);\r\n        return response.result;\r\n      } else if (!expectedSchema) {\r\n        throw new Error(`RPC Error: ${errMsg}`);\r\n      }\r\n      return response.result;\r\n    }\r\n    throw new Error(`Unexpected RPC Response: ${response}`);\r\n  }\r\n\r\n  async request(method: string, args: Array<any>): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      this.rpcClient.request(method, args, (err: any, response: any) => {\r\n        if (err) {\r\n          reject(err);\r\n          return;\r\n        }\r\n        resolve(response);\r\n      });\r\n    });\r\n  }\r\n\r\n  async batchRequestWithType<T>(\r\n    requests: RpcParams[],\r\n    isT: (val: any) => val is T,\r\n    skipDataValidation: boolean = false\r\n  ): Promise<T[]> {\r\n    const responses = await this.batchRequest(requests);\r\n    // TODO: supports other error modes such as throw or return\r\n    const validResponses = responses.filter(\r\n      (response: any) =>\r\n        isValidResponse(response) &&\r\n        (skipDataValidation || isT(response.result))\r\n    );\r\n\r\n    if (responses.length > validResponses.length) {\r\n      console.warn(\r\n        `Batch request contains invalid responses. ${\r\n          responses.length - validResponses.length\r\n        } of the ${responses.length} requests has invalid schema.`\r\n      );\r\n      const exampleTypeMismatch = responses.find((r: any) => !isT(r.result));\r\n      const exampleInvalidResponseIndex = responses.findIndex(\r\n        (r: any) => !isValidResponse(r)\r\n      );\r\n      if (exampleTypeMismatch) {\r\n        console.warn(\r\n          TYPE_MISMATCH_ERROR +\r\n            `One example mismatch is: ${JSON.stringify(\r\n              exampleTypeMismatch.result\r\n            )}`\r\n        );\r\n      }\r\n      if (exampleInvalidResponseIndex !== -1) {\r\n        console.warn(\r\n          `The request ${JSON.stringify(\r\n            requests[exampleInvalidResponseIndex]\r\n          )} within a batch request returns an invalid response ${JSON.stringify(\r\n            responses[exampleInvalidResponseIndex]\r\n          )}`\r\n        );\r\n      }\r\n    }\r\n\r\n    return validResponses.map((response: ValidResponse) => response.result);\r\n  }\r\n\r\n  async batchRequest(requests: RpcParams[]): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n      // Do nothing if requests is empty\r\n      if (requests.length === 0) resolve([]);\r\n\r\n      const batch = requests.map((params) => {\r\n        return this.rpcClient.request(params.method, params.args);\r\n      });\r\n\r\n      this.rpcClient.request(batch, (err: any, response: any) => {\r\n        if (err) {\r\n          reject(err);\r\n          return;\r\n        }\r\n        resolve(response);\r\n      });\r\n    });\r\n  }\r\n}\r\n\r\nexport type ValidResponse = {\r\n  jsonrpc: '2.0';\r\n  id: string;\r\n  result: any;\r\n};\r\n\r\nexport type ErrorResponse = {\r\n  jsonrpc: '2.0';\r\n  id: string;\r\n  error: {\r\n    code: any;\r\n    message: string;\r\n    data?: any;\r\n  };\r\n};\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n/* eslint-disable */\r\n\r\n/*\r\n * Generated type guards for \"client.ts\".\r\n * WARNING: Do not manually change this file.\r\n */\r\nimport { HttpHeaders, RpcParams, ValidResponse, ErrorResponse } from \"./client\";\r\n\r\nexport function isHttpHeaders(obj: any, _argumentName?: string): obj is HttpHeaders {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\")\r\n    )\r\n}\r\n\r\nexport function isRpcParams(obj: any, _argumentName?: string): obj is RpcParams {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        typeof obj.method === \"string\" &&\r\n        Array.isArray(obj.args)\r\n    )\r\n}\r\n\r\nexport function isValidResponse(obj: any, _argumentName?: string): obj is ValidResponse {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        obj.jsonrpc === \"2.0\" &&\r\n        typeof obj.id === \"string\"\r\n    )\r\n}\r\n\r\nexport function isErrorResponse(obj: any, _argumentName?: string): obj is ErrorResponse {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        obj.jsonrpc === \"2.0\" &&\r\n        typeof obj.id === \"string\" &&\r\n        (obj.error !== null &&\r\n            typeof obj.error === \"object\" ||\r\n            typeof obj.error === \"function\") &&\r\n        typeof obj.error.message === \"string\"\r\n    )\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\n/* eslint-disable */\r\n\r\n/*\r\n * Generated type guards for \"index.ts\".\r\n * WARNING: Do not manually change this file.\r\n */\r\nimport { TransactionDigest, SuiAddress, ObjectOwner, SuiObjectRef, SuiObjectInfo, ObjectContentFields, MovePackageContent, SuiData, SuiMoveObject, CoinDenominationInfoResponse, SuiMovePackage, SuiMoveFunctionArgTypesResponse, SuiMoveFunctionArgType, SuiMoveFunctionArgTypes, SuiMoveNormalizedModules, SuiMoveNormalizedModule, SuiMoveModuleId, SuiMoveNormalizedStruct, SuiMoveStructTypeParameter, SuiMoveNormalizedField, SuiMoveNormalizedFunction, SuiMoveVisibility, SuiMoveTypeParameterIndex, SuiMoveAbilitySet, SuiMoveNormalizedType, SuiMoveNormalizedTypeParameterType, SuiMoveNormalizedStructType, SuiObject, ObjectStatus, ObjectType, GetOwnedObjectsResponse, GetObjectDataResponse, ObjectDigest, ObjectId, SequenceNumber, Order, MoveEvent, PublishEvent, CoinBalanceChangeEvent, TransferObjectEvent, MutateObjectEvent, DeleteObjectEvent, NewObjectEvent, SuiEvent, MoveEventField, EventQuery, EventId, PaginatedEvents, EventType, BalanceChangeType, SuiEventFilter, SuiEventEnvelope, SuiEvents, SubscriptionId, SubscriptionEvent, TransferObject, SuiTransferSui, SuiChangeEpoch, Pay, PaySui, PayAllSui, ExecuteTransactionRequestType, TransactionKindName, SuiTransactionKind, SuiTransactionData, EpochId, GenericAuthoritySignature, AuthorityQuorumSignInfo, CertifiedTransaction, GasCostSummary, ExecutionStatusType, ExecutionStatus, OwnedObjectRef, TransactionEffects, SuiTransactionResponse, SuiCertifiedTransactionEffects, SuiExecuteTransactionResponse, GatewayTxSeqNumber, GetTxnDigestsResponse, PaginatedTransactionDigests, TransactionQuery, MoveCall, SuiJsonValue, EmptySignInfo, AuthorityName, AuthoritySignature, TransactionBytes, SuiParsedMergeCoinResponse, SuiParsedSplitCoinResponse, SuiParsedPublishResponse, SuiPackage, SuiParsedTransactionResponse, DelegationData, DelegationSuiObject, TransferObjectTx, TransferSuiTx, PayTx, PaySuiTx, PayAllSuiTx, PublishTx, SharedObjectRef, ObjectArg, CallArg, StructTag, TypeTag, MoveCallTx, Transaction, TransactionKind, TransactionData, RpcApiVersion, FaucetCoinInfo, FaucetResponse } from \"./index\";\r\n\r\nexport function isTransactionDigest(obj: any, _argumentName?: string): obj is TransactionDigest {\r\n    return (\r\n        typeof obj === \"string\"\r\n    )\r\n}\r\n\r\nexport function isSuiAddress(obj: any, _argumentName?: string): obj is SuiAddress {\r\n    return (\r\n        typeof obj === \"string\"\r\n    )\r\n}\r\n\r\nexport function isObjectOwner(obj: any, _argumentName?: string): obj is ObjectOwner {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.AddressOwner) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.ObjectOwner) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            (obj.Shared !== null &&\r\n                typeof obj.Shared === \"object\" ||\r\n                typeof obj.Shared === \"function\") &&\r\n            isSuiMoveTypeParameterIndex(obj.Shared.initial_shared_version) as boolean ||\r\n            obj === \"Immutable\")\r\n    )\r\n}\r\n\r\nexport function isSuiObjectRef(obj: any, _argumentName?: string): obj is SuiObjectRef {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.digest) as boolean &&\r\n        isTransactionDigest(obj.objectId) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.version) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiObjectInfo(obj: any, _argumentName?: string): obj is SuiObjectInfo {\r\n    return (\r\n        isSuiObjectRef(obj) as boolean &&\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.type) as boolean &&\r\n        isObjectOwner(obj.owner) as boolean &&\r\n        isTransactionDigest(obj.previousTransaction) as boolean\r\n    )\r\n}\r\n\r\nexport function isObjectContentFields(obj: any, _argumentName?: string): obj is ObjectContentFields {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        Object.entries<any>(obj)\r\n            .every(([key, _value]) => (isTransactionDigest(key) as boolean))\r\n    )\r\n}\r\n\r\nexport function isMovePackageContent(obj: any, _argumentName?: string): obj is MovePackageContent {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        Object.entries<any>(obj)\r\n            .every(([key, value]) => (isTransactionDigest(value) as boolean &&\r\n                isTransactionDigest(key) as boolean))\r\n    )\r\n}\r\n\r\nexport function isSuiData(obj: any, _argumentName?: string): obj is SuiData {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            isObjectType(obj.dataType) as boolean &&\r\n            isSuiMoveObject(obj) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isObjectType(obj.dataType) as boolean &&\r\n            isSuiMovePackage(obj) as boolean)\r\n    )\r\n}\r\n\r\nexport function isSuiMoveObject(obj: any, _argumentName?: string): obj is SuiMoveObject {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.type) as boolean &&\r\n        isObjectContentFields(obj.fields) as boolean &&\r\n        typeof obj.has_public_transfer === \"boolean\"\r\n    )\r\n}\r\n\r\nexport function isCoinDenominationInfoResponse(obj: any, _argumentName?: string): obj is CoinDenominationInfoResponse {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.coinType) as boolean &&\r\n        isTransactionDigest(obj.basicUnit) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.decimalNumber) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiMovePackage(obj: any, _argumentName?: string): obj is SuiMovePackage {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isMovePackageContent(obj.disassembled) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiMoveFunctionArgTypesResponse(obj: any, _argumentName?: string): obj is SuiMoveFunctionArgTypesResponse {\r\n    return (\r\n        Array.isArray(obj) &&\r\n        obj.every((e: any) =>\r\n            isSuiMoveFunctionArgType(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isSuiMoveFunctionArgType(obj: any, _argumentName?: string): obj is SuiMoveFunctionArgType {\r\n    return (\r\n        (isTransactionDigest(obj) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.Object) as boolean)\r\n    )\r\n}\r\n\r\nexport function isSuiMoveFunctionArgTypes(obj: any, _argumentName?: string): obj is SuiMoveFunctionArgTypes {\r\n    return (\r\n        Array.isArray(obj) &&\r\n        obj.every((e: any) =>\r\n            isSuiMoveFunctionArgType(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isSuiMoveNormalizedModules(obj: any, _argumentName?: string): obj is SuiMoveNormalizedModules {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        Object.entries<any>(obj)\r\n            .every(([key, value]) => (isSuiMoveNormalizedModule(value) as boolean &&\r\n                isTransactionDigest(key) as boolean))\r\n    )\r\n}\r\n\r\nexport function isSuiMoveNormalizedModule(obj: any, _argumentName?: string): obj is SuiMoveNormalizedModule {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.file_format_version) as boolean &&\r\n        isTransactionDigest(obj.address) as boolean &&\r\n        isTransactionDigest(obj.name) as boolean &&\r\n        Array.isArray(obj.friends) &&\r\n        obj.friends.every((e: any) =>\r\n            isSuiMoveModuleId(e) as boolean\r\n        ) &&\r\n        (obj.structs !== null &&\r\n            typeof obj.structs === \"object\" ||\r\n            typeof obj.structs === \"function\") &&\r\n        Object.entries<any>(obj.structs)\r\n            .every(([key, value]) => (isSuiMoveNormalizedStruct(value) as boolean &&\r\n                isTransactionDigest(key) as boolean)) &&\r\n        (obj.exposed_functions !== null &&\r\n            typeof obj.exposed_functions === \"object\" ||\r\n            typeof obj.exposed_functions === \"function\") &&\r\n        Object.entries<any>(obj.exposed_functions)\r\n            .every(([key, value]) => (isSuiMoveNormalizedFunction(value) as boolean &&\r\n                isTransactionDigest(key) as boolean))\r\n    )\r\n}\r\n\r\nexport function isSuiMoveModuleId(obj: any, _argumentName?: string): obj is SuiMoveModuleId {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.address) as boolean &&\r\n        isTransactionDigest(obj.name) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiMoveNormalizedStruct(obj: any, _argumentName?: string): obj is SuiMoveNormalizedStruct {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveAbilitySet(obj.abilities) as boolean &&\r\n        Array.isArray(obj.type_parameters) &&\r\n        obj.type_parameters.every((e: any) =>\r\n            isSuiMoveStructTypeParameter(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.fields) &&\r\n        obj.fields.every((e: any) =>\r\n            isSuiMoveNormalizedField(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isSuiMoveStructTypeParameter(obj: any, _argumentName?: string): obj is SuiMoveStructTypeParameter {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveAbilitySet(obj.constraints) as boolean &&\r\n        typeof obj.is_phantom === \"boolean\"\r\n    )\r\n}\r\n\r\nexport function isSuiMoveNormalizedField(obj: any, _argumentName?: string): obj is SuiMoveNormalizedField {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.name) as boolean &&\r\n        isSuiMoveNormalizedType(obj.type_) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiMoveNormalizedFunction(obj: any, _argumentName?: string): obj is SuiMoveNormalizedFunction {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveVisibility(obj.visibility) as boolean &&\r\n        typeof obj.is_entry === \"boolean\" &&\r\n        Array.isArray(obj.type_parameters) &&\r\n        obj.type_parameters.every((e: any) =>\r\n            isSuiMoveAbilitySet(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.parameters) &&\r\n        obj.parameters.every((e: any) =>\r\n            isSuiMoveNormalizedType(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.return_) &&\r\n        obj.return_.every((e: any) =>\r\n            isSuiMoveNormalizedType(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isSuiMoveVisibility(obj: any, _argumentName?: string): obj is SuiMoveVisibility {\r\n    return (\r\n        (obj === \"Private\" ||\r\n            obj === \"Public\" ||\r\n            obj === \"Friend\")\r\n    )\r\n}\r\n\r\nexport function isSuiMoveTypeParameterIndex(obj: any, _argumentName?: string): obj is SuiMoveTypeParameterIndex {\r\n    return (\r\n        typeof obj === \"number\"\r\n    )\r\n}\r\n\r\nexport function isSuiMoveAbilitySet(obj: any, _argumentName?: string): obj is SuiMoveAbilitySet {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        Array.isArray(obj.abilities) &&\r\n        obj.abilities.every((e: any) =>\r\n            isTransactionDigest(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isSuiMoveNormalizedType(obj: any, _argumentName?: string): obj is SuiMoveNormalizedType {\r\n    return (\r\n        (isTransactionDigest(obj) as boolean ||\r\n            isSuiMoveNormalizedTypeParameterType(obj) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isSuiMoveNormalizedType(obj.Reference) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isSuiMoveNormalizedType(obj.MutableReference) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isSuiMoveNormalizedType(obj.Vector) as boolean ||\r\n            isSuiMoveNormalizedStructType(obj) as boolean)\r\n    )\r\n}\r\n\r\nexport function isSuiMoveNormalizedTypeParameterType(obj: any, _argumentName?: string): obj is SuiMoveNormalizedTypeParameterType {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.TypeParameter) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiMoveNormalizedStructType(obj: any, _argumentName?: string): obj is SuiMoveNormalizedStructType {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        (obj.Struct !== null &&\r\n            typeof obj.Struct === \"object\" ||\r\n            typeof obj.Struct === \"function\") &&\r\n        isTransactionDigest(obj.Struct.address) as boolean &&\r\n        isTransactionDigest(obj.Struct.module) as boolean &&\r\n        isTransactionDigest(obj.Struct.name) as boolean &&\r\n        Array.isArray(obj.Struct.type_arguments) &&\r\n        obj.Struct.type_arguments.every((e: any) =>\r\n            isSuiMoveNormalizedType(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isSuiObject(obj: any, _argumentName?: string): obj is SuiObject {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiData(obj.data) as boolean &&\r\n        isObjectOwner(obj.owner) as boolean &&\r\n        isTransactionDigest(obj.previousTransaction) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.storageRebate) as boolean &&\r\n        isSuiObjectRef(obj.reference) as boolean\r\n    )\r\n}\r\n\r\nexport function isObjectStatus(obj: any, _argumentName?: string): obj is ObjectStatus {\r\n    return (\r\n        (obj === \"Exists\" ||\r\n            obj === \"NotExists\" ||\r\n            obj === \"Deleted\")\r\n    )\r\n}\r\n\r\nexport function isObjectType(obj: any, _argumentName?: string): obj is ObjectType {\r\n    return (\r\n        (obj === \"moveObject\" ||\r\n            obj === \"package\")\r\n    )\r\n}\r\n\r\nexport function isGetOwnedObjectsResponse(obj: any, _argumentName?: string): obj is GetOwnedObjectsResponse {\r\n    return (\r\n        Array.isArray(obj) &&\r\n        obj.every((e: any) =>\r\n            isSuiObjectInfo(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isGetObjectDataResponse(obj: any, _argumentName?: string): obj is GetObjectDataResponse {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isObjectStatus(obj.status) as boolean &&\r\n        (isTransactionDigest(obj.details) as boolean ||\r\n            isSuiObjectRef(obj.details) as boolean ||\r\n            isSuiObject(obj.details) as boolean)\r\n    )\r\n}\r\n\r\nexport function isObjectDigest(obj: any, _argumentName?: string): obj is ObjectDigest {\r\n    return (\r\n        typeof obj === \"string\"\r\n    )\r\n}\r\n\r\nexport function isObjectId(obj: any, _argumentName?: string): obj is ObjectId {\r\n    return (\r\n        typeof obj === \"string\"\r\n    )\r\n}\r\n\r\nexport function isSequenceNumber(obj: any, _argumentName?: string): obj is SequenceNumber {\r\n    return (\r\n        typeof obj === \"number\"\r\n    )\r\n}\r\n\r\nexport function isOrder(obj: any, _argumentName?: string): obj is Order {\r\n    return (\r\n        (obj === \"ascending\" ||\r\n            obj === \"descending\")\r\n    )\r\n}\r\n\r\nexport function isMoveEvent(obj: any, _argumentName?: string): obj is MoveEvent {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.packageId) as boolean &&\r\n        isTransactionDigest(obj.transactionModule) as boolean &&\r\n        isTransactionDigest(obj.sender) as boolean &&\r\n        isTransactionDigest(obj.type) as boolean &&\r\n        (obj.fields !== null &&\r\n            typeof obj.fields === \"object\" ||\r\n            typeof obj.fields === \"function\") &&\r\n        isTransactionDigest(obj.bcs) as boolean\r\n    )\r\n}\r\n\r\nexport function isPublishEvent(obj: any, _argumentName?: string): obj is PublishEvent {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.sender) as boolean &&\r\n        isTransactionDigest(obj.packageId) as boolean\r\n    )\r\n}\r\n\r\nexport function isCoinBalanceChangeEvent(obj: any, _argumentName?: string): obj is CoinBalanceChangeEvent {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.packageId) as boolean &&\r\n        isTransactionDigest(obj.transactionModule) as boolean &&\r\n        isTransactionDigest(obj.sender) as boolean &&\r\n        isObjectOwner(obj.owner) as boolean &&\r\n        isBalanceChangeType(obj.changeType) as boolean &&\r\n        isTransactionDigest(obj.coinType) as boolean &&\r\n        isTransactionDigest(obj.coinObjectId) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.version) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.amount) as boolean\r\n    )\r\n}\r\n\r\nexport function isTransferObjectEvent(obj: any, _argumentName?: string): obj is TransferObjectEvent {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.packageId) as boolean &&\r\n        isTransactionDigest(obj.transactionModule) as boolean &&\r\n        isTransactionDigest(obj.sender) as boolean &&\r\n        isObjectOwner(obj.recipient) as boolean &&\r\n        isTransactionDigest(obj.objectType) as boolean &&\r\n        isTransactionDigest(obj.objectId) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.version) as boolean\r\n    )\r\n}\r\n\r\nexport function isMutateObjectEvent(obj: any, _argumentName?: string): obj is MutateObjectEvent {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.packageId) as boolean &&\r\n        isTransactionDigest(obj.transactionModule) as boolean &&\r\n        isTransactionDigest(obj.sender) as boolean &&\r\n        isTransactionDigest(obj.objectType) as boolean &&\r\n        isTransactionDigest(obj.objectId) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.version) as boolean\r\n    )\r\n}\r\n\r\nexport function isDeleteObjectEvent(obj: any, _argumentName?: string): obj is DeleteObjectEvent {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.packageId) as boolean &&\r\n        isTransactionDigest(obj.transactionModule) as boolean &&\r\n        isTransactionDigest(obj.sender) as boolean &&\r\n        isTransactionDigest(obj.objectId) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.version) as boolean\r\n    )\r\n}\r\n\r\nexport function isNewObjectEvent(obj: any, _argumentName?: string): obj is NewObjectEvent {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.packageId) as boolean &&\r\n        isTransactionDigest(obj.transactionModule) as boolean &&\r\n        isTransactionDigest(obj.sender) as boolean &&\r\n        isObjectOwner(obj.recipient) as boolean &&\r\n        isTransactionDigest(obj.objectType) as boolean &&\r\n        isTransactionDigest(obj.objectId) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.version) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiEvent(obj: any, _argumentName?: string): obj is SuiEvent {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            isMoveEvent(obj.moveEvent) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isPublishEvent(obj.publish) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isCoinBalanceChangeEvent(obj.coinBalanceChange) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransferObjectEvent(obj.transferObject) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isMutateObjectEvent(obj.mutateObject) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isDeleteObjectEvent(obj.deleteObject) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isNewObjectEvent(obj.newObject) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            typeof obj.epochChange === \"bigint\" ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            typeof obj.checkpoint === \"bigint\")\r\n    )\r\n}\r\n\r\nexport function isMoveEventField(obj: any, _argumentName?: string): obj is MoveEventField {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.path) as boolean &&\r\n        isSuiJsonValue(obj.value) as boolean\r\n    )\r\n}\r\n\r\nexport function isEventQuery(obj: any, _argumentName?: string): obj is EventQuery {\r\n    return (\r\n        (obj === \"All\" ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.Transaction) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            (obj.MoveModule !== null &&\r\n                typeof obj.MoveModule === \"object\" ||\r\n                typeof obj.MoveModule === \"function\") &&\r\n            isTransactionDigest(obj.MoveModule.package) as boolean &&\r\n            isTransactionDigest(obj.MoveModule.module) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.MoveEvent) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isEventType(obj.EventType) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.Sender) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isObjectOwner(obj.Recipient) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.Object) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            (obj.TimeRange !== null &&\r\n                typeof obj.TimeRange === \"object\" ||\r\n                typeof obj.TimeRange === \"function\") &&\r\n            isSuiMoveTypeParameterIndex(obj.TimeRange.start_time) as boolean &&\r\n            isSuiMoveTypeParameterIndex(obj.TimeRange.end_time) as boolean)\r\n    )\r\n}\r\n\r\nexport function isEventId(obj: any, _argumentName?: string): obj is EventId {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.txSeq) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.eventSeq) as boolean\r\n    )\r\n}\r\n\r\nexport function isPaginatedEvents(obj: any, _argumentName?: string): obj is PaginatedEvents {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiEvents(obj.data) as boolean &&\r\n        isEventId(obj.nextCursor) as boolean\r\n    )\r\n}\r\n\r\nexport function isEventType(obj: any, _argumentName?: string): obj is EventType {\r\n    return (\r\n        (obj === \"MoveEvent\" ||\r\n            obj === \"Publish\" ||\r\n            obj === \"TransferObject\" ||\r\n            obj === \"MutateObject\" ||\r\n            obj === \"CoinBalanceChange\" ||\r\n            obj === \"DeleteObject\" ||\r\n            obj === \"NewObject\" ||\r\n            obj === \"EpochChange\" ||\r\n            obj === \"Checkpoint\")\r\n    )\r\n}\r\n\r\nexport function isBalanceChangeType(obj: any, _argumentName?: string): obj is BalanceChangeType {\r\n    return (\r\n        (obj === \"Gas\" ||\r\n            obj === \"Pay\" ||\r\n            obj === \"Receive\")\r\n    )\r\n}\r\n\r\nexport function isSuiEventFilter(obj: any, _argumentName?: string): obj is SuiEventFilter {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.Package) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.Module) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.MoveEventType) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isMoveEventField(obj.MoveEventField) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.SenderAddress) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isEventType(obj.EventType) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            Array.isArray(obj.All) &&\r\n            obj.All.every((e: any) =>\r\n                isSuiEventFilter(e) as boolean\r\n            ) ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            Array.isArray(obj.Any) &&\r\n            obj.Any.every((e: any) =>\r\n                isSuiEventFilter(e) as boolean\r\n            ) ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            Array.isArray(obj.And) &&\r\n            isSuiEventFilter(obj.And[0]) as boolean &&\r\n            isSuiEventFilter(obj.And[1]) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            Array.isArray(obj.Or) &&\r\n            isSuiEventFilter(obj.Or[0]) as boolean &&\r\n            isSuiEventFilter(obj.Or[1]) as boolean)\r\n    )\r\n}\r\n\r\nexport function isSuiEventEnvelope(obj: any, _argumentName?: string): obj is SuiEventEnvelope {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.timestamp) as boolean &&\r\n        isTransactionDigest(obj.txDigest) as boolean &&\r\n        isEventId(obj.id) as boolean &&\r\n        isSuiEvent(obj.event) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiEvents(obj: any, _argumentName?: string): obj is SuiEvents {\r\n    return (\r\n        Array.isArray(obj) &&\r\n        obj.every((e: any) =>\r\n            isSuiEventEnvelope(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isSubscriptionId(obj: any, _argumentName?: string): obj is SubscriptionId {\r\n    return (\r\n        typeof obj === \"number\"\r\n    )\r\n}\r\n\r\nexport function isSubscriptionEvent(obj: any, _argumentName?: string): obj is SubscriptionEvent {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.subscription) as boolean &&\r\n        isSuiEventEnvelope(obj.result) as boolean\r\n    )\r\n}\r\n\r\nexport function isTransferObject(obj: any, _argumentName?: string): obj is TransferObject {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.recipient) as boolean &&\r\n        isSuiObjectRef(obj.objectRef) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiTransferSui(obj: any, _argumentName?: string): obj is SuiTransferSui {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.recipient) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.amount) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiChangeEpoch(obj: any, _argumentName?: string): obj is SuiChangeEpoch {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.epoch) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.storage_charge) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.computation_charge) as boolean\r\n    )\r\n}\r\n\r\nexport function isPay(obj: any, _argumentName?: string): obj is Pay {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        Array.isArray(obj.coins) &&\r\n        obj.coins.every((e: any) =>\r\n            isSuiObjectRef(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.recipients) &&\r\n        obj.recipients.every((e: any) =>\r\n            isTransactionDigest(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.amounts) &&\r\n        obj.amounts.every((e: any) =>\r\n            isSuiMoveTypeParameterIndex(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isPaySui(obj: any, _argumentName?: string): obj is PaySui {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        Array.isArray(obj.coins) &&\r\n        obj.coins.every((e: any) =>\r\n            isSuiObjectRef(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.recipients) &&\r\n        obj.recipients.every((e: any) =>\r\n            isTransactionDigest(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.amounts) &&\r\n        obj.amounts.every((e: any) =>\r\n            isSuiMoveTypeParameterIndex(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isPayAllSui(obj: any, _argumentName?: string): obj is PayAllSui {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        Array.isArray(obj.coins) &&\r\n        obj.coins.every((e: any) =>\r\n            isSuiObjectRef(e) as boolean\r\n        ) &&\r\n        isTransactionDigest(obj.recipient) as boolean\r\n    )\r\n}\r\n\r\nexport function isExecuteTransactionRequestType(obj: any, _argumentName?: string): obj is ExecuteTransactionRequestType {\r\n    return (\r\n        (obj === \"ImmediateReturn\" ||\r\n            obj === \"WaitForTxCert\" ||\r\n            obj === \"WaitForEffectsCert\" ||\r\n            obj === \"WaitForLocalExecution\")\r\n    )\r\n}\r\n\r\nexport function isTransactionKindName(obj: any, _argumentName?: string): obj is TransactionKindName {\r\n    return (\r\n        (obj === \"Publish\" ||\r\n            obj === \"TransferObject\" ||\r\n            obj === \"Pay\" ||\r\n            obj === \"Call\" ||\r\n            obj === \"TransferSui\" ||\r\n            obj === \"ChangeEpoch\" ||\r\n            obj === \"PaySui\" ||\r\n            obj === \"PayAllSui\")\r\n    )\r\n}\r\n\r\nexport function isSuiTransactionKind(obj: any, _argumentName?: string): obj is SuiTransactionKind {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            isTransferObject(obj.TransferObject) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isSuiMovePackage(obj.Publish) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isMoveCall(obj.Call) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isSuiTransferSui(obj.TransferSui) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isSuiChangeEpoch(obj.ChangeEpoch) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isPay(obj.Pay) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isPaySui(obj.PaySui) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isPayAllSui(obj.PayAllSui) as boolean)\r\n    )\r\n}\r\n\r\nexport function isSuiTransactionData(obj: any, _argumentName?: string): obj is SuiTransactionData {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        Array.isArray(obj.transactions) &&\r\n        obj.transactions.every((e: any) =>\r\n            isSuiTransactionKind(e) as boolean\r\n        ) &&\r\n        isTransactionDigest(obj.sender) as boolean &&\r\n        isSuiObjectRef(obj.gasPayment) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.gasBudget) as boolean\r\n    )\r\n}\r\n\r\nexport function isEpochId(obj: any, _argumentName?: string): obj is EpochId {\r\n    return (\r\n        typeof obj === \"number\"\r\n    )\r\n}\r\n\r\nexport function isGenericAuthoritySignature(obj: any, _argumentName?: string): obj is GenericAuthoritySignature {\r\n    return (\r\n        (isTransactionDigest(obj) as boolean ||\r\n            Array.isArray(obj) &&\r\n            obj.every((e: any) =>\r\n                isTransactionDigest(e) as boolean\r\n            ))\r\n    )\r\n}\r\n\r\nexport function isAuthorityQuorumSignInfo(obj: any, _argumentName?: string): obj is AuthorityQuorumSignInfo {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.epoch) as boolean &&\r\n        isGenericAuthoritySignature(obj.signature) as boolean\r\n    )\r\n}\r\n\r\nexport function isCertifiedTransaction(obj: any, _argumentName?: string): obj is CertifiedTransaction {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.transactionDigest) as boolean &&\r\n        isSuiTransactionData(obj.data) as boolean &&\r\n        isTransactionDigest(obj.txSignature) as boolean &&\r\n        isAuthorityQuorumSignInfo(obj.authSignInfo) as boolean\r\n    )\r\n}\r\n\r\nexport function isGasCostSummary(obj: any, _argumentName?: string): obj is GasCostSummary {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.computationCost) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.storageCost) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.storageRebate) as boolean\r\n    )\r\n}\r\n\r\nexport function isExecutionStatusType(obj: any, _argumentName?: string): obj is ExecutionStatusType {\r\n    return (\r\n        (obj === \"success\" ||\r\n            obj === \"failure\")\r\n    )\r\n}\r\n\r\nexport function isExecutionStatus(obj: any, _argumentName?: string): obj is ExecutionStatus {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isExecutionStatusType(obj.status) as boolean &&\r\n        isTransactionDigest(obj.error) as boolean\r\n    )\r\n}\r\n\r\nexport function isOwnedObjectRef(obj: any, _argumentName?: string): obj is OwnedObjectRef {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isObjectOwner(obj.owner) as boolean &&\r\n        isSuiObjectRef(obj.reference) as boolean\r\n    )\r\n}\r\n\r\nexport function isTransactionEffects(obj: any, _argumentName?: string): obj is TransactionEffects {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isExecutionStatus(obj.status) as boolean &&\r\n        isGasCostSummary(obj.gasUsed) as boolean &&\r\n        Array.isArray(obj.sharedObjects) &&\r\n        obj.sharedObjects.every((e: any) =>\r\n            isSuiObjectRef(e) as boolean\r\n        ) &&\r\n        isTransactionDigest(obj.transactionDigest) as boolean &&\r\n        Array.isArray(obj.created) &&\r\n        obj.created.every((e: any) =>\r\n            isOwnedObjectRef(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.mutated) &&\r\n        obj.mutated.every((e: any) =>\r\n            isOwnedObjectRef(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.unwrapped) &&\r\n        obj.unwrapped.every((e: any) =>\r\n            isOwnedObjectRef(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.deleted) &&\r\n        obj.deleted.every((e: any) =>\r\n            isSuiObjectRef(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.wrapped) &&\r\n        obj.wrapped.every((e: any) =>\r\n            isSuiObjectRef(e) as boolean\r\n        ) &&\r\n        isOwnedObjectRef(obj.gasObject) as boolean &&\r\n        Array.isArray(obj.events) &&\r\n        Array.isArray(obj.dependencies) &&\r\n        obj.dependencies.every((e: any) =>\r\n            isTransactionDigest(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isSuiTransactionResponse(obj: any, _argumentName?: string): obj is SuiTransactionResponse {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isCertifiedTransaction(obj.certificate) as boolean &&\r\n        isTransactionEffects(obj.effects) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.timestamp_ms) as boolean &&\r\n        isSuiParsedTransactionResponse(obj.parsed_data) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiCertifiedTransactionEffects(obj: any, _argumentName?: string): obj is SuiCertifiedTransactionEffects {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionEffects(obj.effects) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiExecuteTransactionResponse(obj: any, _argumentName?: string): obj is SuiExecuteTransactionResponse {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            (obj.ImmediateReturn !== null &&\r\n                typeof obj.ImmediateReturn === \"object\" ||\r\n                typeof obj.ImmediateReturn === \"function\") &&\r\n            isTransactionDigest(obj.ImmediateReturn.tx_digest) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            (obj.TxCert !== null &&\r\n                typeof obj.TxCert === \"object\" ||\r\n                typeof obj.TxCert === \"function\") &&\r\n            isCertifiedTransaction(obj.TxCert.certificate) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            (obj.EffectsCert !== null &&\r\n                typeof obj.EffectsCert === \"object\" ||\r\n                typeof obj.EffectsCert === \"function\") &&\r\n            isCertifiedTransaction(obj.EffectsCert.certificate) as boolean &&\r\n            isSuiCertifiedTransactionEffects(obj.EffectsCert.effects) as boolean)\r\n    )\r\n}\r\n\r\nexport function isGatewayTxSeqNumber(obj: any, _argumentName?: string): obj is GatewayTxSeqNumber {\r\n    return (\r\n        typeof obj === \"number\"\r\n    )\r\n}\r\n\r\nexport function isGetTxnDigestsResponse(obj: any, _argumentName?: string): obj is GetTxnDigestsResponse {\r\n    return (\r\n        Array.isArray(obj) &&\r\n        obj.every((e: any) =>\r\n            isTransactionDigest(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isPaginatedTransactionDigests(obj: any, _argumentName?: string): obj is PaginatedTransactionDigests {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        Array.isArray(obj.data) &&\r\n        obj.data.every((e: any) =>\r\n            isTransactionDigest(e) as boolean\r\n        ) &&\r\n        isTransactionDigest(obj.nextCursor) as boolean\r\n    )\r\n}\r\n\r\nexport function isTransactionQuery(obj: any, _argumentName?: string): obj is TransactionQuery {\r\n    return (\r\n        (obj === \"All\" ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            (obj.MoveFunction !== null &&\r\n                typeof obj.MoveFunction === \"object\" ||\r\n                typeof obj.MoveFunction === \"function\") &&\r\n            isTransactionDigest(obj.MoveFunction.package) as boolean &&\r\n            isTransactionDigest(obj.MoveFunction.module) as boolean &&\r\n            isTransactionDigest(obj.MoveFunction.function) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.InputObject) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.MutatedObject) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.FromAddress) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTransactionDigest(obj.ToAddress) as boolean)\r\n    )\r\n}\r\n\r\nexport function isMoveCall(obj: any, _argumentName?: string): obj is MoveCall {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiObjectRef(obj.package) as boolean &&\r\n        isTransactionDigest(obj.module) as boolean &&\r\n        isTransactionDigest(obj.function) as boolean &&\r\n        Array.isArray(obj.typeArguments) &&\r\n        obj.typeArguments.every((e: any) =>\r\n            isTransactionDigest(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.arguments) &&\r\n        obj.arguments.every((e: any) =>\r\n            isSuiJsonValue(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isSuiJsonValue(obj: any, _argumentName?: string): obj is SuiJsonValue {\r\n    return (\r\n        (isTransactionDigest(obj) as boolean ||\r\n            isSuiMoveTypeParameterIndex(obj) as boolean ||\r\n            obj === false ||\r\n            obj === true ||\r\n            Array.isArray(obj) &&\r\n            obj.every((e: any) =>\r\n                isSuiJsonValue(e) as boolean\r\n            ))\r\n    )\r\n}\r\n\r\nexport function isEmptySignInfo(obj: any, _argumentName?: string): obj is EmptySignInfo {\r\n    return (\r\n        typeof obj === \"object\"\r\n    )\r\n}\r\n\r\nexport function isAuthorityName(obj: any, _argumentName?: string): obj is AuthorityName {\r\n    return (\r\n        typeof obj === \"string\"\r\n    )\r\n}\r\n\r\nexport function isAuthoritySignature(obj: any, _argumentName?: string): obj is AuthoritySignature {\r\n    return (\r\n        typeof obj === \"string\"\r\n    )\r\n}\r\n\r\nexport function isTransactionBytes(obj: any, _argumentName?: string): obj is TransactionBytes {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.txBytes) as boolean &&\r\n        isSuiObjectRef(obj.gas) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiParsedMergeCoinResponse(obj: any, _argumentName?: string): obj is SuiParsedMergeCoinResponse {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiObject(obj.updatedCoin) as boolean &&\r\n        isSuiObject(obj.updatedGas) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiParsedSplitCoinResponse(obj: any, _argumentName?: string): obj is SuiParsedSplitCoinResponse {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiObject(obj.updatedCoin) as boolean &&\r\n        Array.isArray(obj.newCoins) &&\r\n        obj.newCoins.every((e: any) =>\r\n            isSuiObject(e) as boolean\r\n        ) &&\r\n        isSuiObject(obj.updatedGas) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiParsedPublishResponse(obj: any, _argumentName?: string): obj is SuiParsedPublishResponse {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        Array.isArray(obj.createdObjects) &&\r\n        obj.createdObjects.every((e: any) =>\r\n            isSuiObject(e) as boolean\r\n        ) &&\r\n        isSuiPackage(obj.package) as boolean &&\r\n        isSuiObject(obj.updatedGas) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiPackage(obj: any, _argumentName?: string): obj is SuiPackage {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.digest) as boolean &&\r\n        isTransactionDigest(obj.objectId) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.version) as boolean\r\n    )\r\n}\r\n\r\nexport function isSuiParsedTransactionResponse(obj: any, _argumentName?: string): obj is SuiParsedTransactionResponse {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            isSuiParsedSplitCoinResponse(obj.SplitCoin) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isSuiParsedMergeCoinResponse(obj.MergeCoin) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isSuiParsedPublishResponse(obj.Publish) as boolean)\r\n    )\r\n}\r\n\r\nexport function isDelegationData(obj: any, _argumentName?: string): obj is DelegationData {\r\n    return (\r\n        isSuiMoveObject(obj) as boolean &&\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isObjectType(obj.dataType) as boolean &&\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        obj.type === \"0x2::delegation::Delegation\" &&\r\n        (obj.fields !== null &&\r\n            typeof obj.fields === \"object\" ||\r\n            typeof obj.fields === \"function\") &&\r\n        (isSuiMoveTypeParameterIndex(obj.fields.active_delegation) as boolean ||\r\n            (obj.fields.active_delegation !== null &&\r\n                typeof obj.fields.active_delegation === \"object\" ||\r\n                typeof obj.fields.active_delegation === \"function\") &&\r\n            (obj.fields.active_delegation.fields !== null &&\r\n                typeof obj.fields.active_delegation.fields === \"object\" ||\r\n                typeof obj.fields.active_delegation.fields === \"function\") &&\r\n            obj.fields.active_delegation.fields.vec === \"\" &&\r\n            isTransactionDigest(obj.fields.active_delegation.type) as boolean) &&\r\n        isSuiMoveTypeParameterIndex(obj.fields.delegate_amount) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.fields.next_reward_unclaimed_epoch) as boolean &&\r\n        isTransactionDigest(obj.fields.validator_address) as boolean &&\r\n        (obj.fields.info !== null &&\r\n            typeof obj.fields.info === \"object\" ||\r\n            typeof obj.fields.info === \"function\") &&\r\n        isTransactionDigest(obj.fields.info.id) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.fields.info.version) as boolean &&\r\n        (isSuiMoveObject(obj.fields.coin_locked_until_epoch) as boolean ||\r\n            (obj.fields.coin_locked_until_epoch !== null &&\r\n                typeof obj.fields.coin_locked_until_epoch === \"object\" ||\r\n                typeof obj.fields.coin_locked_until_epoch === \"function\") &&\r\n            (obj.fields.coin_locked_until_epoch.fields !== null &&\r\n                typeof obj.fields.coin_locked_until_epoch.fields === \"object\" ||\r\n                typeof obj.fields.coin_locked_until_epoch.fields === \"function\") &&\r\n            obj.fields.coin_locked_until_epoch.fields.vec === \"\" &&\r\n            isTransactionDigest(obj.fields.coin_locked_until_epoch.type) as boolean) &&\r\n        (isSuiMoveTypeParameterIndex(obj.fields.ending_epoch) as boolean ||\r\n            (obj.fields.ending_epoch !== null &&\r\n                typeof obj.fields.ending_epoch === \"object\" ||\r\n                typeof obj.fields.ending_epoch === \"function\") &&\r\n            (obj.fields.ending_epoch.fields !== null &&\r\n                typeof obj.fields.ending_epoch.fields === \"object\" ||\r\n                typeof obj.fields.ending_epoch.fields === \"function\") &&\r\n            obj.fields.ending_epoch.fields.vec === \"\" &&\r\n            isTransactionDigest(obj.fields.ending_epoch.type) as boolean)\r\n    )\r\n}\r\n\r\nexport function isDelegationSuiObject(obj: any, _argumentName?: string): obj is DelegationSuiObject {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isObjectOwner(obj.owner) as boolean &&\r\n        isTransactionDigest(obj.previousTransaction) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.storageRebate) as boolean &&\r\n        isSuiObjectRef(obj.reference) as boolean &&\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isDelegationData(obj.data) as boolean\r\n    )\r\n}\r\n\r\nexport function isTransferObjectTx(obj: any, _argumentName?: string): obj is TransferObjectTx {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        (obj.TransferObject !== null &&\r\n            typeof obj.TransferObject === \"object\" ||\r\n            typeof obj.TransferObject === \"function\") &&\r\n        isTransactionDigest(obj.TransferObject.recipient) as boolean &&\r\n        isSuiObjectRef(obj.TransferObject.object_ref) as boolean\r\n    )\r\n}\r\n\r\nexport function isTransferSuiTx(obj: any, _argumentName?: string): obj is TransferSuiTx {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        (obj.TransferSui !== null &&\r\n            typeof obj.TransferSui === \"object\" ||\r\n            typeof obj.TransferSui === \"function\") &&\r\n        isTransactionDigest(obj.TransferSui.recipient) as boolean &&\r\n        ((obj.TransferSui.amount !== null &&\r\n            typeof obj.TransferSui.amount === \"object\" ||\r\n            typeof obj.TransferSui.amount === \"function\") &&\r\n            isSuiMoveTypeParameterIndex(obj.TransferSui.amount.Some) as boolean ||\r\n            (obj.TransferSui.amount !== null &&\r\n                typeof obj.TransferSui.amount === \"object\" ||\r\n                typeof obj.TransferSui.amount === \"function\") &&\r\n            obj.TransferSui.amount.None === null)\r\n    )\r\n}\r\n\r\nexport function isPayTx(obj: any, _argumentName?: string): obj is PayTx {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        (obj.Pay !== null &&\r\n            typeof obj.Pay === \"object\" ||\r\n            typeof obj.Pay === \"function\") &&\r\n        Array.isArray(obj.Pay.coins) &&\r\n        obj.Pay.coins.every((e: any) =>\r\n            isSuiObjectRef(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.Pay.recipients) &&\r\n        obj.Pay.recipients.every((e: any) =>\r\n            isTransactionDigest(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.Pay.amounts) &&\r\n        obj.Pay.amounts.every((e: any) =>\r\n            isSuiMoveTypeParameterIndex(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isPaySuiTx(obj: any, _argumentName?: string): obj is PaySuiTx {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        (obj.PaySui !== null &&\r\n            typeof obj.PaySui === \"object\" ||\r\n            typeof obj.PaySui === \"function\") &&\r\n        Array.isArray(obj.PaySui.coins) &&\r\n        obj.PaySui.coins.every((e: any) =>\r\n            isSuiObjectRef(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.PaySui.recipients) &&\r\n        obj.PaySui.recipients.every((e: any) =>\r\n            isTransactionDigest(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.PaySui.amounts) &&\r\n        obj.PaySui.amounts.every((e: any) =>\r\n            isSuiMoveTypeParameterIndex(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isPayAllSuiTx(obj: any, _argumentName?: string): obj is PayAllSuiTx {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        (obj.PayAllSui !== null &&\r\n            typeof obj.PayAllSui === \"object\" ||\r\n            typeof obj.PayAllSui === \"function\") &&\r\n        Array.isArray(obj.PayAllSui.coins) &&\r\n        obj.PayAllSui.coins.every((e: any) =>\r\n            isSuiObjectRef(e) as boolean\r\n        ) &&\r\n        isTransactionDigest(obj.PayAllSui.recipient) as boolean\r\n    )\r\n}\r\n\r\nexport function isPublishTx(obj: any, _argumentName?: string): obj is PublishTx {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        (obj.Publish !== null &&\r\n            typeof obj.Publish === \"object\" ||\r\n            typeof obj.Publish === \"function\") &&\r\n        (obj.Publish.modules !== null &&\r\n            typeof obj.Publish.modules === \"object\" ||\r\n            typeof obj.Publish.modules === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.Publish.modules.length) as boolean\r\n    )\r\n}\r\n\r\nexport function isSharedObjectRef(obj: any, _argumentName?: string): obj is SharedObjectRef {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.objectId) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.initialSharedVersion) as boolean\r\n    )\r\n}\r\n\r\nexport function isObjectArg(obj: any, _argumentName?: string): obj is ObjectArg {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            isSuiObjectRef(obj.ImmOrOwned) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isSharedObjectRef(obj.Shared) as boolean)\r\n    )\r\n}\r\n\r\nexport function isCallArg(obj: any, _argumentName?: string): obj is CallArg {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            (obj.Pure !== null &&\r\n                typeof obj.Pure === \"object\" ||\r\n                typeof obj.Pure === \"function\") &&\r\n            isSuiMoveTypeParameterIndex(obj.Pure.length) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isObjectArg(obj.Object) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            (obj.ObjVec !== null &&\r\n                typeof obj.ObjVec === \"object\" ||\r\n                typeof obj.ObjVec === \"function\") &&\r\n            isSuiMoveTypeParameterIndex(obj.ObjVec.length) as boolean)\r\n    )\r\n}\r\n\r\nexport function isStructTag(obj: any, _argumentName?: string): obj is StructTag {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.address) as boolean &&\r\n        isTransactionDigest(obj.module) as boolean &&\r\n        isTransactionDigest(obj.name) as boolean &&\r\n        Array.isArray(obj.typeParams) &&\r\n        obj.typeParams.every((e: any) =>\r\n            isTypeTag(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isTypeTag(obj: any, _argumentName?: string): obj is TypeTag {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            obj.bool === null ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            obj.u8 === null ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            obj.u64 === null ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            obj.u128 === null ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            obj.address === null ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            obj.signer === null ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isTypeTag(obj.vector) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            isStructTag(obj.struct) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            obj.u16 === null ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            obj.u32 === null ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            obj.u256 === null)\r\n    )\r\n}\r\n\r\nexport function isMoveCallTx(obj: any, _argumentName?: string): obj is MoveCallTx {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        (obj.Call !== null &&\r\n            typeof obj.Call === \"object\" ||\r\n            typeof obj.Call === \"function\") &&\r\n        isSuiObjectRef(obj.Call.package) as boolean &&\r\n        isTransactionDigest(obj.Call.module) as boolean &&\r\n        isTransactionDigest(obj.Call.function) as boolean &&\r\n        Array.isArray(obj.Call.typeArguments) &&\r\n        obj.Call.typeArguments.every((e: any) =>\r\n            isTypeTag(e) as boolean\r\n        ) &&\r\n        Array.isArray(obj.Call.arguments) &&\r\n        obj.Call.arguments.every((e: any) =>\r\n            isCallArg(e) as boolean\r\n        )\r\n    )\r\n}\r\n\r\nexport function isTransaction(obj: any, _argumentName?: string): obj is Transaction {\r\n    return (\r\n        (isTransferObjectTx(obj) as boolean ||\r\n            isTransferSuiTx(obj) as boolean ||\r\n            isPayTx(obj) as boolean ||\r\n            isPaySuiTx(obj) as boolean ||\r\n            isPayAllSuiTx(obj) as boolean ||\r\n            isPublishTx(obj) as boolean ||\r\n            isMoveCallTx(obj) as boolean)\r\n    )\r\n}\r\n\r\nexport function isTransactionKind(obj: any, _argumentName?: string): obj is TransactionKind {\r\n    return (\r\n        ((obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n            isTransaction(obj.Single) as boolean ||\r\n            (obj !== null &&\r\n                typeof obj === \"object\" ||\r\n                typeof obj === \"function\") &&\r\n            Array.isArray(obj.Batch) &&\r\n            obj.Batch.every((e: any) =>\r\n                isTransaction(e) as boolean\r\n            ))\r\n    )\r\n}\r\n\r\nexport function isTransactionData(obj: any, _argumentName?: string): obj is TransactionData {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isTransactionDigest(obj.sender) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.gasBudget) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.gasPrice) as boolean &&\r\n        isTransactionKind(obj.kind) as boolean &&\r\n        isSuiObjectRef(obj.gasPayment) as boolean\r\n    )\r\n}\r\n\r\nexport function isRpcApiVersion(obj: any, _argumentName?: string): obj is RpcApiVersion {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.major) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.minor) as boolean &&\r\n        isSuiMoveTypeParameterIndex(obj.patch) as boolean\r\n    )\r\n}\r\n\r\nexport function isFaucetCoinInfo(obj: any, _argumentName?: string): obj is FaucetCoinInfo {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isSuiMoveTypeParameterIndex(obj.amount) as boolean &&\r\n        isTransactionDigest(obj.id) as boolean &&\r\n        isTransactionDigest(obj.transfer_tx_digest) as boolean\r\n    )\r\n}\r\n\r\nexport function isFaucetResponse(obj: any, _argumentName?: string): obj is FaucetResponse {\r\n    return (\r\n        (obj !== null &&\r\n            typeof obj === \"object\" ||\r\n            typeof obj === \"function\") &&\r\n        isFaucetCoinInfo(obj.transferred_gas_objects) as boolean &&\r\n        isTransactionDigest(obj.error) as boolean\r\n    )\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { Base64DataBuffer } from '../serialization/base64';\r\nimport { ObjectId } from './objects';\r\n\r\n/** Base64 string representing the object digest */\r\nexport type TransactionDigest = string;\r\nexport type SuiAddress = string;\r\nexport type ObjectOwner =\r\n  | { AddressOwner: SuiAddress }\r\n  | { ObjectOwner: SuiAddress }\r\n  | { Shared: { initial_shared_version: number } }\r\n  | 'Immutable';\r\n\r\n// source of truth is\r\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L171\r\nconst TX_DIGEST_LENGTH = 32;\r\n// taken from https://rgxdb.com/r/1NUN74O6\r\nconst VALID_BASE64_REGEX =\r\n  /^(?:[a-zA-Z0-9+\\/]{4})*(?:|(?:[a-zA-Z0-9+\\/]{3}=)|(?:[a-zA-Z0-9+\\/]{2}==)|(?:[a-zA-Z0-9+\\/]{1}===))$/;\r\n\r\nexport function isValidTransactionDigest(\r\n  value: string\r\n): value is TransactionDigest {\r\n  return (\r\n    new Base64DataBuffer(value).getLength() === TX_DIGEST_LENGTH &&\r\n    VALID_BASE64_REGEX.test(value)\r\n  );\r\n}\r\n\r\n// TODO - can we automatically sync this with rust length definition?\r\n// Source of truth is\r\n// https://github.com/MystenLabs/sui/blob/acb2b97ae21f47600e05b0d28127d88d0725561d/crates/sui-types/src/base_types.rs#L67\r\n// which uses the Move account address length\r\n// https://github.com/move-language/move/blob/67ec40dc50c66c34fd73512fcc412f3b68d67235/language/move-core/types/src/account_address.rs#L23 .\r\n\r\nexport const SUI_ADDRESS_LENGTH = 20;\r\nexport function isValidSuiAddress(value: string): value is SuiAddress {\r\n  return isHex(value) && getHexByteLength(value) === SUI_ADDRESS_LENGTH;\r\n}\r\n\r\nexport function isValidSuiObjectId(value: string): boolean {\r\n  return isValidSuiAddress(value);\r\n}\r\n\r\n/**\r\n * Perform the following operations:\r\n * 1. Make the address lower case\r\n * 2. Prepend `0x` if the string does not start with `0x`.\r\n * 3. Add more zeros if the length of the address(excluding `0x`) is less than `SUI_ADDRESS_LENGTH`\r\n *\r\n * WARNING: if the address value itself starts with `0x`, e.g., `0x0x`, the default behavior\r\n * is to treat the first `0x` not as part of the address. The default behavior can be overridden by\r\n * setting `forceAdd0x` to true\r\n *\r\n */\r\nexport function normalizeSuiAddress(\r\n  value: string,\r\n  forceAdd0x: boolean = false\r\n): SuiAddress {\r\n  let address = value.toLowerCase();\r\n  if (!forceAdd0x && address.startsWith('0x')) {\r\n    address = address.slice(2);\r\n  }\r\n  return `0x${address.padStart(SUI_ADDRESS_LENGTH * 2, '0')}`;\r\n}\r\n\r\nexport function normalizeSuiObjectId(\r\n  value: string,\r\n  forceAdd0x: boolean = false\r\n): ObjectId {\r\n  return normalizeSuiAddress(value, forceAdd0x);\r\n}\r\n\r\nfunction isHex(value: string): boolean {\r\n  return /^(0x|0X)?[a-fA-F0-9]+$/.test(value) && value.length % 2 === 0;\r\n}\r\n\r\nfunction getHexByteLength(value: string): number {\r\n  return /^(0x|0X)/.test(value) ? (value.length - 2) / 2 : value.length / 2;\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { ObjectOwner } from './common';\r\nimport { TransactionDigest } from './common';\r\n\r\nexport type SuiObjectRef = {\r\n  /** Base64 string representing the object digest */\r\n  digest: TransactionDigest;\r\n  /** Hex code as string representing the object id */\r\n  objectId: string;\r\n  /** Object version */\r\n  version: number;\r\n};\r\n\r\nexport type SuiObjectInfo = SuiObjectRef & {\r\n  type: string;\r\n  owner: ObjectOwner;\r\n  previousTransaction: TransactionDigest;\r\n};\r\n\r\nexport type ObjectContentFields = Record<string, any>;\r\n\r\nexport type MovePackageContent = Record<string, string>;\r\n\r\nexport type SuiData = { dataType: ObjectType } & (\r\n  | SuiMoveObject\r\n  | SuiMovePackage\r\n);\r\n\r\nexport type SuiMoveObject = {\r\n  /** Move type (e.g., \"0x2::coin::Coin<0x2::sui::SUI>\") */\r\n  type: string;\r\n  /** Fields and values stored inside the Move object */\r\n  fields: ObjectContentFields;\r\n  has_public_transfer?: boolean;\r\n};\r\n\r\nexport const MIST_PER_SUI: BigInt = BigInt(1000000000);\r\n\r\nexport type CoinDenominationInfoResponse = {\r\n  /** Coin type like \"0x2::sui::SUI\" */\r\n  coinType: string;\r\n  /** min unit, like MIST */\r\n  basicUnit?: string;\r\n  /** number of zeros in the denomination,\r\n   * e.g., 9 here for SUI. */\r\n  decimalNumber: number;\r\n};\r\n\r\nexport type SuiMovePackage = {\r\n  /** A mapping from module name to disassembled Move bytecode */\r\n  disassembled: MovePackageContent;\r\n};\r\n\r\nexport type SuiMoveFunctionArgTypesResponse = SuiMoveFunctionArgType[];\r\n\r\nexport type SuiMoveFunctionArgType = string | { Object: string };\r\n\r\nexport type SuiMoveFunctionArgTypes = SuiMoveFunctionArgType[];\r\n\r\nexport type SuiMoveNormalizedModules = Record<string, SuiMoveNormalizedModule>;\r\n\r\nexport type SuiMoveNormalizedModule = {\r\n  file_format_version: number;\r\n  address: string;\r\n  name: string;\r\n  friends: SuiMoveModuleId[];\r\n  structs: Record<string, SuiMoveNormalizedStruct>;\r\n  exposed_functions: Record<string, SuiMoveNormalizedFunction>;\r\n};\r\n\r\nexport type SuiMoveModuleId = {\r\n  address: string;\r\n  name: string;\r\n};\r\n\r\nexport type SuiMoveNormalizedStruct = {\r\n  abilities: SuiMoveAbilitySet;\r\n  type_parameters: SuiMoveStructTypeParameter[];\r\n  fields: SuiMoveNormalizedField[];\r\n};\r\n\r\nexport type SuiMoveStructTypeParameter = {\r\n  constraints: SuiMoveAbilitySet;\r\n  is_phantom: boolean;\r\n};\r\n\r\nexport type SuiMoveNormalizedField = {\r\n  name: string;\r\n  type_: SuiMoveNormalizedType;\r\n};\r\n\r\nexport type SuiMoveNormalizedFunction = {\r\n  visibility: SuiMoveVisibility;\r\n  is_entry: boolean;\r\n  type_parameters: SuiMoveAbilitySet[];\r\n  parameters: SuiMoveNormalizedType[];\r\n  return_: SuiMoveNormalizedType[];\r\n};\r\n\r\nexport type SuiMoveVisibility = 'Private' | 'Public' | 'Friend';\r\n\r\nexport type SuiMoveTypeParameterIndex = number;\r\n\r\nexport type SuiMoveAbilitySet = {\r\n  abilities: string[];\r\n};\r\n\r\nexport type SuiMoveNormalizedType =\r\n  | string\r\n  | SuiMoveNormalizedTypeParameterType\r\n  | { Reference: SuiMoveNormalizedType }\r\n  | { MutableReference: SuiMoveNormalizedType }\r\n  | { Vector: SuiMoveNormalizedType }\r\n  | SuiMoveNormalizedStructType;\r\n\r\nexport type SuiMoveNormalizedTypeParameterType = {\r\n  TypeParameter: SuiMoveTypeParameterIndex;\r\n};\r\n\r\nexport type SuiMoveNormalizedStructType = {\r\n  Struct: {\r\n    address: string;\r\n    module: string;\r\n    name: string;\r\n    type_arguments: SuiMoveNormalizedType[];\r\n  };\r\n};\r\n\r\nexport type SuiObject = {\r\n  /** The meat of the object */\r\n  data: SuiData;\r\n  /** The owner of the object */\r\n  owner: ObjectOwner;\r\n  /** The digest of the transaction that created or last mutated this object */\r\n  previousTransaction: TransactionDigest;\r\n  /**\r\n   * The amount of SUI we would rebate if this object gets deleted.\r\n   * This number is re-calculated each time the object is mutated based on\r\n   * the present storage gas price.\r\n   */\r\n  storageRebate: number;\r\n  reference: SuiObjectRef;\r\n};\r\n\r\nexport type ObjectStatus = 'Exists' | 'NotExists' | 'Deleted';\r\nexport type ObjectType = 'moveObject' | 'package';\r\n\r\nexport type GetOwnedObjectsResponse = SuiObjectInfo[];\r\n\r\nexport type GetObjectDataResponse = {\r\n  status: ObjectStatus;\r\n  details: SuiObject | ObjectId | SuiObjectRef;\r\n};\r\n\r\nexport type ObjectDigest = string;\r\nexport type ObjectId = string;\r\nexport type SequenceNumber = number;\r\nexport type Order = 'ascending' | 'descending';\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                              Helper functions                              */\r\n/* -------------------------------------------------------------------------- */\r\n\r\n/* -------------------------- GetObjectDataResponse ------------------------- */\r\n\r\nexport function getObjectExistsResponse(\r\n  resp: GetObjectDataResponse\r\n): SuiObject | undefined {\r\n  return resp.status !== 'Exists' ? undefined : (resp.details as SuiObject);\r\n}\r\n\r\nexport function getObjectDeletedResponse(\r\n  resp: GetObjectDataResponse\r\n): SuiObjectRef | undefined {\r\n  return resp.status !== 'Deleted' ? undefined : (resp.details as SuiObjectRef);\r\n}\r\n\r\nexport function getObjectNotExistsResponse(\r\n  resp: GetObjectDataResponse\r\n): ObjectId | undefined {\r\n  return resp.status !== 'NotExists' ? undefined : (resp.details as ObjectId);\r\n}\r\n\r\nexport function getObjectReference(\r\n  resp: GetObjectDataResponse\r\n): SuiObjectRef | undefined {\r\n  return (\r\n    getObjectExistsResponse(resp)?.reference || getObjectDeletedResponse(resp)\r\n  );\r\n}\r\n\r\n/* ------------------------------ SuiObjectRef ------------------------------ */\r\n\r\nexport function getObjectId(\r\n  data: GetObjectDataResponse | SuiObjectRef\r\n): ObjectId {\r\n  if ('objectId' in data) {\r\n    return data.objectId;\r\n  }\r\n  return (\r\n    getObjectReference(data)?.objectId ?? getObjectNotExistsResponse(data)!\r\n  );\r\n}\r\n\r\nexport function getObjectVersion(\r\n  data: GetObjectDataResponse | SuiObjectRef\r\n): number | undefined {\r\n  if ('version' in data) {\r\n    return data.version;\r\n  }\r\n  return getObjectReference(data)?.version;\r\n}\r\n\r\n/* -------------------------------- SuiObject ------------------------------- */\r\n\r\nexport function getObjectType(\r\n  resp: GetObjectDataResponse\r\n): ObjectType | undefined {\r\n  return getObjectExistsResponse(resp)?.data.dataType;\r\n}\r\n\r\nexport function getObjectPreviousTransactionDigest(\r\n  resp: GetObjectDataResponse\r\n): TransactionDigest | undefined {\r\n  return getObjectExistsResponse(resp)?.previousTransaction;\r\n}\r\n\r\nexport function getObjectOwner(\r\n  resp: GetObjectDataResponse\r\n): ObjectOwner | undefined {\r\n  return getObjectExistsResponse(resp)?.owner;\r\n}\r\n\r\nexport function getSharedObjectInitialVersion(\r\n  resp: GetObjectDataResponse\r\n): number | undefined {\r\n  const owner = getObjectOwner(resp);\r\n  if (typeof owner === 'object' && 'Shared' in owner) {\r\n    return owner.Shared.initial_shared_version;\r\n  } else {\r\n    return undefined;\r\n  }\r\n}\r\n\r\nexport function isSharedObject(resp: GetObjectDataResponse): boolean {\r\n  const owner = getObjectOwner(resp);\r\n  return (typeof owner === 'object' && 'Shared' in owner);\r\n}\r\n\r\nexport function isImmutableObject(resp: GetObjectDataResponse): boolean {\r\n  const owner = getObjectOwner(resp);\r\n  return owner === 'Immutable';\r\n}\r\n\r\nexport function getMoveObjectType(\r\n  resp: GetObjectDataResponse\r\n): string | undefined {\r\n  return getMoveObject(resp)?.type;\r\n}\r\n\r\nexport function getObjectFields(\r\n  resp: GetObjectDataResponse | SuiMoveObject\r\n): ObjectContentFields | undefined {\r\n  if ('fields' in resp) {\r\n    return resp.fields;\r\n  }\r\n  return getMoveObject(resp)?.fields;\r\n}\r\n\r\nexport function getMoveObject(\r\n  data: GetObjectDataResponse | SuiObject\r\n): SuiMoveObject | undefined {\r\n  const suiObject = 'data' in data ? data : getObjectExistsResponse(data);\r\n  if (suiObject?.data.dataType !== 'moveObject') {\r\n    return undefined;\r\n  }\r\n  return suiObject.data as SuiMoveObject;\r\n}\r\n\r\nexport function hasPublicTransfer(\r\n  data: GetObjectDataResponse | SuiObject\r\n): boolean {\r\n  return getMoveObject(data)?.has_public_transfer ?? false;\r\n}\r\n\r\nexport function getMovePackageContent(\r\n  data: GetObjectDataResponse | SuiMovePackage\r\n): MovePackageContent | undefined {\r\n  if ('disassembled' in data) {\r\n    return data.disassembled;\r\n  }\r\n  const suiObject = getObjectExistsResponse(data);\r\n  if (suiObject?.data.dataType !== 'package') {\r\n    return undefined;\r\n  }\r\n  return (suiObject.data as SuiMovePackage).disassembled;\r\n}\r\n\r\nexport function extractMutableReference(\r\n  normalizedType: SuiMoveNormalizedType\r\n): SuiMoveNormalizedType | undefined {\r\n  return typeof normalizedType === 'object' &&\r\n    'MutableReference' in normalizedType\r\n    ? normalizedType.MutableReference\r\n    : undefined;\r\n}\r\n\r\nexport function extractReference(\r\n  normalizedType: SuiMoveNormalizedType\r\n): SuiMoveNormalizedType | undefined {\r\n  return typeof normalizedType === 'object' && 'Reference' in normalizedType\r\n    ? normalizedType.Reference\r\n    : undefined;\r\n}\r\n\r\nexport function extractStructTag(\r\n  normalizedType: SuiMoveNormalizedType\r\n): SuiMoveNormalizedStructType | undefined {\r\n  if (typeof normalizedType === 'object' && 'Struct' in normalizedType) {\r\n    return normalizedType;\r\n  }\r\n\r\n  const ref = extractReference(normalizedType);\r\n  const mutRef = extractMutableReference(normalizedType);\r\n\r\n  if (typeof ref === 'object' && 'Struct' in ref) {\r\n    return ref;\r\n  }\r\n\r\n  if (typeof mutRef === 'object' && 'Struct' in mutRef) {\r\n    return mutRef;\r\n  }\r\n  return undefined;\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { ObjectOwner, SuiAddress, TransactionDigest } from './common';\r\nimport { isTransactionEffects } from './index.guard';\r\nimport { ObjectId, SuiMovePackage, SuiObject, SuiObjectRef } from './objects';\r\n\r\nexport type TransferObject = {\r\n  recipient: SuiAddress;\r\n  objectRef: SuiObjectRef;\r\n};\r\n\r\nexport type SuiTransferSui = {\r\n  recipient: SuiAddress;\r\n  amount: number | null;\r\n};\r\n\r\nexport type SuiChangeEpoch = {\r\n  epoch: EpochId;\r\n  storage_charge: number;\r\n  computation_charge: number;\r\n};\r\n\r\nexport type Pay = {\r\n  coins: SuiObjectRef[];\r\n  recipients: SuiAddress[];\r\n  amounts: number[];\r\n};\r\n\r\nexport type PaySui = {\r\n  coins: SuiObjectRef[];\r\n  recipients: SuiAddress[];\r\n  amounts: number[];\r\n};\r\n\r\nexport type PayAllSui = {\r\n  coins: SuiObjectRef[];\r\n  recipient: SuiAddress;\r\n};\r\n\r\nexport type ExecuteTransactionRequestType =\r\n  | 'ImmediateReturn'\r\n  | 'WaitForTxCert'\r\n  | 'WaitForEffectsCert'\r\n  | 'WaitForLocalExecution';\r\n\r\nexport type TransactionKindName =\r\n  | 'TransferObject'\r\n  | 'Publish'\r\n  | 'Call'\r\n  | 'TransferSui'\r\n  | 'ChangeEpoch'\r\n  | 'Pay'\r\n  | 'PaySui'\r\n  | 'PayAllSui';\r\n\r\nexport type SuiTransactionKind =\r\n  | { TransferObject: TransferObject }\r\n  | { Publish: SuiMovePackage }\r\n  | { Call: MoveCall }\r\n  | { TransferSui: SuiTransferSui }\r\n  | { ChangeEpoch: SuiChangeEpoch }\r\n  | { Pay: Pay }\r\n  | { PaySui: PaySui }\r\n  | { PayAllSui: PayAllSui };\r\nexport type SuiTransactionData = {\r\n  transactions: SuiTransactionKind[];\r\n  sender: SuiAddress;\r\n  gasPayment: SuiObjectRef;\r\n  gasBudget: number;\r\n};\r\n\r\n// TODO: support u64\r\nexport type EpochId = number;\r\nexport type GenericAuthoritySignature =\r\n  | AuthoritySignature[]\r\n  | AuthoritySignature;\r\n\r\nexport type AuthorityQuorumSignInfo = {\r\n  epoch: EpochId;\r\n  signature: GenericAuthoritySignature;\r\n};\r\n\r\nexport type CertifiedTransaction = {\r\n  transactionDigest: TransactionDigest;\r\n  data: SuiTransactionData;\r\n  txSignature: string;\r\n  authSignInfo: AuthorityQuorumSignInfo;\r\n};\r\n\r\nexport type GasCostSummary = {\r\n  computationCost: number;\r\n  storageCost: number;\r\n  storageRebate: number;\r\n};\r\n\r\nexport type ExecutionStatusType = 'success' | 'failure';\r\nexport type ExecutionStatus = {\r\n  status: ExecutionStatusType;\r\n  error?: string;\r\n};\r\n\r\n// TODO: change the tuple to struct from the server end\r\nexport type OwnedObjectRef = {\r\n  owner: ObjectOwner;\r\n  reference: SuiObjectRef;\r\n};\r\n\r\nexport type TransactionEffects = {\r\n  /** The status of the execution */\r\n  status: ExecutionStatus;\r\n  gasUsed: GasCostSummary;\r\n  /** The object references of the shared objects used in this transaction. Empty if no shared objects were used. */\r\n  sharedObjects?: SuiObjectRef[];\r\n  /** The transaction digest */\r\n  transactionDigest: TransactionDigest;\r\n  /** ObjectRef and owner of new objects created */\r\n  created?: OwnedObjectRef[];\r\n  /** ObjectRef and owner of mutated objects, including gas object */\r\n  mutated?: OwnedObjectRef[];\r\n  /**\r\n   * ObjectRef and owner of objects that are unwrapped in this transaction.\r\n   * Unwrapped objects are objects that were wrapped into other objects in the past,\r\n   * and just got extracted out.\r\n   */\r\n  unwrapped?: OwnedObjectRef[];\r\n  /** Object Refs of objects now deleted (the old refs) */\r\n  deleted?: SuiObjectRef[];\r\n  /** Object refs of objects now wrapped in other objects */\r\n  wrapped?: SuiObjectRef[];\r\n  /**\r\n   * The updated gas object reference. Have a dedicated field for convenient access.\r\n   * It's also included in mutated.\r\n   */\r\n  gasObject: OwnedObjectRef;\r\n  /** The events emitted during execution. Note that only successful transactions emit events */\r\n  // TODO: properly define type when this is being used\r\n  events?: any[];\r\n  /** The set of transaction digests this transaction depends on */\r\n  dependencies?: TransactionDigest[];\r\n};\r\n\r\nexport type SuiTransactionResponse = {\r\n  certificate: CertifiedTransaction;\r\n  effects: TransactionEffects;\r\n  timestamp_ms: number | null;\r\n  parsed_data: SuiParsedTransactionResponse | null;\r\n};\r\n\r\n// TODO: this is likely to go away after https://github.com/MystenLabs/sui/issues/4207\r\nexport type SuiCertifiedTransactionEffects = {\r\n  effects: TransactionEffects;\r\n};\r\n\r\nexport type SuiExecuteTransactionResponse =\r\n  | {\r\n      ImmediateReturn: {\r\n        tx_digest: string;\r\n      };\r\n    }\r\n  | { TxCert: { certificate: CertifiedTransaction } }\r\n  | {\r\n      EffectsCert: {\r\n        certificate: CertifiedTransaction;\r\n        effects: SuiCertifiedTransactionEffects;\r\n      };\r\n    };\r\n\r\nexport type GatewayTxSeqNumber = number;\r\n\r\nexport type GetTxnDigestsResponse = TransactionDigest[];\r\n\r\nexport type PaginatedTransactionDigests = {\r\n  data: TransactionDigest[];\r\n  nextCursor: TransactionDigest | null;\r\n};\r\n\r\nexport type TransactionQuery =\r\n  | 'All'\r\n  | {\r\n      MoveFunction: {\r\n        package: ObjectId;\r\n        module: string | null;\r\n        function: string | null;\r\n      };\r\n    }\r\n  | { InputObject: ObjectId }\r\n  | { MutatedObject: ObjectId }\r\n  | { FromAddress: SuiAddress }\r\n  | { ToAddress: SuiAddress };\r\n\r\nexport type MoveCall = {\r\n  package: SuiObjectRef;\r\n  module: string;\r\n  function: string;\r\n  typeArguments?: string[];\r\n  arguments?: SuiJsonValue[];\r\n};\r\n\r\nexport type SuiJsonValue = boolean | number | string | Array<SuiJsonValue>;\r\n\r\nexport type EmptySignInfo = object;\r\nexport type AuthorityName = string;\r\nexport type AuthoritySignature = string;\r\n\r\nexport type TransactionBytes = {\r\n  txBytes: string;\r\n  gas: SuiObjectRef;\r\n  // TODO: Add input_objects field\r\n};\r\n\r\nexport type SuiParsedMergeCoinResponse = {\r\n  updatedCoin: SuiObject;\r\n  updatedGas: SuiObject;\r\n};\r\n\r\nexport type SuiParsedSplitCoinResponse = {\r\n  updatedCoin: SuiObject;\r\n  newCoins: SuiObject[];\r\n  updatedGas: SuiObject;\r\n};\r\n\r\nexport type SuiParsedPublishResponse = {\r\n  createdObjects: SuiObject[];\r\n  package: SuiPackage;\r\n  updatedGas: SuiObject;\r\n};\r\n\r\nexport type SuiPackage = {\r\n  digest: string;\r\n  objectId: string;\r\n  version: number;\r\n};\r\n\r\nexport type SuiParsedTransactionResponse =\r\n  | {\r\n      SplitCoin: SuiParsedSplitCoinResponse;\r\n    }\r\n  | {\r\n      MergeCoin: SuiParsedMergeCoinResponse;\r\n    }\r\n  | {\r\n      Publish: SuiParsedPublishResponse;\r\n    };\r\n\r\n/* -------------------------------------------------------------------------- */\r\n/*                              Helper functions                              */\r\n/* -------------------------------------------------------------------------- */\r\n\r\n/* ---------------------------------- CertifiedTransaction --------------------------------- */\r\n\r\nexport function getCertifiedTransaction(\r\n  tx: SuiTransactionResponse | SuiExecuteTransactionResponse\r\n): CertifiedTransaction | undefined {\r\n  if ('certificate' in tx) {\r\n    return tx.certificate;\r\n  } else if ('TxCert' in tx) {\r\n    return tx.TxCert.certificate;\r\n  } else if ('EffectsCert' in tx) {\r\n    return tx.EffectsCert.certificate;\r\n  }\r\n  return undefined;\r\n}\r\n\r\nexport function getTransactionDigest(\r\n  tx:\r\n    | CertifiedTransaction\r\n    | SuiTransactionResponse\r\n    | SuiExecuteTransactionResponse\r\n): TransactionDigest {\r\n  if ('ImmediateReturn' in tx) {\r\n    return tx.ImmediateReturn.tx_digest;\r\n  }\r\n  if ('transactionDigest' in tx) {\r\n    return tx.transactionDigest;\r\n  }\r\n  const ctxn = getCertifiedTransaction(tx)!;\r\n  return ctxn.transactionDigest;\r\n}\r\n\r\nexport function getTransactionSignature(tx: CertifiedTransaction): string {\r\n  return tx.txSignature;\r\n}\r\n\r\nexport function getTransactionAuthorityQuorumSignInfo(\r\n  tx: CertifiedTransaction\r\n): AuthorityQuorumSignInfo {\r\n  return tx.authSignInfo;\r\n}\r\n\r\nexport function getTransactionData(\r\n  tx: CertifiedTransaction\r\n): SuiTransactionData {\r\n  return tx.data;\r\n}\r\n\r\n/* ----------------------------- TransactionData ---------------------------- */\r\n\r\nexport function getTransactionSender(tx: CertifiedTransaction): SuiAddress {\r\n  return tx.data.sender;\r\n}\r\n\r\nexport function getTransactionGasObject(\r\n  tx: CertifiedTransaction\r\n): SuiObjectRef {\r\n  return tx.data.gasPayment;\r\n}\r\n\r\nexport function getTransactionGasBudget(tx: CertifiedTransaction): number {\r\n  return tx.data.gasBudget;\r\n}\r\n\r\nexport function getTransferObjectTransaction(\r\n  data: SuiTransactionKind\r\n): TransferObject | undefined {\r\n  return 'TransferObject' in data ? data.TransferObject : undefined;\r\n}\r\n\r\nexport function getPublishTransaction(\r\n  data: SuiTransactionKind\r\n): SuiMovePackage | undefined {\r\n  return 'Publish' in data ? data.Publish : undefined;\r\n}\r\n\r\nexport function getMoveCallTransaction(\r\n  data: SuiTransactionKind\r\n): MoveCall | undefined {\r\n  return 'Call' in data ? data.Call : undefined;\r\n}\r\n\r\nexport function getTransferSuiTransaction(\r\n  data: SuiTransactionKind\r\n): SuiTransferSui | undefined {\r\n  return 'TransferSui' in data ? data.TransferSui : undefined;\r\n}\r\n\r\nexport function getPayTransaction(data: SuiTransactionKind): Pay | undefined {\r\n  return 'Pay' in data ? data.Pay : undefined;\r\n}\r\n\r\nexport function getPaySuiTransaction(\r\n  data: SuiTransactionKind\r\n): PaySui | undefined {\r\n  return 'PaySui' in data ? data.PaySui : undefined;\r\n}\r\n\r\nexport function getPayAllSuiTransaction(\r\n  data: SuiTransactionKind\r\n): PayAllSui | undefined {\r\n  return 'PayAllSui' in data ? data.PayAllSui : undefined;\r\n}\r\n\r\nexport function getChangeEpochTransaction(\r\n  data: SuiTransactionKind\r\n): SuiChangeEpoch | undefined {\r\n  return 'ChangeEpoch' in data ? data.ChangeEpoch : undefined;\r\n}\r\n\r\nexport function getTransactions(\r\n  data: CertifiedTransaction\r\n): SuiTransactionKind[] {\r\n  return data.data.transactions;\r\n}\r\n\r\nexport function getTransferSuiAmount(data: SuiTransactionKind): bigint | null {\r\n  return 'TransferSui' in data && data.TransferSui.amount\r\n    ? BigInt(data.TransferSui.amount)\r\n    : null;\r\n}\r\n\r\nexport function getTransactionKindName(\r\n  data: SuiTransactionKind\r\n): TransactionKindName {\r\n  return Object.keys(data)[0] as TransactionKindName;\r\n}\r\n\r\n/* ----------------------------- ExecutionStatus ---------------------------- */\r\n\r\nexport function getExecutionStatusType(\r\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse\r\n): ExecutionStatusType | undefined {\r\n  return getExecutionStatus(data)?.status;\r\n}\r\n\r\nexport function getExecutionStatus(\r\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse\r\n): ExecutionStatus | undefined {\r\n  return getTransactionEffects(data)?.status;\r\n}\r\n\r\nexport function getExecutionStatusError(\r\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse\r\n): string | undefined {\r\n  return getExecutionStatus(data)?.error;\r\n}\r\n\r\nexport function getExecutionStatusGasSummary(\r\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse | TransactionEffects\r\n): GasCostSummary | undefined {\r\n  if (isTransactionEffects(data)) {\r\n    return data.gasUsed;\r\n  }\r\n  return getTransactionEffects(data)?.gasUsed;\r\n}\r\n\r\nexport function getTotalGasUsed(\r\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse | TransactionEffects\r\n): number | undefined {\r\n  const gasSummary = getExecutionStatusGasSummary(data);\r\n  return gasSummary\r\n    ? gasSummary.computationCost +\r\n        gasSummary.storageCost -\r\n        gasSummary.storageRebate\r\n    : undefined;\r\n}\r\n\r\nexport function getTransactionEffects(\r\n  data: SuiExecuteTransactionResponse | SuiTransactionResponse\r\n): TransactionEffects | undefined {\r\n  if ('effects' in data) {\r\n    return data.effects;\r\n  }\r\n  return 'EffectsCert' in data ? data.EffectsCert.effects.effects : undefined;\r\n}\r\n\r\n/* ---------------------------- Transaction Effects --------------------------- */\r\n\r\nexport function getEvents(\r\n  data: SuiExecuteTransactionResponse | SuiTransactionResponse\r\n): any {\r\n  return getTransactionEffects(data)?.events;\r\n}\r\n\r\nexport function getCreatedObjects(\r\n  data: SuiExecuteTransactionResponse | SuiTransactionResponse\r\n): OwnedObjectRef[] | undefined {\r\n  return getTransactionEffects(data)?.created;\r\n}\r\n\r\n/* --------------------------- TransactionResponse -------------------------- */\r\n\r\nexport function getTimestampFromTransactionResponse(\r\n  data: SuiExecuteTransactionResponse | SuiTransactionResponse\r\n): number | undefined {\r\n  return 'timestamp_ms' in data ? data.timestamp_ms ?? undefined : undefined;\r\n}\r\n\r\nexport function getParsedSplitCoinResponse(\r\n  data: SuiTransactionResponse\r\n): SuiParsedSplitCoinResponse | undefined {\r\n  const parsed = data.parsed_data;\r\n  return parsed && 'SplitCoin' in parsed ? parsed.SplitCoin : undefined;\r\n}\r\n\r\nexport function getParsedMergeCoinResponse(\r\n  data: SuiTransactionResponse\r\n): SuiParsedMergeCoinResponse | undefined {\r\n  const parsed = data.parsed_data;\r\n  return parsed && 'MergeCoin' in parsed ? parsed.MergeCoin : undefined;\r\n}\r\n\r\nexport function getParsedPublishResponse(\r\n  data: SuiTransactionResponse\r\n): SuiParsedPublishResponse | undefined {\r\n  const parsed = data.parsed_data;\r\n  return parsed && 'Publish' in parsed ? parsed.Publish : undefined;\r\n}\r\n\r\n/**\r\n * Get the updated coin after a merge.\r\n * @param data the response for executing a merge coin transaction\r\n * @returns the updated state of the primary coin after the merge\r\n */\r\nexport function getCoinAfterMerge(\r\n  data: SuiTransactionResponse\r\n): SuiObject | undefined {\r\n  return getParsedMergeCoinResponse(data)?.updatedCoin;\r\n}\r\n\r\n/**\r\n * Get the updated coin after a split.\r\n * @param data the response for executing a Split coin transaction\r\n * @returns the updated state of the original coin object used for the split\r\n */\r\nexport function getCoinAfterSplit(\r\n  data: SuiTransactionResponse\r\n): SuiObject | undefined {\r\n  return getParsedSplitCoinResponse(data)?.updatedCoin;\r\n}\r\n\r\n/**\r\n * Get the newly created coin after a split.\r\n * @param data the response for executing a Split coin transaction\r\n * @returns the updated state of the original coin object used for the split\r\n */\r\nexport function getNewlyCreatedCoinsAfterSplit(\r\n  data: SuiTransactionResponse\r\n): SuiObject[] | undefined {\r\n  return getParsedSplitCoinResponse(data)?.newCoins;\r\n}\r\n\r\n/**\r\n * Get the newly created coin refs after a split.\r\n */\r\nexport function getNewlyCreatedCoinRefsAfterSplit(\r\n  data: SuiTransactionResponse | SuiExecuteTransactionResponse\r\n): SuiObjectRef[] | undefined {\r\n  if ('EffectsCert' in data) {\r\n    const effects = data.EffectsCert.effects.effects;\r\n    return effects.created?.map((c) => c.reference);\r\n  }\r\n  return undefined;\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nexport type Option<T> =\r\n  | T\r\n  | {\r\n      fields: {\r\n        vec: '';\r\n      };\r\n      type: string;\r\n    };\r\n\r\nexport function getOption<T>(option: Option<T>): T | undefined {\r\n  if (\r\n    typeof option === 'object' &&\r\n    option !== null &&\r\n    'type' in option &&\r\n    option.type.startsWith('0x1::option::Option<')\r\n  ) {\r\n    return undefined;\r\n  }\r\n  return option as T;\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport {\r\n  getObjectFields,\r\n  GetObjectDataResponse,\r\n  SuiMoveObject,\r\n  SuiObjectInfo,\r\n  SuiObject,\r\n  SuiData,\r\n  getMoveObjectType,\r\n  ObjectId,\r\n  getObjectId,\r\n} from './objects';\r\nimport { normalizeSuiObjectId, SuiAddress } from './common';\r\n\r\nimport { getOption, Option } from './option';\r\nimport { StructTag } from './sui-bcs';\r\nimport { isSuiMoveObject } from './index.guard';\r\nimport { SignerWithProvider } from '../signers/signer-with-provider';\r\n\r\nexport const SUI_FRAMEWORK_ADDRESS = '0x2';\r\nexport const MOVE_STDLIB_ADDRESS = '0x1';\r\nexport const OBJECT_MODULE_NAME = 'object';\r\nexport const UID_STRUCT_NAME = 'UID';\r\nexport const ID_STRUCT_NAME = 'ID';\r\nexport const SUI_TYPE_ARG = `${SUI_FRAMEWORK_ADDRESS}::sui::SUI`;\r\n\r\nexport const COIN_TYPE = `${SUI_FRAMEWORK_ADDRESS}::coin::Coin`;\r\n\r\n// `sui::pay` module is used for Coin management (split, join, join_and_transfer etc);\r\nexport const PAY_MODULE_NAME = 'pay';\r\nexport const PAY_SPLIT_COIN_VEC_FUNC_NAME = 'split_vec';\r\nexport const PAY_JOIN_COIN_FUNC_NAME = 'join';\r\nexport const COIN_TYPE_ARG_REGEX = /^0x2::coin::Coin<(.+)>$/;\r\n\r\ntype ObjectData = ObjectDataFull | SuiObjectInfo;\r\ntype ObjectDataFull = GetObjectDataResponse | SuiMoveObject;\r\n\r\n/**\r\n * Utility class for 0x2::coin\r\n * as defined in https://github.com/MystenLabs/sui/blob/ca9046fd8b1a9e8634a4b74b0e7dabdc7ea54475/sui_programmability/framework/sources/Coin.move#L4\r\n */\r\nexport class Coin {\r\n  static isCoin(data: ObjectData): boolean {\r\n    return Coin.getType(data)?.startsWith(COIN_TYPE) ?? false;\r\n  }\r\n\r\n  static getCoinType(type: string) {\r\n    const [, res] = type.match(COIN_TYPE_ARG_REGEX) ?? [];\r\n    return res || null;\r\n  }\r\n\r\n  static getCoinTypeArg(obj: ObjectData) {\r\n    const type = Coin.getType(obj);\r\n    return type ? Coin.getCoinType(type) : null;\r\n  }\r\n\r\n  static isSUI(obj: ObjectData) {\r\n    const arg = Coin.getCoinTypeArg(obj);\r\n    return arg ? Coin.getCoinSymbol(arg) === 'SUI' : false;\r\n  }\r\n\r\n  static getCoinSymbol(coinTypeArg: string) {\r\n    return coinTypeArg.substring(coinTypeArg.lastIndexOf(':') + 1);\r\n  }\r\n\r\n  static getCoinStructTag(coinTypeArg: string): StructTag {\r\n    return {\r\n      address: normalizeSuiObjectId(coinTypeArg.split('::')[0]),\r\n      module: coinTypeArg.split('::')[1],\r\n      name: coinTypeArg.split('::')[2],\r\n      typeParams: [],\r\n    };\r\n  }\r\n\r\n  public static getID(obj: ObjectData): ObjectId {\r\n    if (isSuiMoveObject(obj)) {\r\n      return obj.fields.id.id;\r\n    }\r\n    return getObjectId(obj);\r\n  }\r\n\r\n  /**\r\n   * Convenience method for select coin objects that has a balance greater than or equal to `amount`\r\n   *\r\n   * @param amount coin balance\r\n   * @param exclude object ids of the coins to exclude\r\n   * @return a list of coin objects that has balance greater than `amount` in an ascending order\r\n   */\r\n  static selectCoinsWithBalanceGreaterThanOrEqual(\r\n    coins: ObjectDataFull[],\r\n    amount: bigint,\r\n    exclude: ObjectId[] = []\r\n  ): ObjectDataFull[] {\r\n    return Coin.sortByBalance(\r\n      coins.filter(\r\n        (c) => !exclude.includes(Coin.getID(c)) && Coin.getBalance(c)! >= amount\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Convenience method for select an arbitrary coin object that has a balance greater than or\r\n   * equal to `amount`\r\n   *\r\n   * @param amount coin balance\r\n   * @param exclude object ids of the coins to exclude\r\n   * @return an arbitray coin with balance greater than or equal to `amount\r\n   */\r\n  static selectCoinWithBalanceGreaterThanOrEqual(\r\n    coins: ObjectDataFull[],\r\n    amount: bigint,\r\n    exclude: ObjectId[] = []\r\n  ): ObjectDataFull | undefined {\r\n    return coins.find(\r\n      (c) => !exclude.includes(Coin.getID(c)) && Coin.getBalance(c)! >= amount\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Convenience method for select a minimal set of coin objects that has a balance greater than\r\n   * or equal to `amount`. The output can be used for `PayTransaction`\r\n   *\r\n   * @param amount coin balance\r\n   * @param exclude object ids of the coins to exclude\r\n   * @return a minimal list of coin objects that has a combined balance greater than or equal\r\n   * to`amount` in an ascending order. If no such set exists, an empty list is returned\r\n   */\r\n  static selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\r\n    coins: ObjectDataFull[],\r\n    amount: bigint,\r\n    exclude: ObjectId[] = []\r\n  ): ObjectDataFull[] {\r\n    const sortedCoins = Coin.sortByBalance(\r\n      coins.filter((c) => !exclude.includes(Coin.getID(c)))\r\n    );\r\n\r\n    const total = Coin.totalBalance(sortedCoins);\r\n    // return empty set if the aggregate balance of all coins is smaller than amount\r\n    if (total < amount) {\r\n      return [];\r\n    } else if (total === amount) {\r\n      return sortedCoins;\r\n    }\r\n\r\n    let sum = BigInt(0);\r\n    let ret = [];\r\n    while (sum < total) {\r\n      // prefer to add a coin with smallest sufficient balance\r\n      const target = amount - sum;\r\n      const coinWithSmallestSufficientBalance = sortedCoins.find(\r\n        (c) => Coin.getBalance(c)! >= target\r\n      );\r\n      if (coinWithSmallestSufficientBalance) {\r\n        ret.push(coinWithSmallestSufficientBalance);\r\n        break;\r\n      }\r\n\r\n      const coinWithLargestBalance = sortedCoins.pop()!;\r\n      ret.push(coinWithLargestBalance);\r\n      sum += Coin.getBalance(coinWithLargestBalance)!;\r\n    }\r\n\r\n    return Coin.sortByBalance(ret);\r\n  }\r\n\r\n  static totalBalance(coins: ObjectDataFull[]): bigint {\r\n    return coins.reduce(\r\n      (partialSum, c) => partialSum + Coin.getBalance(c)!,\r\n      BigInt(0)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Sort coin by balance in an ascending order\r\n   */\r\n  static sortByBalance(coins: ObjectDataFull[]): ObjectDataFull[] {\r\n    return coins.sort((a, b) =>\r\n      Coin.getBalance(a)! < Coin.getBalance(b)!\r\n        ? -1\r\n        : Coin.getBalance(a)! > Coin.getBalance(b)!\r\n        ? 1\r\n        : 0\r\n    );\r\n  }\r\n\r\n  static getBalance(data: ObjectDataFull): bigint | undefined {\r\n    if (!Coin.isCoin(data)) {\r\n      return undefined;\r\n    }\r\n    const balance = getObjectFields(data)?.balance;\r\n    return BigInt(balance);\r\n  }\r\n\r\n  static getZero(): bigint {\r\n    return BigInt(0);\r\n  }\r\n\r\n  private static getType(data: ObjectData): string | undefined {\r\n    if ('status' in data) {\r\n      return getMoveObjectType(data);\r\n    }\r\n    return data.type;\r\n  }\r\n\r\n  /**\r\n   * Creates and executes a transaction to transfer coins to a recipient address.\r\n   * @param signer User's signer\r\n   * @param allCoins All the coins that are owned by the user. Can be only the relevant type of coins for the transfer, Sui for gas and the coins with the same type as the type to send.\r\n   * @param coinTypeArg The coin type argument (Coin<T> the T) of the coin to send\r\n   * @param amountToSend Total amount to send to recipient\r\n   * @param recipient Recipient's address\r\n   * @param gasBudget Gas budget for the tx\r\n   * @throws in case of insufficient funds, network errors etc\r\n   */\r\n  public static async transfer(\r\n    signer: SignerWithProvider,\r\n    allCoins: SuiMoveObject[],\r\n    coinTypeArg: string,\r\n    amountToSend: bigint,\r\n    recipient: SuiAddress,\r\n    gasBudget: number\r\n  ) {\r\n    const tx = await Coin.newTransferTx(\r\n      signer,\r\n      allCoins,\r\n      coinTypeArg,\r\n      amountToSend,\r\n      recipient,\r\n      gasBudget\r\n    );\r\n    return signer.signAndExecuteTransaction(tx);\r\n  }\r\n\r\n  /**\r\n   * Create a new transaction for sending coins ready to be signed and executed.\r\n   * @param signer User's signer\r\n   * @param allCoins All the coins that are owned by the user. Can be only the relevant type of coins for the transfer, Sui for gas and the coins with the same type as the type to send.\r\n   * @param coinTypeArg The coin type argument (Coin<T> the T) of the coin to send\r\n   * @param amountToSend Total amount to send to recipient\r\n   * @param recipient Recipient's address\r\n   * @param gasBudget Gas budget for the tx\r\n   * @throws in case of insufficient funds, network errors etc\r\n   */\r\n  private static async newTransferTx(\r\n    signer: SignerWithProvider,\r\n    allCoins: SuiMoveObject[],\r\n    coinTypeArg: string,\r\n    amountToSend: bigint,\r\n    recipient: SuiAddress,\r\n    gasBudget: number\r\n  ) {\r\n    const isSuiTransfer = coinTypeArg === SUI_TYPE_ARG;\r\n    const coinsOfTransferType = allCoins.filter(\r\n      (aCoin) => Coin.getCoinTypeArg(aCoin) === coinTypeArg\r\n    );\r\n    const totalAmountIncludingGas =\r\n      amountToSend + BigInt(isSuiTransfer ? gasBudget : 0);\r\n    const inputCoinObjs =\r\n      await Coin.selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\r\n        coinsOfTransferType,\r\n        totalAmountIncludingGas\r\n      );\r\n    if (!inputCoinObjs.length) {\r\n      const totalBalanceOfTransferType = Coin.totalBalance(coinsOfTransferType);\r\n      const suggestedAmountToSend =\r\n        totalBalanceOfTransferType - BigInt(isSuiTransfer ? gasBudget : 0);\r\n      // TODO: denomination for values?\r\n      throw new Error(\r\n        `Coin balance ${totalBalanceOfTransferType} is not sufficient to cover the transfer amount ` +\r\n          `${amountToSend}. Try reducing the transfer amount to ${suggestedAmountToSend}.`\r\n      );\r\n    }\r\n    if (!isSuiTransfer) {\r\n      const allGasCoins = allCoins.filter((aCoin) => Coin.isSUI(aCoin));\r\n      const gasCoin = Coin.selectCoinWithBalanceGreaterThanOrEqual(\r\n        allGasCoins,\r\n        BigInt(gasBudget)\r\n      );\r\n      if (!gasCoin) {\r\n        // TODO: denomination for gasBudget?\r\n        throw new Error(\r\n          `Unable to find a coin to cover the gas budget ${gasBudget}`\r\n        );\r\n      }\r\n    }\r\n    const signerAddress = await signer.getAddress();\r\n    const inputCoins = inputCoinObjs.map(Coin.getID);\r\n    const txCommon = {\r\n      inputCoins,\r\n      recipients: [recipient],\r\n      // TODO: change this to string to avoid losing precision\r\n      amounts: [Number(amountToSend)],\r\n      gasBudget: Number(gasBudget),\r\n    };\r\n    if (isSuiTransfer) {\r\n      return signer.serializer.newPaySui(signerAddress, {\r\n        ...txCommon,\r\n      });\r\n    }\r\n    return signer.serializer.newPay(signerAddress, {\r\n      ...txCommon,\r\n      // we know there is a gas coin with enough balance to cover\r\n      // the gas budget let rpc select one for us\r\n    });\r\n  }\r\n}\r\n\r\nexport type DelegationData = SuiMoveObject &\r\n  Pick<SuiData, 'dataType'> & {\r\n    type: '0x2::delegation::Delegation';\r\n    fields: {\r\n      active_delegation: Option<number>;\r\n      delegate_amount: number;\r\n      next_reward_unclaimed_epoch: number;\r\n      validator_address: SuiAddress;\r\n      info: {\r\n        id: string;\r\n        version: number;\r\n      };\r\n      coin_locked_until_epoch: Option<SuiMoveObject>;\r\n      ending_epoch: Option<number>;\r\n    };\r\n  };\r\n\r\nexport type DelegationSuiObject = Omit<SuiObject, 'data'> & {\r\n  data: DelegationData;\r\n};\r\n\r\n// Class for delegation.move\r\n// see https://github.com/MystenLabs/fastnft/blob/161aa27fe7eb8ecf2866ec9eb192e768f25da768/crates/sui-framework/sources/governance/delegation.move\r\nexport class Delegation {\r\n  public static readonly SUI_OBJECT_TYPE = '0x2::delegation::Delegation';\r\n  private suiObject: DelegationSuiObject;\r\n\r\n  public static isDelegationSuiObject(\r\n    obj: SuiObject\r\n  ): obj is DelegationSuiObject {\r\n    return 'type' in obj.data && obj.data.type === Delegation.SUI_OBJECT_TYPE;\r\n  }\r\n\r\n  constructor(obj: DelegationSuiObject) {\r\n    this.suiObject = obj;\r\n  }\r\n\r\n  public nextRewardUnclaimedEpoch() {\r\n    return this.suiObject.data.fields.next_reward_unclaimed_epoch;\r\n  }\r\n\r\n  public activeDelegation() {\r\n    return BigInt(getOption(this.suiObject.data.fields.active_delegation) || 0);\r\n  }\r\n\r\n  public delegateAmount() {\r\n    return this.suiObject.data.fields.delegate_amount;\r\n  }\r\n\r\n  public endingEpoch() {\r\n    return getOption(this.suiObject.data.fields.ending_epoch);\r\n  }\r\n\r\n  public validatorAddress() {\r\n    return this.suiObject.data.fields.validator_address;\r\n  }\r\n\r\n  public isActive() {\r\n    return this.activeDelegation() > 0 && !this.endingEpoch();\r\n  }\r\n\r\n  public hasUnclaimedRewards(epoch: number) {\r\n    return (\r\n      this.nextRewardUnclaimedEpoch() <= epoch &&\r\n      (this.isActive() || (this.endingEpoch() || 0) > epoch)\r\n    );\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { BCS, decodeStr, encodeStr, getSuiMoveConfig } from '@mysten/bcs';\r\nimport { SuiObjectRef } from './objects';\r\n\r\nconst bcs = new BCS(getSuiMoveConfig());\r\n\r\nbcs\r\n  .registerType(\r\n    'utf8string',\r\n    (writer, str) => {\r\n      const bytes = Array.from(new TextEncoder().encode(str));\r\n      return writer.writeVec(bytes, (writer, el) => writer.write8(el));\r\n    },\r\n    (reader) => {\r\n      let bytes = reader.readVec((reader) => reader.read8());\r\n      return new TextDecoder().decode(new Uint8Array(bytes));\r\n    }\r\n  )\r\n  .registerType(\r\n    'ObjectDigest',\r\n    (writer, str) => {\r\n      let bytes = Array.from(decodeStr(str, 'base64'));\r\n      return writer.writeVec(bytes, (writer, el) => writer.write8(el));\r\n    },\r\n    (reader) => {\r\n      let bytes = reader.readVec((reader) => reader.read8());\r\n      return encodeStr(new Uint8Array(bytes), 'base64');\r\n    }\r\n  );\r\n\r\nbcs.registerStructType('SuiObjectRef', {\r\n  objectId: 'address',\r\n  version: 'u64',\r\n  digest: 'ObjectDigest',\r\n});\r\n\r\n/**\r\n * Transaction type used for transferring objects.\r\n * For this transaction to be executed, and `SuiObjectRef` should be queried\r\n * upfront and used as a parameter.\r\n */\r\nexport type TransferObjectTx = {\r\n  TransferObject: {\r\n    recipient: string;\r\n    object_ref: SuiObjectRef;\r\n  };\r\n};\r\n\r\nbcs.registerStructType('TransferObjectTx', {\r\n  recipient: 'address',\r\n  object_ref: 'SuiObjectRef',\r\n});\r\n\r\n/**\r\n * Transaction type used for transferring Sui.\r\n */\r\nexport type TransferSuiTx = {\r\n  TransferSui: {\r\n    recipient: string;\r\n    amount: { Some: number } | { None: null };\r\n  };\r\n};\r\n\r\n/**\r\n * Transaction type used for Pay transaction.\r\n */\r\nexport type PayTx = {\r\n  Pay: {\r\n    coins: SuiObjectRef[];\r\n    recipients: string[];\r\n    amounts: number[];\r\n  };\r\n};\r\n\r\nexport type PaySuiTx = {\r\n  PaySui: {\r\n    coins: SuiObjectRef[];\r\n    recipients: string[];\r\n    amounts: number[];\r\n  };\r\n};\r\n\r\nexport type PayAllSuiTx = {\r\n  PayAllSui: {\r\n    coins: SuiObjectRef[];\r\n    recipient: string;\r\n  };\r\n};\r\n\r\nbcs\r\n  .registerStructType('PayTx', {\r\n    coins: 'vector<SuiObjectRef>',\r\n    recipients: 'vector<address>',\r\n    amounts: 'vector<u64>',\r\n  });\r\n\r\nbcs.registerStructType('PaySuiTx', {\r\n  coins: 'vector<SuiObjectRef>',\r\n  recipients: 'vector<address>',\r\n  amounts: 'vector<u64>',\r\n});\r\n\r\nbcs.registerStructType('PayAllSuiTx', {\r\n  coins: 'vector<SuiObjectRef>',\r\n  recipient: 'address',\r\n});\r\n\r\nbcs.registerEnumType('Option<T>', {\r\n  None: null,\r\n  Some: 'T',\r\n});\r\n\r\nbcs.registerStructType('TransferSuiTx', {\r\n  recipient: 'address',\r\n  amount: 'Option<u64>',\r\n});\r\n\r\n/**\r\n * Transaction type used for publishing Move modules to the Sui.\r\n * Should be already compiled using `sui-move`, example:\r\n * ```\r\n * $ sui-move build\r\n * $ cat build/project_name/bytecode_modules/module.mv\r\n * ```\r\n * In JS:\r\n * ```\r\n * let file = fs.readFileSync('./move/build/project_name/bytecode_modules/module.mv');\r\n * let bytes = Array.from(bytes);\r\n * let modules = [ bytes ];\r\n *\r\n * // ... publish logic ...\r\n * ```\r\n *\r\n * Each module should be represented as a sequence of bytes.\r\n */\r\nexport type PublishTx = {\r\n  Publish: {\r\n    modules: ArrayLike<ArrayLike<number>>;\r\n  };\r\n};\r\n\r\nbcs.registerStructType('PublishTx', {\r\n  modules: 'vector<vector<u8>>',\r\n});\r\n\r\n// ========== Move Call Tx ===========\r\n\r\n/**\r\n * A reference to a shared object.\r\n */\r\nexport type SharedObjectRef = {\r\n  /** Hex code as string representing the object id */\r\n  objectId: string;\r\n\r\n  /** The version the object was shared at */\r\n  initialSharedVersion: number;\r\n};\r\n\r\n/**\r\n * An object argument.\r\n */\r\nexport type ObjectArg =\r\n  | { ImmOrOwned: SuiObjectRef }\r\n  | { Shared: SharedObjectRef };\r\n\r\n/**\r\n * An argument for the transaction. It is a 'meant' enum which expects to have\r\n * one of the optional properties. If not, the BCS error will be thrown while\r\n * attempting to form a transaction.\r\n *\r\n * Example:\r\n * ```js\r\n * let arg1: CallArg = { Object: { Shared: {\r\n *   objectId: '5460cf92b5e3e7067aaace60d88324095fd22944',\r\n *   initialSharedVersion: 1,\r\n * } } };\r\n * let arg2: CallArg = { Pure: bcs.set(bcs.STRING, 100000).toBytes() };\r\n * let arg3: CallArg = { Object: { ImmOrOwned: {\r\n *   objectId: '4047d2e25211d87922b6650233bd0503a6734279',\r\n *   version: 1,\r\n *   digest: 'bCiANCht4O9MEUhuYjdRCqRPZjr2rJ8MfqNiwyhmRgA='\r\n * } } };\r\n * ```\r\n *\r\n * For `Pure` arguments BCS is required. You must encode the values with BCS according\r\n * to the type required by the called function. Pure accepts only serialized values\r\n */\r\nexport type CallArg =\r\n  | { Pure: ArrayLike<number> }\r\n  | { Object: ObjectArg }\r\n  | { ObjVec: ArrayLike<ObjectArg> };\r\n\r\nbcs\r\n  .registerStructType('SharedObjectRef', {\r\n    objectId: 'address',\r\n    initialSharedVersion: 'u64',\r\n  })\r\n  .registerEnumType('ObjectArg', {\r\n    ImmOrOwned: 'SuiObjectRef',\r\n    Shared: 'SharedObjectRef',\r\n  })\r\n  .registerEnumType('CallArg', {\r\n    Pure: 'vector<u8>',\r\n    Object: 'ObjectArg',\r\n    ObjVec: 'vector<ObjectArg>',\r\n  });\r\n\r\n/**\r\n * Kind of a TypeTag which is represented by a Move type identifier.\r\n */\r\nexport type StructTag = {\r\n  address: string;\r\n  module: string;\r\n  name: string;\r\n  typeParams: TypeTag[];\r\n};\r\n\r\n/**\r\n * Sui TypeTag object. A decoupled `0x...::module::Type<???>` parameter.\r\n */\r\nexport type TypeTag =\r\n  | { bool: null }\r\n  | { u8: null }\r\n  | { u64: null }\r\n  | { u128: null }\r\n  | { address: null }\r\n  | { signer: null }\r\n  | { vector: TypeTag }\r\n  | { struct: StructTag }\r\n  | { u16: null }\r\n  | { u32: null }\r\n  | { u256: null }  ;\r\n\r\nbcs\r\n  .registerEnumType('TypeTag', {\r\n    bool: null,\r\n    u8: null,\r\n    u64: null,\r\n    u128: null,\r\n    address: null,\r\n    signer: null,\r\n    vector: 'TypeTag',\r\n    struct: 'StructTag',\r\n    u16: null,\r\n    u32: null,\r\n    u256: null,\r\n  })\r\n  .registerStructType('StructTag', {\r\n    address: 'address',\r\n    module: 'string',\r\n    name: 'string',\r\n    typeParams: 'vector<TypeTag>',\r\n  });\r\n\r\n/**\r\n * Transaction type used for calling Move modules' functions.\r\n * Should be crafted carefully, because the order of type parameters and\r\n * arguments matters.\r\n */\r\nexport type MoveCallTx = {\r\n  Call: {\r\n    package: SuiObjectRef;\r\n    module: string;\r\n    function: string;\r\n    typeArguments: TypeTag[];\r\n    arguments: CallArg[];\r\n  };\r\n};\r\n\r\nbcs\r\n  .registerStructType('MoveCallTx', {\r\n    package: 'SuiObjectRef',\r\n    module: 'string',\r\n    function: 'string',\r\n    typeArguments: 'vector<TypeTag>',\r\n    arguments: 'vector<CallArg>',\r\n  });\r\n\r\n// ========== TransactionData ===========\r\n\r\nexport type Transaction =\r\n  | MoveCallTx\r\n  | PayTx\r\n  | PaySuiTx\r\n  | PayAllSuiTx\r\n  | PublishTx\r\n  | TransferObjectTx\r\n  | TransferSuiTx;\r\n\r\nbcs.registerEnumType('Transaction', {\r\n  TransferObject: 'TransferObjectTx',\r\n  Publish: 'PublishTx',\r\n  Call: 'MoveCallTx',\r\n  TransferSui: 'TransferSuiTx',\r\n  Pay: 'PayTx',\r\n  PaySui: 'PaySuiTx',\r\n  PayAllSui: 'PayAllSuiTx',\r\n});\r\n/**\r\n * Transaction kind - either Batch or Single.\r\n *\r\n * Can be improved to change serialization automatically based on\r\n * the passed value (single Transaction or an array).\r\n */\r\nexport type TransactionKind =\r\n  | { Single: Transaction }\r\n  | { Batch: Transaction[] };\r\n\r\nbcs\r\n  .registerEnumType('TransactionKind', {\r\n    Single: 'Transaction',\r\n    Batch: 'vector<Transaction>',\r\n  });\r\n\r\n/**\r\n * The TransactionData to be signed and sent to the RPC service.\r\n *\r\n * Field `sender` is made optional as it can be added during the signing\r\n * process and there's no need to define it sooner.\r\n */\r\nexport type TransactionData = {\r\n  sender?: string; //\r\n  gasBudget: number;\r\n  gasPrice: number;\r\n  kind: TransactionKind;\r\n  gasPayment: SuiObjectRef;\r\n};\r\n\r\nbcs.registerStructType('TransactionData', {\r\n  kind: 'TransactionKind',\r\n  sender: 'address',\r\n  gasPayment: 'SuiObjectRef',\r\n  gasPrice: 'u64',\r\n  gasBudget: 'u64',\r\n});\r\n\r\nexport { bcs };\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nexport type RpcApiVersion = {\r\n  major: number;\r\n  minor: number;\r\n  patch: number;\r\n};\r\n\r\nexport function parseVersionFromString(\r\n  version: string\r\n): RpcApiVersion | undefined {\r\n  const versions = version.split('.');\r\n  return {\r\n    major: parseInt(versions[0], 10),\r\n    minor: parseInt(versions[1], 10),\r\n    patch: parseInt(versions[2], 10),\r\n  };\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { isSubscriptionEvent } from '../types/index.guard';\r\nimport { SuiEventFilter, SuiEventEnvelope, SubscriptionId } from '../types';\r\nimport { Client as WsRpcClient } from 'rpc-websockets';\r\n\r\nexport const getWebsocketUrl = (httpUrl: string, port?: number): string => {\r\n  const url = new URL(httpUrl);\r\n  url.protocol = url.protocol.replace('http', 'ws');\r\n  url.port = (port ?? 9001).toString();\r\n  return url.toString();\r\n};\r\n\r\nenum ConnectionState {\r\n  NotConnected,\r\n  Connecting,\r\n  Connected,\r\n}\r\n\r\ntype JsonRpcMethodMessage<T> = {\r\n  jsonrpc: '2.0';\r\n  method: string;\r\n  params: T;\r\n};\r\n\r\ntype FilterSubHandler = {\r\n  id: SubscriptionId;\r\n  onMessage: (event: SuiEventEnvelope) => void;\r\n  filter: SuiEventFilter;\r\n};\r\n\r\ntype SubscriptionData = {\r\n  filter: SuiEventFilter;\r\n  onMessage: (event: SuiEventEnvelope) => void;\r\n};\r\n\r\ntype MinimumSubscriptionMessage = {\r\n  subscription: SubscriptionId;\r\n  result: object;\r\n};\r\n\r\nconst isMinimumSubscriptionMessage = (\r\n  msg: any\r\n): msg is MinimumSubscriptionMessage =>\r\n  msg &&\r\n  'subscription' in msg &&\r\n  typeof msg['subscription'] === 'number' &&\r\n  'result' in msg &&\r\n  typeof msg['result'] === 'object';\r\n\r\n/**\r\n * Configuration options for the websocket connection\r\n */\r\nexport type WebsocketClientOptions = {\r\n  /**\r\n   * Milliseconds before timing out while initially connecting\r\n   */\r\n  connectTimeout: number;\r\n  /**\r\n   * Milliseconds before timing out while calling an RPC method\r\n   */\r\n  callTimeout: number;\r\n  /**\r\n   * Milliseconds between attempts to connect\r\n   */\r\n  reconnectInterval: number;\r\n  /**\r\n   * Maximum number of times to try connecting before giving up\r\n   */\r\n  maxReconnects: number;\r\n};\r\n\r\nexport const DEFAULT_CLIENT_OPTIONS: WebsocketClientOptions = {\r\n  connectTimeout: 15000,\r\n  callTimeout: 30000,\r\n  reconnectInterval: 3000,\r\n  maxReconnects: 5,\r\n};\r\n\r\nconst SUBSCRIBE_EVENT_METHOD = 'sui_subscribeEvent';\r\nconst UNSUBSCRIBE_EVENT_METHOD = 'sui_unsubscribeEvent';\r\n\r\n/**\r\n * Interface with a Sui node's websocket capabilities\r\n */\r\nexport class WebsocketClient {\r\n  protected rpcClient: WsRpcClient;\r\n  protected connectionState: ConnectionState = ConnectionState.NotConnected;\r\n  protected connectionTimeout: number | null = null;\r\n  protected isSetup: boolean = false;\r\n  private connectionPromise: Promise<void> | null = null;\r\n\r\n  protected eventSubscriptions: Map<SubscriptionId, SubscriptionData> =\r\n    new Map();\r\n\r\n  /**\r\n   * @param endpoint Sui node endpoint to connect to (accepts websocket & http)\r\n   * @param skipValidation If `true`, the rpc client will not check if the responses\r\n   * from the RPC server conform to the schema defined in the TypeScript SDK\r\n   * @param options Configuration options, such as timeouts & connection behavior\r\n   */\r\n  constructor(\r\n    public endpoint: string,\r\n    public skipValidation: boolean,\r\n    public options: WebsocketClientOptions = DEFAULT_CLIENT_OPTIONS\r\n  ) {\r\n    if (this.endpoint.startsWith('http'))\r\n      this.endpoint = getWebsocketUrl(this.endpoint);\r\n\r\n    this.rpcClient = new WsRpcClient(this.endpoint, {\r\n      reconnect_interval: this.options.reconnectInterval,\r\n      max_reconnects: this.options.maxReconnects,\r\n      autoconnect: false,\r\n    });\r\n  }\r\n\r\n  private setupSocket() {\r\n    if (this.isSetup) return;\r\n\r\n    this.rpcClient.on('open', () => {\r\n      if (this.connectionTimeout) {\r\n        clearTimeout(this.connectionTimeout);\r\n        this.connectionTimeout = null;\r\n      }\r\n      this.connectionState = ConnectionState.Connected;\r\n      // underlying websocket is private, but we need it\r\n      // to access messages sent by the node\r\n      (this.rpcClient as any).socket.on(\r\n        'message',\r\n        this.onSocketMessage.bind(this)\r\n      );\r\n    });\r\n\r\n    this.rpcClient.on('close', () => {\r\n      this.connectionState = ConnectionState.NotConnected;\r\n    });\r\n\r\n    this.rpcClient.on('error', console.error);\r\n    this.isSetup = true;\r\n  }\r\n\r\n  // called for every message received from the node over websocket\r\n  private onSocketMessage(rawMessage: string): void {\r\n    const msg: JsonRpcMethodMessage<object> = JSON.parse(rawMessage);\r\n\r\n    const params = msg.params;\r\n    if (msg.method === SUBSCRIBE_EVENT_METHOD) {\r\n      // even with validation off, we must ensure a few properties at minimum in a message\r\n      if (this.skipValidation && isMinimumSubscriptionMessage(params)) {\r\n        const sub = this.eventSubscriptions.get(params.subscription);\r\n        if (sub)\r\n          // cast to bypass type validation of 'result'\r\n          (sub.onMessage as (m: any) => void)(params.result);\r\n      } else if (isSubscriptionEvent(params)) {\r\n        // call any registered handler for the message's subscription\r\n        const sub = this.eventSubscriptions.get(params.subscription);\r\n        if (sub) sub.onMessage(params.result);\r\n      }\r\n    }\r\n  }\r\n\r\n  private async connect(): Promise<void> {\r\n    // if the last attempt to connect hasn't finished, wait on it\r\n    if (this.connectionPromise) return this.connectionPromise;\r\n    if (this.connectionState === ConnectionState.Connected)\r\n      return Promise.resolve();\r\n\r\n    this.setupSocket();\r\n    this.rpcClient.connect();\r\n    this.connectionState = ConnectionState.Connecting;\r\n\r\n    this.connectionPromise = new Promise<void>((resolve, reject) => {\r\n      this.connectionTimeout = setTimeout(\r\n        () => reject(new Error('timeout')),\r\n        this.options.connectTimeout\r\n      ) as any as number;\r\n\r\n      this.rpcClient.once('open', () => {\r\n        this.refreshSubscriptions();\r\n        this.connectionPromise = null;\r\n        resolve();\r\n      });\r\n      this.rpcClient.once('error', (err) => {\r\n        this.connectionPromise = null;\r\n        reject(err);\r\n      });\r\n    });\r\n    return this.connectionPromise;\r\n  }\r\n\r\n  /**\r\n    call only upon reconnecting to a node over websocket.\r\n    calling multiple times on the same connection will result\r\n    in multiple message handlers firing each time\r\n  */\r\n  private async refreshSubscriptions() {\r\n    if (this.eventSubscriptions.size === 0) return;\r\n\r\n    try {\r\n      let newSubs: Map<SubscriptionId, SubscriptionData> = new Map();\r\n\r\n      let newSubsArr: (FilterSubHandler | null)[] = await Promise.all(\r\n        Array.from(this.eventSubscriptions.values()).map(async (sub) => {\r\n          const onMessage = sub.onMessage;\r\n          const filter = sub.filter;\r\n          if (!filter || !onMessage) return Promise.resolve(null);\r\n          /**\r\n            re-subscribe to the same filter & replace the subscription id.\r\n            we skip calling sui_unsubscribeEvent for the old sub id, because:\r\n              * we assume this is being called after a reconnection\r\n              * the node keys subscriptions with a combo of connection id & subscription id\r\n          */\r\n          const id = await this.subscribeEvent(filter, onMessage);\r\n          return { id, onMessage, filter };\r\n        })\r\n      );\r\n\r\n      newSubsArr.forEach((entry) => {\r\n        if (entry === null) return;\r\n        const filter = entry.filter;\r\n        const onMessage = entry.onMessage;\r\n        newSubs.set(entry.id, { filter, onMessage });\r\n      });\r\n\r\n      this.eventSubscriptions = newSubs;\r\n    } catch (err) {\r\n      throw new Error(`error refreshing event subscriptions: ${err}`);\r\n    }\r\n  }\r\n\r\n  async subscribeEvent(\r\n    filter: SuiEventFilter,\r\n    onMessage: (event: SuiEventEnvelope) => void\r\n  ): Promise<SubscriptionId> {\r\n    try {\r\n      // lazily connect to websocket to avoid spamming node with connections\r\n      if (this.connectionState != ConnectionState.Connected)\r\n        await this.connect();\r\n\r\n      let subId = (await this.rpcClient.call(\r\n        SUBSCRIBE_EVENT_METHOD,\r\n        [filter],\r\n        this.options.callTimeout\r\n      )) as SubscriptionId;\r\n\r\n      this.eventSubscriptions.set(subId, { filter, onMessage });\r\n      return subId;\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error subscribing to event: ${err}, filter: ${JSON.stringify(filter)}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async unsubscribeEvent(id: SubscriptionId): Promise<boolean> {\r\n    try {\r\n      if (this.connectionState != ConnectionState.Connected)\r\n        await this.connect();\r\n\r\n      let removedOnNode = (await this.rpcClient.call(\r\n        UNSUBSCRIBE_EVENT_METHOD,\r\n        [id],\r\n        this.options.callTimeout\r\n      )) as boolean;\r\n      /**\r\n        if the connection closes before unsubscribe is called,\r\n        the remote node will remove us from its subscribers list without notification,\r\n        leading to removedOnNode being false. but if we still had a record of it locally,\r\n        we should still report that it was deleted successfully\r\n      */\r\n      return this.eventSubscriptions.delete(id) || removedOnNode;\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error unsubscribing from event: ${err}, subscription: ${id}}`\r\n      );\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nexport enum Network {\r\n  LOCAL = 'LOCAL',\r\n  DEVNET = 'DEVNET',\r\n}\r\n\r\nexport type ApiEndpoints = {\r\n  fullNode: string;\r\n  faucet?: string;\r\n};\r\n\r\nexport const NETWORK_TO_API: Record<Network, ApiEndpoints> = {\r\n  [Network.LOCAL]: {\r\n    fullNode: 'http://127.0.0.1:9000',\r\n    faucet: 'http://127.0.0.1:9123/gas',\r\n  },\r\n  [Network.DEVNET]: {\r\n    fullNode: 'https://fullnode.devnet.sui.io/',\r\n    faucet: 'https://faucet.devnet.sui.io/gas',\r\n  },\r\n};\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport fetch from 'cross-fetch';\r\n\r\nimport { FaucetResponse, SuiAddress } from '../types';\r\nimport { HttpHeaders } from './client';\r\n\r\nexport class FaucetRateLimitError extends Error {}\r\n\r\nexport async function requestSuiFromFaucet(\r\n  endpoint: string,\r\n  recipient: SuiAddress,\r\n  httpHeaders?: HttpHeaders\r\n): Promise<FaucetResponse> {\r\n  const res = await fetch(endpoint, {\r\n    method: 'POST',\r\n    body: JSON.stringify({\r\n      FixedAmountRequest: {\r\n        recipient,\r\n      },\r\n    }),\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(httpHeaders || {}),\r\n    },\r\n  });\r\n\r\n  if (res.status === 429) {\r\n    throw new FaucetRateLimitError(\r\n      `Too many requests from this client have been sent to the faucet. Please retry later`\r\n    );\r\n  }\r\n  let parsed;\r\n  try {\r\n    parsed = await res.json();\r\n  } catch (e) {\r\n    throw new Error(\r\n      `Ecountered error when parsing response from faucet, error: ${e}, status ${res.status}, response ${res}`\r\n    );\r\n  }\r\n  if (parsed.error) {\r\n    throw new Error(`Faucet returns error: ${parsed.error}`);\r\n  }\r\n  return parsed;\r\n}","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { Provider } from './provider';\r\nimport { HttpHeaders, JsonRpcClient } from '../rpc/client';\r\nimport {\r\n  isGetObjectDataResponse,\r\n  isGetOwnedObjectsResponse,\r\n  isGetTxnDigestsResponse,\r\n  isPaginatedEvents,\r\n  isPaginatedTransactionDigests,\r\n  isSuiExecuteTransactionResponse,\r\n  isSuiMoveFunctionArgTypes,\r\n  isSuiMoveNormalizedFunction,\r\n  isSuiMoveNormalizedModule,\r\n  isSuiMoveNormalizedModules,\r\n  isSuiMoveNormalizedStruct,\r\n  isSuiTransactionResponse,\r\n  isTransactionEffects,\r\n} from '../types/index.guard';\r\nimport {\r\n  Coin,\r\n  ExecuteTransactionRequestType,\r\n  CoinDenominationInfoResponse,\r\n  GatewayTxSeqNumber,\r\n  GetObjectDataResponse,\r\n  getObjectReference,\r\n  GetTxnDigestsResponse,\r\n  ObjectId,\r\n  PaginatedTransactionDigests,\r\n  SubscriptionId,\r\n  SuiAddress,\r\n  SuiEventEnvelope,\r\n  SuiEventFilter,\r\n  SuiExecuteTransactionResponse,\r\n  SuiMoveFunctionArgTypes,\r\n  SuiMoveNormalizedFunction,\r\n  SuiMoveNormalizedModule,\r\n  SuiMoveNormalizedModules,\r\n  SuiMoveNormalizedStruct,\r\n  SuiObjectInfo,\r\n  SuiObjectRef,\r\n  SuiTransactionResponse,\r\n  TransactionDigest,\r\n  TransactionQuery,\r\n  SUI_TYPE_ARG,\r\n  normalizeSuiAddress,\r\n  RpcApiVersion,\r\n  parseVersionFromString,\r\n  EventQuery,\r\n  EventId,\r\n  PaginatedEvents,\r\n  FaucetResponse,\r\n  Order,\r\n  TransactionEffects,\r\n} from '../types';\r\nimport { SignatureScheme } from '../cryptography/publickey';\r\nimport {\r\n  DEFAULT_CLIENT_OPTIONS,\r\n  WebsocketClient,\r\n  WebsocketClientOptions,\r\n} from '../rpc/websocket-client';\r\nimport { ApiEndpoints, Network, NETWORK_TO_API } from '../utils/api-endpoints';\r\nimport { requestSuiFromFaucet } from '../rpc/faucet-client';\r\n\r\nconst isNumber = (val: any): val is number => typeof val === 'number';\r\nconst isAny = (_val: any): _val is any => true;\r\n\r\n/**\r\n * Configuration options for the JsonRpcProvider. If the value of a field is not provided,\r\n * value in `DEFAULT_OPTIONS` for that field will be used\r\n */\r\nexport type RpcProviderOptions = {\r\n  /**\r\n   * Default to `true`. If set to `false`, the rpc\r\n   * client will throw an error if the responses from the RPC server do not\r\n   * conform to the schema defined in the TypeScript SDK. If set to `true`, the\r\n   * rpc client will log the mismatch as a warning message instead of throwing an\r\n   * error. The mismatches often happen when the SDK is in a different version than\r\n   * the RPC server. Skipping the validation can maximize\r\n   * the version compatibility of the SDK, as not all the schema\r\n   * changes in the RPC response will affect the caller, but the caller needs to\r\n   * understand that the data may not match the TypeSrcript definitions.\r\n   */\r\n  skipDataValidation?: boolean;\r\n  /**\r\n   * Configuration options for the websocket connection\r\n   */\r\n  socketOptions?: WebsocketClientOptions;\r\n  /**\r\n   * Cache timeout in seconds for the RPC API Version\r\n   */\r\n  versionCacheTimoutInSeconds?: number;\r\n  /**\r\n   * URL to a faucet(optional). If you initialize `JsonRpcProvider`\r\n   * with a known `Network` value, this will be populated with a default\r\n   * value\r\n   */\r\n  faucetURL?: string;\r\n};\r\n\r\nconst DEFAULT_OPTIONS: RpcProviderOptions = {\r\n  skipDataValidation: true,\r\n  socketOptions: DEFAULT_CLIENT_OPTIONS,\r\n  versionCacheTimoutInSeconds: 600,\r\n};\r\n\r\nexport class JsonRpcProvider extends Provider {\r\n  public endpoints: ApiEndpoints;\r\n  protected client: JsonRpcClient;\r\n  protected wsClient: WebsocketClient;\r\n  private rpcApiVersion: RpcApiVersion | undefined;\r\n  private cacheExpiry: number | undefined;\r\n  /**\r\n   * Establish a connection to a Sui RPC endpoint\r\n   *\r\n   * @param endpoint URL to the Sui RPC endpoint, or a `Network` enum\r\n   * @param options configuration options for the provider\r\n   */\r\n  constructor(\r\n    endpoint: string | Network = Network.DEVNET,\r\n    public options: RpcProviderOptions = DEFAULT_OPTIONS\r\n  ) {\r\n    super();\r\n\r\n    if ((Object.values(Network) as string[]).includes(endpoint)) {\r\n      this.endpoints = NETWORK_TO_API[endpoint as Network];\r\n    } else {\r\n      this.endpoints = {\r\n        fullNode: endpoint,\r\n        faucet: options.faucetURL,\r\n      };\r\n    }\r\n\r\n    const opts = { ...DEFAULT_OPTIONS, ...options };\r\n\r\n    this.client = new JsonRpcClient(this.endpoints.fullNode);\r\n    this.wsClient = new WebsocketClient(\r\n      this.endpoints.fullNode,\r\n      opts.skipDataValidation!,\r\n      opts.socketOptions\r\n    );\r\n  }\r\n\r\n  async getRpcApiVersion(): Promise<RpcApiVersion | undefined> {\r\n    if (\r\n      this.rpcApiVersion &&\r\n      this.cacheExpiry &&\r\n      this.cacheExpiry <= Date.now()\r\n    ) {\r\n      return this.rpcApiVersion;\r\n    }\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'rpc.discover',\r\n        [],\r\n        isAny,\r\n        this.options.skipDataValidation\r\n      );\r\n      this.rpcApiVersion = parseVersionFromString(resp.info.version);\r\n      this.cacheExpiry =\r\n        Date.now() + (this.options.versionCacheTimoutInSeconds ?? 0);\r\n      return this.rpcApiVersion;\r\n    } catch (err) {\r\n      console.warn('Error fetching version number of the RPC API', err);\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  async requestSuiFromFaucet(\r\n    recipient: SuiAddress,\r\n    httpHeaders?: HttpHeaders\r\n  ): Promise<FaucetResponse> {\r\n    if (!this.endpoints.faucet) {\r\n      throw new Error('Faucet URL is not specified');\r\n    }\r\n    return requestSuiFromFaucet(this.endpoints.faucet, recipient, httpHeaders);\r\n  }\r\n\r\n  // Move info\r\n  async getMoveFunctionArgTypes(\r\n    packageId: string,\r\n    moduleName: string,\r\n    functionName: string\r\n  ): Promise<SuiMoveFunctionArgTypes> {\r\n    try {\r\n      return await this.client.requestWithType(\r\n        'sui_getMoveFunctionArgTypes',\r\n        [packageId, moduleName, functionName],\r\n        isSuiMoveFunctionArgTypes,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error fetching Move function arg types with package object ID: ${packageId}, module name: ${moduleName}, function name: ${functionName}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getNormalizedMoveModulesByPackage(\r\n    packageId: string\r\n  ): Promise<SuiMoveNormalizedModules> {\r\n    // TODO: Add caching since package object does not change\r\n    try {\r\n      return await this.client.requestWithType(\r\n        'sui_getNormalizedMoveModulesByPackage',\r\n        [packageId],\r\n        isSuiMoveNormalizedModules,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error fetching package: ${err} for package ${packageId}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getNormalizedMoveModule(\r\n    packageId: string,\r\n    moduleName: string\r\n  ): Promise<SuiMoveNormalizedModule> {\r\n    // TODO: Add caching since package object does not change\r\n    try {\r\n      return await this.client.requestWithType(\r\n        'sui_getNormalizedMoveModule',\r\n        [packageId, moduleName],\r\n        isSuiMoveNormalizedModule,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error fetching module: ${err} for package ${packageId}, module ${moduleName}}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getNormalizedMoveFunction(\r\n    packageId: string,\r\n    moduleName: string,\r\n    functionName: string\r\n  ): Promise<SuiMoveNormalizedFunction> {\r\n    // TODO: Add caching since package object does not change\r\n    try {\r\n      return await this.client.requestWithType(\r\n        'sui_getNormalizedMoveFunction',\r\n        [packageId, moduleName, functionName],\r\n        isSuiMoveNormalizedFunction,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error fetching function: ${err} for package ${packageId}, module ${moduleName} and function ${functionName}}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getNormalizedMoveStruct(\r\n    packageId: string,\r\n    moduleName: string,\r\n    structName: string\r\n  ): Promise<SuiMoveNormalizedStruct> {\r\n    try {\r\n      return await this.client.requestWithType(\r\n        'sui_getNormalizedMoveStruct',\r\n        [packageId, moduleName, structName],\r\n        isSuiMoveNormalizedStruct,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error fetching struct: ${err} for package ${packageId}, module ${moduleName} and struct ${structName}}`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Objects\r\n  async getObjectsOwnedByAddress(address: string): Promise<SuiObjectInfo[]> {\r\n    try {\r\n      return await this.client.requestWithType(\r\n        'sui_getObjectsOwnedByAddress',\r\n        [address],\r\n        isGetOwnedObjectsResponse,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error fetching owned object: ${err} for address ${address}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getGasObjectsOwnedByAddress(address: string): Promise<SuiObjectInfo[]> {\r\n    const objects = await this.getObjectsOwnedByAddress(address);\r\n    return objects.filter((obj: SuiObjectInfo) => Coin.isSUI(obj));\r\n  }\r\n\r\n  getCoinDenominationInfo(coinType: string): CoinDenominationInfoResponse {\r\n    const [packageId, module, symbol] = coinType.split('::');\r\n    if (\r\n      normalizeSuiAddress(packageId) !== normalizeSuiAddress('0x2') ||\r\n      module != 'sui' ||\r\n      symbol !== 'SUI'\r\n    ) {\r\n      throw new Error(\r\n        'only SUI coin is supported in getCoinDenominationInfo for now.'\r\n      );\r\n    }\r\n\r\n    return {\r\n      coinType: coinType,\r\n      basicUnit: 'MIST',\r\n      decimalNumber: 9,\r\n    };\r\n  }\r\n\r\n  async getCoinBalancesOwnedByAddress(\r\n    address: string,\r\n    typeArg?: string\r\n  ): Promise<GetObjectDataResponse[]> {\r\n    const objects = await this.getObjectsOwnedByAddress(address);\r\n    const coinIds = objects\r\n      .filter(\r\n        (obj: SuiObjectInfo) =>\r\n          Coin.isCoin(obj) &&\r\n          (typeArg === undefined || typeArg === Coin.getCoinTypeArg(obj))\r\n      )\r\n      .map((c) => c.objectId);\r\n\r\n    return await this.getObjectBatch(coinIds);\r\n  }\r\n\r\n  async selectCoinsWithBalanceGreaterThanOrEqual(\r\n    address: string,\r\n    amount: bigint,\r\n    typeArg: string = SUI_TYPE_ARG,\r\n    exclude: ObjectId[] = []\r\n  ): Promise<GetObjectDataResponse[]> {\r\n    const coins = await this.getCoinBalancesOwnedByAddress(address, typeArg);\r\n    return (await Coin.selectCoinsWithBalanceGreaterThanOrEqual(\r\n      coins,\r\n      amount,\r\n      exclude\r\n    )) as GetObjectDataResponse[];\r\n  }\r\n\r\n  async selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\r\n    address: string,\r\n    amount: bigint,\r\n    typeArg: string = SUI_TYPE_ARG,\r\n    exclude: ObjectId[] = []\r\n  ): Promise<GetObjectDataResponse[]> {\r\n    const coins = await this.getCoinBalancesOwnedByAddress(address, typeArg);\r\n    return (await Coin.selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\r\n      coins,\r\n      amount,\r\n      exclude\r\n    )) as GetObjectDataResponse[];\r\n  }\r\n\r\n  async getObjectsOwnedByObject(objectId: string): Promise<SuiObjectInfo[]> {\r\n    try {\r\n      return await this.client.requestWithType(\r\n        'sui_getObjectsOwnedByObject',\r\n        [objectId],\r\n        isGetOwnedObjectsResponse,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error fetching owned object: ${err} for objectId ${objectId}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getObject(objectId: string): Promise<GetObjectDataResponse> {\r\n    try {\r\n      return await this.client.requestWithType(\r\n        'sui_getObject',\r\n        [objectId],\r\n        isGetObjectDataResponse,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(`Error fetching object info: ${err} for id ${objectId}`);\r\n    }\r\n  }\r\n\r\n  async getObjectRef(objectId: string): Promise<SuiObjectRef | undefined> {\r\n    const resp = await this.getObject(objectId);\r\n    return getObjectReference(resp);\r\n  }\r\n\r\n  async getObjectBatch(objectIds: string[]): Promise<GetObjectDataResponse[]> {\r\n    const requests = objectIds.map((id) => ({\r\n      method: 'sui_getObject',\r\n      args: [id],\r\n    }));\r\n    try {\r\n      return await this.client.batchRequestWithType(\r\n        requests,\r\n        isGetObjectDataResponse,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(`Error fetching object info: ${err} for id ${objectIds}`);\r\n    }\r\n  }\r\n\r\n  // Transactions\r\n  async getTransactions(\r\n    query: TransactionQuery,\r\n    cursor: TransactionDigest | null = null,\r\n    limit: number | null = null,\r\n    order: Order = 'descending'\r\n  ): Promise<PaginatedTransactionDigests> {\r\n    try {\r\n      return await this.client.requestWithType(\r\n        'sui_getTransactions',\r\n        [query, cursor, limit, order === 'descending'],\r\n        isPaginatedTransactionDigests,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error getting transactions for query: ${err} for query ${query}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getTransactionsForObject(\r\n    objectID: string,\r\n    descendingOrder: boolean = true\r\n  ): Promise<GetTxnDigestsResponse> {\r\n    const requests = [\r\n      {\r\n        method: 'sui_getTransactions',\r\n        args: [{ InputObject: objectID }, null, null, descendingOrder],\r\n      },\r\n      {\r\n        method: 'sui_getTransactions',\r\n        args: [{ MutatedObject: objectID }, null, null, descendingOrder],\r\n      },\r\n    ];\r\n\r\n    try {\r\n      const results = await this.client.batchRequestWithType(\r\n        requests,\r\n        isPaginatedTransactionDigests,\r\n        this.options.skipDataValidation\r\n      );\r\n      return [...results[0].data, ...results[1].data];\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error getting transactions for object: ${err} for id ${objectID}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getTransactionsForAddress(\r\n    addressID: string,\r\n    descendingOrder: boolean = true\r\n  ): Promise<GetTxnDigestsResponse> {\r\n    const requests = [\r\n      {\r\n        method: 'sui_getTransactions',\r\n        args: [{ ToAddress: addressID }, null, null, descendingOrder],\r\n      },\r\n      {\r\n        method: 'sui_getTransactions',\r\n        args: [{ FromAddress: addressID }, null, null, descendingOrder],\r\n      },\r\n    ];\r\n    try {\r\n      const results = await this.client.batchRequestWithType(\r\n        requests,\r\n        isPaginatedTransactionDigests,\r\n        this.options.skipDataValidation\r\n      );\r\n      return [...results[0].data, ...results[1].data];\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error getting transactions for address: ${err} for id ${addressID}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getTransactionWithEffects(\r\n    digest: TransactionDigest\r\n  ): Promise<SuiTransactionResponse> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_getTransaction',\r\n        [digest],\r\n        isSuiTransactionResponse,\r\n        this.options.skipDataValidation\r\n      );\r\n      return resp;\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error getting transaction with effects: ${err} for digest ${digest}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async getTransactionWithEffectsBatch(\r\n    digests: TransactionDigest[]\r\n  ): Promise<SuiTransactionResponse[]> {\r\n    const requests = digests.map((d) => ({\r\n      method: 'sui_getTransaction',\r\n      args: [d],\r\n    }));\r\n    try {\r\n      return await this.client.batchRequestWithType(\r\n        requests,\r\n        isSuiTransactionResponse,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      const list = digests.join(', ').substring(0, -2);\r\n      throw new Error(\r\n        `Error getting transaction effects: ${err} for digests [${list}]`\r\n      );\r\n    }\r\n  }\r\n\r\n  async executeTransaction(\r\n    txnBytes: string,\r\n    signatureScheme: SignatureScheme,\r\n    signature: string,\r\n    pubkey: string,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_executeTransaction',\r\n        [txnBytes, signatureScheme, signature, pubkey, requestType],\r\n        isSuiExecuteTransactionResponse,\r\n        this.options.skipDataValidation\r\n      );\r\n      return resp;\r\n    } catch (err) {\r\n      throw new Error(`Error executing transaction with request type: ${err}}`);\r\n    }\r\n  }\r\n\r\n  async getTotalTransactionNumber(): Promise<number> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_getTotalTransactionNumber',\r\n        [],\r\n        isNumber,\r\n        this.options.skipDataValidation\r\n      );\r\n      return resp;\r\n    } catch (err) {\r\n      throw new Error(`Error fetching total transaction number: ${err}`);\r\n    }\r\n  }\r\n\r\n  async getTransactionDigestsInRange(\r\n    start: GatewayTxSeqNumber,\r\n    end: GatewayTxSeqNumber\r\n  ): Promise<GetTxnDigestsResponse> {\r\n    try {\r\n      return await this.client.requestWithType(\r\n        'sui_getTransactionsInRange',\r\n        [start, end],\r\n        isGetTxnDigestsResponse,\r\n        this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error fetching transaction digests in range: ${err} for range ${start}-${end}`\r\n      );\r\n    }\r\n  }\r\n\r\n  // Events\r\n  async getEvents(\r\n      query: EventQuery,\r\n      cursor: EventId | null,\r\n      limit: number | null,\r\n      order: Order = 'descending'\r\n  ): Promise<PaginatedEvents> {\r\n    try {\r\n      return await this.client.requestWithType(\r\n          'sui_getEvents',\r\n          [query, cursor, limit, order === 'descending'],\r\n          isPaginatedEvents,\r\n          this.options.skipDataValidation\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n          `Error getting events for query: ${err} for query ${query}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async subscribeEvent(\r\n    filter: SuiEventFilter,\r\n    onMessage: (event: SuiEventEnvelope) => void\r\n  ): Promise<SubscriptionId> {\r\n    return this.wsClient.subscribeEvent(filter, onMessage);\r\n  }\r\n\r\n  async unsubscribeEvent(id: SubscriptionId): Promise<boolean> {\r\n    return this.wsClient.unsubscribeEvent(id);\r\n  }\r\n\r\n  async dryRunTransaction(txBytes: string): Promise<TransactionEffects> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_dryRunTransaction',\r\n        [txBytes],\r\n        isTransactionEffects,\r\n        this.options.skipDataValidation\r\n      );\r\n      return resp;\r\n    } catch (err) {\r\n      throw new Error(`Error dry running transaction with request type: ${err}}`);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { SignatureScheme } from '../cryptography/publickey';\r\nimport { isSuiObjectRef } from '../types/index.guard';\r\nimport {\r\n  GetObjectDataResponse,\r\n  SuiObjectInfo,\r\n  SuiObjectRef,\r\n  getObjectReference,\r\n  TransactionEffects,\r\n  normalizeSuiObjectId,\r\n  ExecuteTransactionRequestType,\r\n  SuiExecuteTransactionResponse,\r\n  getTransactionEffects,\r\n} from '../types';\r\nimport { JsonRpcProvider } from './json-rpc-provider';\r\n\r\nexport class JsonRpcProviderWithCache extends JsonRpcProvider {\r\n  /**\r\n   * A list of object references which are being tracked.\r\n   *\r\n   * Whenever an object is fetched or updated within the transaction,\r\n   * its record gets updated.\r\n   */\r\n  private objectRefs: Map<string, SuiObjectRef> = new Map();\r\n\r\n  // Objects\r\n  async getObjectsOwnedByAddress(address: string): Promise<SuiObjectInfo[]> {\r\n    const resp = await super.getObjectsOwnedByAddress(address);\r\n    resp.forEach((r) => this.updateObjectRefCache(r));\r\n    return resp;\r\n  }\r\n\r\n  async getObjectsOwnedByObject(objectId: string): Promise<SuiObjectInfo[]> {\r\n    const resp = await super.getObjectsOwnedByObject(objectId);\r\n    resp.forEach((r) => this.updateObjectRefCache(r));\r\n    return resp;\r\n  }\r\n\r\n  async getObject(objectId: string): Promise<GetObjectDataResponse> {\r\n    const resp = await super.getObject(objectId);\r\n    this.updateObjectRefCache(resp);\r\n    return resp;\r\n  }\r\n\r\n  async getObjectRef(\r\n    objectId: string,\r\n    skipCache = false\r\n  ): Promise<SuiObjectRef | undefined> {\r\n    const normalizedId = normalizeSuiObjectId(objectId);\r\n    if (!skipCache && this.objectRefs.has(normalizedId)) {\r\n      return this.objectRefs.get(normalizedId);\r\n    }\r\n\r\n    const ref = await super.getObjectRef(objectId);\r\n    this.updateObjectRefCache(ref);\r\n    return ref;\r\n  }\r\n\r\n  async getObjectBatch(objectIds: string[]): Promise<GetObjectDataResponse[]> {\r\n    const resp = await super.getObjectBatch(objectIds);\r\n    resp.forEach((r) => this.updateObjectRefCache(r));\r\n    return resp;\r\n  }\r\n\r\n  // Transactions\r\n\r\n  async executeTransaction(\r\n    txnBytes: string,\r\n    signatureScheme: SignatureScheme,\r\n    signature: string,\r\n    pubkey: string,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForEffectsCert'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    if (requestType !== 'WaitForEffectsCert') {\r\n      console.warn(\r\n        `It's not recommended to use JsonRpcProviderWithCache with the request ` +\r\n          `type other than 'WaitForEffectsCert' for executeTransaction. Using ` +\r\n          `the '${requestType}' may result in stale cache and a failure in subsequent transactions.`\r\n      );\r\n    }\r\n    const resp = await super.executeTransaction(\r\n      txnBytes,\r\n      signatureScheme,\r\n      signature,\r\n      pubkey,\r\n      requestType\r\n    );\r\n    const effects = getTransactionEffects(resp);\r\n    if (effects != null) {\r\n      this.updateObjectRefCacheFromTransactionEffects(effects);\r\n    }\r\n    return resp;\r\n  }\r\n\r\n  private updateObjectRefCache(\r\n    newData: GetObjectDataResponse | SuiObjectRef | undefined\r\n  ) {\r\n    if (newData == null) {\r\n      return;\r\n    }\r\n    const ref = isSuiObjectRef(newData) ? newData : getObjectReference(newData);\r\n    if (ref != null) {\r\n      this.objectRefs.set(ref.objectId, ref);\r\n    }\r\n  }\r\n\r\n  private updateObjectRefCacheFromTransactionEffects(\r\n    effects: TransactionEffects\r\n  ) {\r\n    effects.created?.forEach((r) => this.updateObjectRefCache(r.reference));\r\n    effects.mutated?.forEach((r) => this.updateObjectRefCache(r.reference));\r\n    effects.unwrapped?.forEach((r) => this.updateObjectRefCache(r.reference));\r\n    effects.wrapped?.forEach((r) => this.updateObjectRefCache(r));\r\n    effects.deleted?.forEach((r) => this.objectRefs.delete(r.objectId));\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { fromHEX, toHEX } from '@mysten/bcs';\r\n\r\nexport class HexDataBuffer {\r\n  private _data: Uint8Array;\r\n\r\n  constructor(data: Uint8Array | string) {\r\n    if (typeof data === 'string') {\r\n      this._data = fromHEX(data);\r\n    } else {\r\n      this._data = data;\r\n    }\r\n  }\r\n\r\n  getData(): Uint8Array {\r\n    return this._data;\r\n  }\r\n\r\n  getLength(): number {\r\n    return this._data.length;\r\n  }\r\n\r\n  toString(): string {\r\n    return toHEX(this._data);\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { isTransactionBytes } from '../../types/index.guard';\r\nimport { JsonRpcClient } from '../../rpc/client';\r\nimport { Base64DataBuffer } from '../../serialization/base64';\r\nimport { SuiAddress } from '../../types';\r\nimport {\r\n  MoveCallTransaction,\r\n  MergeCoinTransaction,\r\n  SplitCoinTransaction,\r\n  TransferObjectTransaction,\r\n  TransferSuiTransaction,\r\n  PayTransaction,\r\n  PaySuiTransaction,\r\n  PayAllSuiTransaction,\r\n  PublishTransaction,\r\n  TxnDataSerializer,\r\n} from './txn-data-serializer';\r\n\r\n/**\r\n * This is a temporary implementation of the `TxnDataSerializer` class\r\n * that uses the Sui Fullnode RPC API to serialize a transaction into BCS bytes. We will\r\n * deprecate this implementation once `LocalTxnDataSerializer` stabilizes.\r\n *\r\n * Prefer to use `LocalTxnDataSerializer` instead for better performance and safety, otherwise\r\n * this needs to be used with a trusted fullnode and it is recommended to verify the returned\r\n * BCS bytes matches the input.\r\n */\r\nexport class RpcTxnDataSerializer implements TxnDataSerializer {\r\n  private client: JsonRpcClient;\r\n\r\n  /**\r\n   * Establish a connection to a Sui RPC endpoint\r\n   *\r\n   * @param endpoint URL to the Sui RPC endpoint\r\n   * @param skipDataValidation default to `false`. If set to `true`, the rpc\r\n   * client will not check if the responses from the RPC server conform to the schema\r\n   * defined in the TypeScript SDK. The mismatches often happen when the SDK\r\n   * is in a different version than the RPC server. Skipping the validation\r\n   * can maximize the version compatibility of the SDK, as not all the schema\r\n   * changes in the RPC response will affect the caller, but the caller needs to\r\n   * understand that the data may not match the TypeSrcript definitions.\r\n   */\r\n  constructor(endpoint: string, private skipDataValidation: boolean = false) {\r\n    this.client = new JsonRpcClient(endpoint);\r\n  }\r\n\r\n  async newTransferObject(\r\n    signerAddress: SuiAddress,\r\n    t: TransferObjectTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_transferObject',\r\n        [signerAddress, t.objectId, t.gasPayment, t.gasBudget, t.recipient],\r\n        isTransactionBytes,\r\n        this.skipDataValidation\r\n      );\r\n      return new Base64DataBuffer(resp.txBytes);\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error transferring object: ${err} with args ${JSON.stringify(t)}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newTransferSui(\r\n    signerAddress: SuiAddress,\r\n    t: TransferSuiTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_transferSui',\r\n        [signerAddress, t.suiObjectId, t.gasBudget, t.recipient, t.amount],\r\n        isTransactionBytes,\r\n        this.skipDataValidation\r\n      );\r\n      return new Base64DataBuffer(resp.txBytes);\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error transferring Sui coin: ${err} with args ${JSON.stringify(t)}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newPay(\r\n    signerAddress: SuiAddress,\r\n    t: PayTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_pay',\r\n        [\r\n          signerAddress,\r\n          t.inputCoins,\r\n          t.recipients,\r\n          t.amounts,\r\n          t.gasPayment,\r\n          t.gasBudget,\r\n        ],\r\n        isTransactionBytes,\r\n        this.skipDataValidation\r\n      );\r\n      return new Base64DataBuffer(resp.txBytes);\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error executing Pay transaction: ${err} with args ${JSON.stringify(t)}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newPaySui(\r\n    signerAddress: SuiAddress,\r\n    t: PaySuiTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_paySui',\r\n        [signerAddress, t.inputCoins, t.recipients, t.amounts, t.gasBudget],\r\n        isTransactionBytes,\r\n        this.skipDataValidation\r\n      );\r\n      return new Base64DataBuffer(resp.txBytes);\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error executing PaySui transaction: ${err} with args ${JSON.stringify(\r\n          t\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newPayAllSui(\r\n    signerAddress: SuiAddress,\r\n    t: PayAllSuiTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_payAllSui',\r\n        [signerAddress, t.inputCoins, t.recipient, t.gasBudget],\r\n        isTransactionBytes,\r\n        this.skipDataValidation\r\n      );\r\n      return new Base64DataBuffer(resp.txBytes);\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error executing PayAllSui transaction: ${err} with args ${JSON.stringify(\r\n          t\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newMoveCall(\r\n    signerAddress: SuiAddress,\r\n    t: MoveCallTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_moveCall',\r\n        [\r\n          signerAddress,\r\n          t.packageObjectId,\r\n          t.module,\r\n          t.function,\r\n          t.typeArguments,\r\n          t.arguments,\r\n          t.gasPayment,\r\n          t.gasBudget,\r\n        ],\r\n        isTransactionBytes,\r\n        this.skipDataValidation\r\n      );\r\n      return new Base64DataBuffer(resp.txBytes);\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error executing a move call: ${err} with args ${JSON.stringify(t)}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newMergeCoin(\r\n    signerAddress: SuiAddress,\r\n    t: MergeCoinTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_mergeCoins',\r\n        [\r\n          signerAddress,\r\n          t.primaryCoin,\r\n          t.coinToMerge,\r\n          t.gasPayment,\r\n          t.gasBudget,\r\n        ],\r\n        isTransactionBytes,\r\n        this.skipDataValidation\r\n      );\r\n      return new Base64DataBuffer(resp.txBytes);\r\n    } catch (err) {\r\n      throw new Error(`Error merging coin: ${err}`);\r\n    }\r\n  }\r\n\r\n  async newSplitCoin(\r\n    signerAddress: SuiAddress,\r\n    t: SplitCoinTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_splitCoin',\r\n        [\r\n          signerAddress,\r\n          t.coinObjectId,\r\n          t.splitAmounts,\r\n          t.gasPayment,\r\n          t.gasBudget,\r\n        ],\r\n        isTransactionBytes,\r\n        this.skipDataValidation\r\n      );\r\n      return new Base64DataBuffer(resp.txBytes);\r\n    } catch (err) {\r\n      throw new Error(`Error splitting coin: ${err}`);\r\n    }\r\n  }\r\n\r\n  async newPublish(\r\n    signerAddress: SuiAddress,\r\n    t: PublishTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const resp = await this.client.requestWithType(\r\n        'sui_publish',\r\n        [signerAddress, t.compiledModules, t.gasPayment, t.gasBudget],\r\n        isTransactionBytes,\r\n        this.skipDataValidation\r\n      );\r\n      return new Base64DataBuffer(resp.txBytes);\r\n    } catch (err) {\r\n      throw new Error(`Error publishing package ${err}`);\r\n    }\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { Provider } from '../../providers/provider';\r\nimport {\r\n  extractMutableReference,\r\n  extractStructTag,\r\n  getObjectReference,\r\n  getSharedObjectInitialVersion,\r\n  ID_STRUCT_NAME,\r\n  isValidSuiAddress,\r\n  MOVE_STDLIB_ADDRESS,\r\n  normalizeSuiObjectId,\r\n  ObjectId,\r\n  OBJECT_MODULE_NAME,\r\n  SuiJsonValue,\r\n  SuiMoveNormalizedType,\r\n  SUI_FRAMEWORK_ADDRESS,\r\n} from '../../types';\r\nimport { bcs, CallArg, MoveCallTx, ObjectArg } from '../../types/sui-bcs';\r\nimport { MoveCallTransaction } from './txn-data-serializer';\r\n\r\nconst MOVE_CALL_SER_ERROR = 'Move call argument serialization error:';\r\n\r\nconst STD_ASCII_MODULE_NAME = 'ascii';\r\nconst STD_ASCII_STRUCT_NAME = 'String';\r\n\r\nconst STD_UTF8_MODULE_NAME = 'string';\r\nconst STD_UTF8_STRUCT_NAME = 'String';\r\n\r\nconst RESOLVED_SUI_ID = {\r\n  address: SUI_FRAMEWORK_ADDRESS,\r\n  module: OBJECT_MODULE_NAME,\r\n  name: ID_STRUCT_NAME,\r\n};\r\n\r\nconst RESOLVED_ASCII_STR = {\r\n  address: MOVE_STDLIB_ADDRESS,\r\n  module: STD_ASCII_MODULE_NAME,\r\n  name: STD_ASCII_STRUCT_NAME,\r\n};\r\nconst RESOLVED_UTF8_STR = {\r\n  address: MOVE_STDLIB_ADDRESS,\r\n  module: STD_UTF8_MODULE_NAME,\r\n  name: STD_UTF8_STRUCT_NAME,\r\n};\r\n\r\nconst isTypeFunc = (type: string) => (t: any) => typeof t === type;\r\nconst isSameStruct = (a: any, b: any) =>\r\n  a.address === b.address && a.module === b.module && a.name === b.name;\r\n\r\nexport class CallArgSerializer {\r\n  constructor(private provider: Provider) {}\r\n\r\n  async extractObjectIds(txn: MoveCallTransaction): Promise<ObjectId[]> {\r\n    const args = await this.serializeMoveCallArguments(txn);\r\n    return args\r\n      .map((arg) =>\r\n        'ObjVec' in arg\r\n          ? Array.from(arg.ObjVec).map((a) => ({\r\n              Object: a,\r\n            }))\r\n          : arg\r\n      )\r\n      .flat()\r\n      .map((arg) => {\r\n        if ('Object' in arg) {\r\n          const objectArg = arg.Object;\r\n          if ('Shared' in objectArg) {\r\n            return objectArg.Shared.objectId;\r\n          } else {\r\n            return objectArg.ImmOrOwned.objectId;\r\n          }\r\n        }\r\n        return null;\r\n      })\r\n      .filter((a) => a != null) as ObjectId[];\r\n  }\r\n\r\n  async serializeMoveCallArguments(\r\n    txn: MoveCallTransaction\r\n  ): Promise<CallArg[]> {\r\n    const userParams = await this.extractNormalizedFunctionParams(\r\n      txn.packageObjectId,\r\n      txn.module,\r\n      txn.function\r\n    );\r\n\r\n    if (userParams.length !== txn.arguments.length) {\r\n      throw new Error(\r\n        `${MOVE_CALL_SER_ERROR} expect ${userParams.length} ` +\r\n          `arguments, received ${txn.arguments.length} arguments`\r\n      );\r\n    }\r\n    return Promise.all(\r\n      userParams.map(async (param, i) =>\r\n        this.newCallArg(param, txn.arguments[i])\r\n      )\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deserialize Call Args used in `Transaction` into `SuiJsonValue` arguments\r\n   */\r\n  async deserializeCallArgs(txn: MoveCallTx): Promise<SuiJsonValue[]> {\r\n    const userParams = await this.extractNormalizedFunctionParams(\r\n      txn.Call.package.objectId,\r\n      txn.Call.module,\r\n      txn.Call.function\r\n    );\r\n\r\n    return Promise.all(\r\n      userParams.map(async (param, i) =>\r\n        this.deserializeCallArg(param, txn.Call.arguments[i])\r\n      )\r\n    );\r\n  }\r\n\r\n  private async extractNormalizedFunctionParams(\r\n    packageId: ObjectId,\r\n    module: string,\r\n    functionName: string\r\n  ) {\r\n    const normalized = await this.provider.getNormalizedMoveFunction(\r\n      normalizeSuiObjectId(packageId),\r\n      module,\r\n      functionName\r\n    );\r\n    const params = normalized.parameters;\r\n    // Entry functions can have a mutable reference to an instance of the TxContext\r\n    // struct defined in the TxContext module as the last parameter. The caller of\r\n    // the function does not need to pass it in as an argument.\r\n    const hasTxContext = params.length > 0 && this.isTxContext(params.at(-1)!);\r\n    return hasTxContext ? params.slice(0, params.length - 1) : params;\r\n  }\r\n\r\n  async newObjectArg(objectId: string): Promise<ObjectArg> {\r\n    const object = await this.provider.getObject(objectId);\r\n    const initialSharedVersion = getSharedObjectInitialVersion(object);\r\n    if (initialSharedVersion) {\r\n      return { Shared: { objectId, initialSharedVersion } };\r\n    }\r\n\r\n    return { ImmOrOwned: getObjectReference(object)! };\r\n  }\r\n\r\n  private async newCallArg(\r\n    expectedType: SuiMoveNormalizedType,\r\n    argVal: SuiJsonValue\r\n  ): Promise<CallArg> {\r\n    const serType = this.getPureSerializationType(expectedType, argVal);\r\n    if (serType !== undefined) {\r\n      return {\r\n        Pure: bcs.ser(serType, argVal).toBytes(),\r\n      };\r\n    }\r\n\r\n    const structVal = extractStructTag(expectedType);\r\n    if (\r\n      structVal != null ||\r\n      (typeof expectedType === 'object' && 'TypeParameter' in expectedType)\r\n    ) {\r\n      if (typeof argVal !== 'string') {\r\n        throw new Error(\r\n          `${MOVE_CALL_SER_ERROR} expect the argument to be an object id string, got ${JSON.stringify(\r\n            argVal,\r\n            null,\r\n            2\r\n          )}`\r\n        );\r\n      }\r\n      return { Object: await this.newObjectArg(argVal) };\r\n    }\r\n\r\n    if (\r\n      typeof expectedType === 'object' &&\r\n      'Vector' in expectedType &&\r\n      typeof expectedType.Vector === 'object' &&\r\n      'Struct' in expectedType.Vector\r\n    ) {\r\n      if (!Array.isArray(argVal)) {\r\n        throw new Error(\r\n          `Expect ${argVal} to be a array, received ${typeof argVal}`\r\n        );\r\n      }\r\n      return {\r\n        ObjVec: await Promise.all(\r\n          argVal.map((arg) => this.newObjectArg(arg as string))\r\n        ),\r\n      };\r\n    }\r\n\r\n    throw new Error(\r\n      `Unknown call arg type ${JSON.stringify(expectedType, null, 2)} ` +\r\n        `for value ${JSON.stringify(argVal, null, 2)}`\r\n    );\r\n  }\r\n\r\n  private extractIdFromObjectArg(arg: ObjectArg) {\r\n    if ('ImmOrOwned' in arg) {\r\n      return arg.ImmOrOwned.objectId;\r\n    }\r\n    return arg.Shared.objectId;\r\n  }\r\n\r\n  private async deserializeCallArg(\r\n    expectedType: SuiMoveNormalizedType,\r\n    argVal: CallArg\r\n  ): Promise<SuiJsonValue> {\r\n    if ('Object' in argVal) {\r\n      return this.extractIdFromObjectArg(argVal.Object);\r\n    } else if ('ObjVec' in argVal) {\r\n      return Array.from(argVal.ObjVec).map((o) =>\r\n        this.extractIdFromObjectArg(o)\r\n      );\r\n    }\r\n\r\n    const serType = this.getPureSerializationType(expectedType, undefined);\r\n    return bcs.de(serType!, Uint8Array.from(argVal.Pure));\r\n  }\r\n\r\n  /**\r\n   *\r\n   * @param argVal used to do additional data validation to make sure the argVal\r\n   * matches the normalized Move types. If `argVal === undefined`, the data validation\r\n   * will be skipped. This is useful in the case where `normalizedType` is a vector<T>\r\n   * and `argVal` is an empty array, the data validation for the inner types will be skipped.\r\n   */\r\n  private getPureSerializationType(\r\n    normalizedType: SuiMoveNormalizedType,\r\n    argVal: SuiJsonValue | undefined\r\n  ): string | undefined {\r\n    const allowedTypes = [\r\n      'Address',\r\n      'Bool',\r\n      'U8',\r\n      'U16',\r\n      'U32',\r\n      'U64',\r\n      'U128',\r\n      'U256',\r\n    ];\r\n    if (\r\n      typeof normalizedType === 'string' &&\r\n      allowedTypes.includes(normalizedType)\r\n    ) {\r\n      if (normalizedType in ['U8', 'U16', 'U32', 'U64', 'U128', 'U256']) {\r\n        this.checkArgVal(isTypeFunc('number'), argVal, 'number');\r\n      } else if (normalizedType === 'Bool') {\r\n        this.checkArgVal(isTypeFunc('boolean'), argVal, 'boolean');\r\n      } else if (normalizedType === 'Address') {\r\n        this.checkArgVal(\r\n          (t: any) => typeof t === 'string' && isValidSuiAddress(t),\r\n          argVal,\r\n          'valid SUI address'\r\n        );\r\n      }\r\n      return normalizedType.toLowerCase();\r\n    } else if (typeof normalizedType === 'string') {\r\n      throw new Error(\r\n        `${MOVE_CALL_SER_ERROR} unknown pure normalized type ${JSON.stringify(\r\n          normalizedType,\r\n          null,\r\n          2\r\n        )}`\r\n      );\r\n    }\r\n\r\n    if ('Vector' in normalizedType) {\r\n      if (\r\n        (argVal === undefined || typeof argVal === 'string') &&\r\n        normalizedType.Vector === 'U8'\r\n      ) {\r\n        return 'string';\r\n      }\r\n\r\n      if (argVal !== undefined && !Array.isArray(argVal)) {\r\n        throw new Error(\r\n          `Expect ${argVal} to be a array, received ${typeof argVal}`\r\n        );\r\n      }\r\n      const innerType = this.getPureSerializationType(\r\n        normalizedType.Vector,\r\n        // undefined when argVal is empty\r\n        argVal ? argVal[0] : undefined\r\n      );\r\n      if (innerType === undefined) {\r\n        return undefined;\r\n      }\r\n      return `vector<${innerType}>`;\r\n    }\r\n\r\n    if ('Struct' in normalizedType) {\r\n      if (isSameStruct(normalizedType.Struct, RESOLVED_ASCII_STR)) {\r\n        return 'string';\r\n      } else if (isSameStruct(normalizedType.Struct, RESOLVED_UTF8_STR)) {\r\n        return 'utf8string';\r\n      } else if (isSameStruct(normalizedType.Struct, RESOLVED_SUI_ID)) {\r\n        return 'address';\r\n      }\r\n    }\r\n\r\n    return undefined;\r\n  }\r\n\r\n  private checkArgVal(\r\n    check: (t: any) => boolean,\r\n    argVal: SuiJsonValue | undefined,\r\n    expectedType: string\r\n  ) {\r\n    if (argVal === undefined) {\r\n      return;\r\n    }\r\n    if (!check(argVal)) {\r\n      throw new Error(\r\n        `Expect ${argVal} to be ${expectedType}, received ${typeof argVal}`\r\n      );\r\n    }\r\n  }\r\n\r\n  private isTxContext(param: SuiMoveNormalizedType): boolean {\r\n    const struct = extractStructTag(param)?.Struct;\r\n    return (\r\n      extractMutableReference(param) != null &&\r\n      struct?.address === '0x2' &&\r\n      struct?.module === 'tx_context' &&\r\n      struct?.name === 'TxContext'\r\n    );\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { normalizeSuiAddress, TypeTag } from '../../types';\r\n\r\nconst VECTOR_REGEX = /^vector<(.+)>$/;\r\nconst STRUCT_REGEX = /^([^:]+)::([^:]+)::(.+)/;\r\nconst STRUCT_TYPE_TAG_REGEX = /^[^<]+<(.+)>$/;\r\n\r\nexport class TypeTagSerializer {\r\n  parseFromStr(str: string): TypeTag {\r\n    if (str === 'address') {\r\n      return { address: null };\r\n    } else if (str === 'bool') {\r\n      return { bool: null };\r\n    } else if (str === 'u8') {\r\n      return { u8: null };\r\n    } else if (str === 'u64') {\r\n      return { u64: null };\r\n    } else if (str === 'signer') {\r\n      return { signer: null };\r\n    }\r\n    const vectorMatch = str.match(VECTOR_REGEX);\r\n    if (vectorMatch) {\r\n      return { vector: this.parseFromStr(vectorMatch[1]) };\r\n    }\r\n\r\n    const structMatch = str.match(STRUCT_REGEX);\r\n    if (structMatch) {\r\n      try {\r\n        return {\r\n          struct: {\r\n            address: normalizeSuiAddress(structMatch[1]),\r\n            module: structMatch[2],\r\n            name: structMatch[3].match(/^([^<]+)/)![1],\r\n            typeParams: this.parseStructTypeTag(structMatch[3]),\r\n          },\r\n        };\r\n      } catch (e) {\r\n        throw new Error(`Encounter error parsing type args for ${str}`);\r\n      }\r\n    }\r\n\r\n    throw new Error(\r\n      `Encounter unexpected token when parsing type args for ${str}`\r\n    );\r\n  }\r\n\r\n  parseStructTypeTag(str: string): TypeTag[] {\r\n    const typeTagsMatch = str.match(STRUCT_TYPE_TAG_REGEX);\r\n    if (!typeTagsMatch) {\r\n      return [];\r\n    }\r\n    // TODO: This will fail if the struct has nested type args with commas. Need\r\n    // to implement proper parsing for this case\r\n    const typeTags = typeTagsMatch[1].split(',');\r\n    return typeTags.map((tag) => this.parseFromStr(tag));\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { Base64DataBuffer } from '../../serialization/base64';\r\nimport {\r\n  bcs,\r\n  Coin,\r\n  PAY_JOIN_COIN_FUNC_NAME,\r\n  PAY_MODULE_NAME,\r\n  SUI_FRAMEWORK_ADDRESS,\r\n  PAY_SPLIT_COIN_VEC_FUNC_NAME,\r\n  ObjectId,\r\n  SuiAddress,\r\n  SUI_TYPE_ARG,\r\n  Transaction,\r\n  TransactionData,\r\n  TypeTag,\r\n  SuiObjectRef,\r\n} from '../../types';\r\nimport {\r\n  MoveCallTransaction,\r\n  MergeCoinTransaction,\r\n  SplitCoinTransaction,\r\n  TransferObjectTransaction,\r\n  TransferSuiTransaction,\r\n  PublishTransaction,\r\n  TxnDataSerializer,\r\n  PayTransaction,\r\n  PaySuiTransaction,\r\n  PayAllSuiTransaction,\r\n  SignableTransaction,\r\n  UnserializedSignableTransaction,\r\n} from './txn-data-serializer';\r\nimport { Provider } from '../../providers/provider';\r\nimport { CallArgSerializer } from './call-arg-serializer';\r\nimport { TypeTagSerializer } from './type-tag-serializer';\r\n\r\nconst TYPE_TAG = Array.from('TransactionData::').map((e) => e.charCodeAt(0));\r\n\r\nexport class LocalTxnDataSerializer implements TxnDataSerializer {\r\n  /**\r\n   * Need a provider to fetch the latest object reference. Ideally the provider\r\n   * should cache the object reference locally\r\n   */\r\n  constructor(private provider: Provider) {}\r\n\r\n  async newTransferObject(\r\n    signerAddress: SuiAddress,\r\n    t: TransferObjectTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const objectRef = await this.provider.getObjectRef(t.objectId);\r\n      const tx = {\r\n        TransferObject: {\r\n          recipient: t.recipient,\r\n          object_ref: objectRef!,\r\n        },\r\n      };\r\n      return await this.constructTransactionData(\r\n        tx,\r\n        { kind: 'transferObject', data: t },\r\n        t.gasPayment,\r\n        signerAddress\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error constructing a TransferObject transaction: ${err} args ${JSON.stringify(\r\n          t\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newTransferSui(\r\n    signerAddress: SuiAddress,\r\n    t: TransferSuiTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const tx = {\r\n        TransferSui: {\r\n          recipient: t.recipient,\r\n          amount: t.amount == null ? { None: null } : { Some: t.amount },\r\n        },\r\n      };\r\n      return await this.constructTransactionData(\r\n        tx,\r\n        { kind: 'transferSui', data: t },\r\n        t.suiObjectId,\r\n        signerAddress\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error constructing a TransferSui transaction: ${err} args ${JSON.stringify(\r\n          t\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newPay(\r\n    signerAddress: SuiAddress,\r\n    t: PayTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const inputCoinRefs = (\r\n        await Promise.all(\r\n          t.inputCoins.map((coin) => this.provider.getObjectRef(coin))\r\n        )\r\n      ).map((ref) => ref!);\r\n      const tx = {\r\n        Pay: {\r\n          coins: inputCoinRefs,\r\n          recipients: t.recipients,\r\n          amounts: t.amounts,\r\n        },\r\n      };\r\n      return await this.constructTransactionData(\r\n        tx,\r\n        { kind: 'pay', data: t },\r\n        t.gasPayment,\r\n        signerAddress\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error constructing a Pay transaction: ${err} args ${JSON.stringify(t)}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newPaySui(\r\n    signerAddress: SuiAddress,\r\n    t: PaySuiTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const inputCoinRefs = (\r\n        await Promise.all(\r\n          t.inputCoins.map((coin) => this.provider.getObjectRef(coin))\r\n        )\r\n      ).map((ref) => ref!);\r\n      const tx = {\r\n        PaySui: {\r\n          coins: inputCoinRefs,\r\n          recipients: t.recipients,\r\n          amounts: t.amounts,\r\n        },\r\n      };\r\n      const gas_coin_obj = t.inputCoins[0];\r\n      return await this.constructTransactionData(\r\n        tx,\r\n        { kind: 'paySui', data: t },\r\n        gas_coin_obj,\r\n        signerAddress\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error constructing a PaySui transaction: ${err} args ${JSON.stringify(\r\n          t\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newPayAllSui(\r\n    signerAddress: SuiAddress,\r\n    t: PayAllSuiTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const inputCoinRefs = (\r\n        await Promise.all(\r\n          t.inputCoins.map((coin) => this.provider.getObjectRef(coin))\r\n        )\r\n      ).map((ref) => ref!);\r\n      const tx = {\r\n        PayAllSui: {\r\n          coins: inputCoinRefs,\r\n          recipient: t.recipient,\r\n        },\r\n      };\r\n      const gas_coin_obj = t.inputCoins[0];\r\n      return await this.constructTransactionData(\r\n        tx,\r\n        { kind: 'payAllSui', data: t },\r\n        gas_coin_obj,\r\n        signerAddress\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error constructing a PayAllSui transaction: ${err} args ${JSON.stringify(\r\n          t\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newMoveCall(\r\n    signerAddress: SuiAddress,\r\n    t: MoveCallTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const pkg = await this.provider.getObjectRef(t.packageObjectId);\r\n      const tx = {\r\n        Call: {\r\n          package: pkg!,\r\n          module: t.module,\r\n          function: t.function,\r\n          typeArguments: t.typeArguments.map((a) =>\r\n            typeof a === 'string'\r\n              ? new TypeTagSerializer().parseFromStr(a)\r\n              : (a as TypeTag)\r\n          ),\r\n          arguments: await new CallArgSerializer(\r\n            this.provider\r\n          ).serializeMoveCallArguments(t),\r\n        },\r\n      };\r\n\r\n      return await this.constructTransactionData(\r\n        tx,\r\n        { kind: 'moveCall', data: t },\r\n        t.gasPayment,\r\n        signerAddress\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error constructing a move call: ${err} args ${JSON.stringify(t)}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newMergeCoin(\r\n    signerAddress: SuiAddress,\r\n    t: MergeCoinTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      return await this.newMoveCall(signerAddress, {\r\n        packageObjectId: SUI_FRAMEWORK_ADDRESS,\r\n        module: PAY_MODULE_NAME,\r\n        function: PAY_JOIN_COIN_FUNC_NAME,\r\n        typeArguments: [await this.getCoinStructTag(t.coinToMerge)],\r\n        arguments: [t.primaryCoin, t.coinToMerge],\r\n        gasPayment: t.gasPayment,\r\n        gasBudget: t.gasBudget,\r\n      });\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error constructing a MergeCoin Transaction: ${err} args ${JSON.stringify(\r\n          t\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newSplitCoin(\r\n    signerAddress: SuiAddress,\r\n    t: SplitCoinTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      return await this.newMoveCall(signerAddress, {\r\n        packageObjectId: SUI_FRAMEWORK_ADDRESS,\r\n        module: PAY_MODULE_NAME,\r\n        function: PAY_SPLIT_COIN_VEC_FUNC_NAME,\r\n        typeArguments: [await this.getCoinStructTag(t.coinObjectId)],\r\n        arguments: [t.coinObjectId, t.splitAmounts],\r\n        gasPayment: t.gasPayment,\r\n        gasBudget: t.gasBudget,\r\n      });\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error constructing a SplitCoin Transaction: ${err} args ${JSON.stringify(\r\n          t\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  async newPublish(\r\n    signerAddress: SuiAddress,\r\n    t: PublishTransaction\r\n  ): Promise<Base64DataBuffer> {\r\n    try {\r\n      const tx = {\r\n        Publish: {\r\n          modules: t.compiledModules as ArrayLike<ArrayLike<number>>,\r\n        },\r\n      };\r\n      return await this.constructTransactionData(\r\n        tx,\r\n        { kind: 'publish', data: t },\r\n        t.gasPayment,\r\n        signerAddress\r\n      );\r\n    } catch (err) {\r\n      throw new Error(\r\n        `Error constructing a newPublish transaction: ${err} with args ${JSON.stringify(\r\n          t\r\n        )}`\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Util function to select a coin for gas payment given an transaction, which will select\r\n   * an arbitrary gas object owned by the address with balance greater than or equal to\r\n   * `txn.data.gasBudget` that's not used in `txn` itself and the `exclude` list.\r\n   *\r\n   * @param txn the transaction for which the gas object is selected\r\n   * @param signerAddress signer of the transaction\r\n   * @param exclude additional object ids of the gas coins to exclude. Object ids that appear\r\n   * in `txn` will be appended\r\n   */\r\n  public async selectGasPaymentForTransaction(\r\n    txn: SignableTransaction,\r\n    signerAddress: string,\r\n    exclude: ObjectId[] = []\r\n  ): Promise<ObjectId | undefined> {\r\n    if (txn.kind === 'bytes') {\r\n      return undefined;\r\n    }\r\n\r\n    const coins = await this.provider.selectCoinsWithBalanceGreaterThanOrEqual(\r\n      signerAddress,\r\n      BigInt(txn.data.gasBudget),\r\n      SUI_TYPE_ARG,\r\n      exclude.concat(await this.extractObjectIds(txn))\r\n    );\r\n\r\n    return coins.length > 0 ? Coin.getID(coins[0]) : undefined;\r\n  }\r\n\r\n  /**\r\n   * Returns a list of object ids used in the transaction, including the gas payment object\r\n   */\r\n  public async extractObjectIds(txn: SignableTransaction): Promise<ObjectId[]> {\r\n    const ret = await this.extractInputObjectIds(txn);\r\n    if ('gasPayment' in txn.data && txn.data['gasPayment']) {\r\n      ret.push(txn.data['gasPayment']);\r\n    }\r\n    return ret;\r\n  }\r\n\r\n  private async extractInputObjectIds(\r\n    txn: SignableTransaction\r\n  ): Promise<ObjectId[]> {\r\n    switch (txn.kind) {\r\n      case 'moveCall':\r\n        return await new CallArgSerializer(this.provider).extractObjectIds(\r\n          txn.data\r\n        );\r\n      case 'transferSui':\r\n        return [txn.data.suiObjectId];\r\n      case 'transferObject':\r\n        return [txn.data.objectId];\r\n      case 'mergeCoin':\r\n        return [txn.data.primaryCoin, txn.data.coinToMerge];\r\n      case 'splitCoin':\r\n        return [txn.data.coinObjectId];\r\n      case 'pay':\r\n        return txn.data.inputCoins;\r\n    }\r\n    return [];\r\n  }\r\n\r\n  private async getCoinStructTag(coinId: string): Promise<TypeTag> {\r\n    const coin = await this.provider.getObject(coinId);\r\n    const coinTypeArg = Coin.getCoinTypeArg(coin);\r\n    if (coinTypeArg == null) {\r\n      throw new Error(`Object ${coinId} is not a valid coin type`);\r\n    }\r\n    return { struct: Coin.getCoinStructTag(coinTypeArg) };\r\n  }\r\n\r\n  private async constructTransactionData(\r\n    tx: Transaction,\r\n    originalTx: UnserializedSignableTransaction,\r\n    gasObjectId: ObjectId | undefined,\r\n    signerAddress: SuiAddress\r\n  ): Promise<Base64DataBuffer> {\r\n    if (gasObjectId === undefined) {\r\n      gasObjectId = await this.selectGasPaymentForTransaction(\r\n        originalTx,\r\n        signerAddress\r\n      );\r\n      if (gasObjectId === undefined) {\r\n        throw new Error(\r\n          `Unable to select a gas object with balance greater than or equal to ${originalTx.data.gasBudget}`\r\n        );\r\n      }\r\n    }\r\n    const gasPayment = await this.provider.getObjectRef(gasObjectId);\r\n    const txData = {\r\n      kind: {\r\n        // TODO: support batch txns\r\n        Single: tx,\r\n      },\r\n      gasPayment: gasPayment!,\r\n      // Need to keep in sync with\r\n      // https://github.com/MystenLabs/sui/blob/f32877f2e40d35a008710c232e49b57aab886462/crates/sui-types/src/messages.rs#L338\r\n      gasPrice: 1,\r\n      gasBudget: originalTx.data.gasBudget,\r\n      sender: signerAddress,\r\n    };\r\n\r\n    return await this.serializeTransactionData(txData);\r\n  }\r\n\r\n  /**\r\n   * Serialize `TransactionData` into BCS encoded bytes\r\n   */\r\n  public async serializeTransactionData(\r\n    tx: TransactionData,\r\n    // TODO: derive the buffer size automatically\r\n    size: number = 8192\r\n  ): Promise<Base64DataBuffer> {\r\n    const format = 'TransactionData';\r\n\r\n    const dataBytes = bcs.ser(format, tx, size).toBytes();\r\n    const serialized = new Uint8Array(TYPE_TAG.length + dataBytes.length);\r\n    serialized.set(TYPE_TAG);\r\n    serialized.set(dataBytes, TYPE_TAG.length);\r\n    return new Base64DataBuffer(serialized);\r\n  }\r\n\r\n  /**\r\n   * Deserialize BCS encoded bytes into `SignableTransaction`\r\n   */\r\n  public async deserializeTransactionBytesToSignableTransaction(\r\n    bytes: Base64DataBuffer\r\n  ): Promise<\r\n    UnserializedSignableTransaction | UnserializedSignableTransaction[]\r\n  > {\r\n    return this.transformTransactionDataToSignableTransaction(\r\n      await this.deserializeTransactionBytesToTransactionData(bytes)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Deserialize BCS encoded bytes into `TransactionData`\r\n   */\r\n  public async deserializeTransactionBytesToTransactionData(\r\n    bytes: Base64DataBuffer\r\n  ): Promise<TransactionData> {\r\n    return bcs.de('TransactionData', bytes.getData().slice(TYPE_TAG.length));\r\n  }\r\n\r\n  /**\r\n   * Deserialize `TransactionData` to `SignableTransaction`\r\n   */\r\n  public async transformTransactionDataToSignableTransaction(\r\n    tx: TransactionData\r\n  ): Promise<\r\n    UnserializedSignableTransaction | UnserializedSignableTransaction[]\r\n  > {\r\n    if ('Single' in tx.kind) {\r\n      return this.transformTransactionToSignableTransaction(\r\n        tx.kind.Single,\r\n        tx.gasBudget,\r\n        tx.gasPayment\r\n      );\r\n    }\r\n    return Promise.all(\r\n      tx.kind.Batch.map((t) =>\r\n        this.transformTransactionToSignableTransaction(\r\n          t,\r\n          tx.gasBudget,\r\n          tx.gasPayment\r\n        )\r\n      )\r\n    );\r\n  }\r\n\r\n  public async transformTransactionToSignableTransaction(\r\n    tx: Transaction,\r\n    gasBudget: number,\r\n    gasPayment?: SuiObjectRef\r\n  ): Promise<UnserializedSignableTransaction> {\r\n    if ('Pay' in tx) {\r\n      return {\r\n        kind: 'pay',\r\n        data: {\r\n          inputCoins: tx.Pay.coins.map((c) => c.objectId),\r\n          recipients: tx.Pay.recipients,\r\n          amounts: tx.Pay.amounts,\r\n          gasPayment: gasPayment?.objectId,\r\n          gasBudget,\r\n        },\r\n      };\r\n    } else if ('Call' in tx) {\r\n      return {\r\n        kind: 'moveCall',\r\n        data: {\r\n          packageObjectId: tx.Call.package.objectId,\r\n          module: tx.Call.module,\r\n          function: tx.Call.function,\r\n          typeArguments: tx.Call.typeArguments,\r\n          arguments: await new CallArgSerializer(\r\n            this.provider\r\n          ).deserializeCallArgs(tx),\r\n          gasPayment: gasPayment?.objectId,\r\n          gasBudget,\r\n        },\r\n      };\r\n    } else if ('TransferObject' in tx) {\r\n      return {\r\n        kind: 'transferObject',\r\n        data: {\r\n          objectId: tx.TransferObject.object_ref.objectId,\r\n          recipient: tx.TransferObject.recipient,\r\n          gasPayment: gasPayment?.objectId,\r\n          gasBudget,\r\n        },\r\n      };\r\n    } else if ('TransferSui' in tx) {\r\n      return {\r\n        kind: 'transferSui',\r\n        data: {\r\n          suiObjectId: gasPayment!.objectId,\r\n          recipient: tx.TransferSui.recipient,\r\n          amount:\r\n            'Some' in tx.TransferSui.amount ? tx.TransferSui.amount.Some : null,\r\n          gasBudget,\r\n        },\r\n      };\r\n    } else if ('Publish' in tx) {\r\n      return {\r\n        kind: 'publish',\r\n        data: {\r\n          compiledModules: tx.Publish.modules,\r\n          gasPayment: gasPayment?.objectId,\r\n          gasBudget,\r\n        },\r\n      };\r\n    }\r\n    throw new Error(`Unsupported transaction type ${tx}`);\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { SignatureScheme } from '../cryptography/publickey';\r\nimport { HttpHeaders } from '../rpc/client';\r\nimport {\r\n  CertifiedTransaction,\r\n  CoinDenominationInfoResponse,\r\n  TransactionDigest,\r\n  GetTxnDigestsResponse,\r\n  GatewayTxSeqNumber,\r\n  SuiObjectInfo,\r\n  GetObjectDataResponse,\r\n  SuiObjectRef,\r\n  SuiMoveFunctionArgTypes,\r\n  SuiMoveNormalizedFunction,\r\n  SuiMoveNormalizedStruct,\r\n  SuiMoveNormalizedModule,\r\n  SuiMoveNormalizedModules,\r\n  SuiEventFilter,\r\n  SuiEventEnvelope,\r\n  SubscriptionId,\r\n  ExecuteTransactionRequestType,\r\n  SuiExecuteTransactionResponse,\r\n  SuiAddress,\r\n  ObjectId,\r\n  TransactionQuery,\r\n  PaginatedTransactionDigests,\r\n  EventQuery,\r\n  PaginatedEvents,\r\n  EventId,\r\n  RpcApiVersion,\r\n  FaucetResponse,\r\n  Order,\r\n  TransactionEffects,\r\n} from '../types';\r\nimport { Provider } from './provider';\r\n\r\nexport class VoidProvider extends Provider {\r\n  // API Version\r\n  async getRpcApiVersion(): Promise<RpcApiVersion | undefined> {\r\n    throw this.newError('getRpcApiVersion');\r\n  }\r\n\r\n  // Faucet\r\n  async requestSuiFromFaucet(\r\n    _recipient: SuiAddress,\r\n    _httpHeaders?: HttpHeaders\r\n  ): Promise<FaucetResponse> {\r\n    throw this.newError('requestSuiFromFaucet');\r\n  }\r\n\r\n  // Objects\r\n  async getObjectsOwnedByAddress(_address: string): Promise<SuiObjectInfo[]> {\r\n    throw this.newError('getObjectsOwnedByAddress');\r\n  }\r\n\r\n  async getGasObjectsOwnedByAddress(\r\n    _address: string\r\n  ): Promise<SuiObjectInfo[]> {\r\n    throw this.newError('getGasObjectsOwnedByAddress');\r\n  }\r\n\r\n  getCoinDenominationInfo(_coin_type: string): CoinDenominationInfoResponse {\r\n    throw this.newError('getCoinDenominationInfo');\r\n  }\r\n\r\n  async getCoinBalancesOwnedByAddress(\r\n    _address: string,\r\n    _typeArg?: string\r\n  ): Promise<GetObjectDataResponse[]> {\r\n    throw this.newError('getCoinBalancesOwnedByAddress');\r\n  }\r\n\r\n  async selectCoinsWithBalanceGreaterThanOrEqual(\r\n    _address: string,\r\n    _amount: bigint,\r\n    _typeArg: string,\r\n    _exclude: ObjectId[] = []\r\n  ): Promise<GetObjectDataResponse[]> {\r\n    throw this.newError('selectCoinsWithBalanceGreaterThanOrEqual');\r\n  }\r\n\r\n  async selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\r\n    _address: string,\r\n    _amount: bigint,\r\n    _typeArg: string,\r\n    _exclude: ObjectId[]\r\n  ): Promise<GetObjectDataResponse[]> {\r\n    throw this.newError('selectCoinSetWithCombinedBalanceGreaterThanOrEqual');\r\n  }\r\n\r\n  async getObject(_objectId: string): Promise<GetObjectDataResponse> {\r\n    throw this.newError('getObject');\r\n  }\r\n\r\n  async getObjectRef(_objectId: string): Promise<SuiObjectRef | undefined> {\r\n    throw this.newError('getObjectRef');\r\n  }\r\n\r\n  // Transactions\r\n  async getTransaction(\r\n    _digest: TransactionDigest\r\n  ): Promise<CertifiedTransaction> {\r\n    throw this.newError('getTransaction');\r\n  }\r\n\r\n  async executeTransaction(\r\n    _txnBytes: string,\r\n    _signatureScheme: SignatureScheme,\r\n    _signature: string,\r\n    _pubkey: string,\r\n    _requestType: ExecuteTransactionRequestType\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    throw this.newError('executeTransaction with request Type');\r\n  }\r\n\r\n  dryRunTransaction(_txBytes: string): Promise<TransactionEffects> {\r\n    throw this.newError('dryRunTransaction');\r\n  }\r\n\r\n  async getTotalTransactionNumber(): Promise<number> {\r\n    throw this.newError('getTotalTransactionNumber');\r\n  }\r\n\r\n  async getTransactionDigestsInRange(\r\n    _start: GatewayTxSeqNumber,\r\n    _end: GatewayTxSeqNumber\r\n  ): Promise<GetTxnDigestsResponse> {\r\n    throw this.newError('getTransactionDigestsInRange');\r\n  }\r\n\r\n  async getMoveFunctionArgTypes(\r\n    _objectId: string,\r\n    _moduleName: string,\r\n    _functionName: string\r\n  ): Promise<SuiMoveFunctionArgTypes> {\r\n    throw this.newError('getMoveFunctionArgTypes');\r\n  }\r\n\r\n  async getNormalizedMoveModulesByPackage(\r\n    _objectId: string\r\n  ): Promise<SuiMoveNormalizedModules> {\r\n    throw this.newError('getNormalizedMoveModulesByPackage');\r\n  }\r\n\r\n  async getNormalizedMoveModule(\r\n    _objectId: string,\r\n    _moduleName: string\r\n  ): Promise<SuiMoveNormalizedModule> {\r\n    throw this.newError('getNormalizedMoveModule');\r\n  }\r\n\r\n  async getNormalizedMoveFunction(\r\n    _objectId: string,\r\n    _moduleName: string,\r\n    _functionName: string\r\n  ): Promise<SuiMoveNormalizedFunction> {\r\n    throw this.newError('getNormalizedMoveFunction');\r\n  }\r\n\r\n  async getNormalizedMoveStruct(\r\n    _objectId: string,\r\n    _oduleName: string,\r\n    _structName: string\r\n  ): Promise<SuiMoveNormalizedStruct> {\r\n    throw this.newError('getNormalizedMoveStruct');\r\n  }\r\n\r\n  async syncAccountState(_address: string): Promise<any> {\r\n    throw this.newError('syncAccountState');\r\n  }\r\n\r\n\r\n\r\n  async subscribeEvent(\r\n    _filter: SuiEventFilter,\r\n    _onMessage: (event: SuiEventEnvelope) => void\r\n  ): Promise<SubscriptionId> {\r\n    throw this.newError('subscribeEvent');\r\n  }\r\n\r\n  async unsubscribeEvent(_id: SubscriptionId): Promise<boolean> {\r\n    throw this.newError('unsubscribeEvent');\r\n  }\r\n\r\n  private newError(operation: string): Error {\r\n    return new Error(`Please use a valid provider for ${operation}`);\r\n  }\r\n\r\n  async getTransactions(\r\n      _query: TransactionQuery,\r\n      _cursor: TransactionDigest | null,\r\n      _limit: number | null,\r\n      _order: Order\r\n  ): Promise<PaginatedTransactionDigests> {\r\n    throw this.newError('getTransactions');\r\n  }\r\n\r\n  async getEvents(\r\n      _query: EventQuery,\r\n      _cursor: EventId | null,\r\n      _limit: number | null,\r\n      _order: Order\r\n  ): Promise<PaginatedEvents> {\r\n    throw this.newError('getEvents');\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { JsonRpcProvider } from '../providers/json-rpc-provider';\r\nimport { Provider } from '../providers/provider';\r\nimport { VoidProvider } from '../providers/void-provider';\r\nimport { HttpHeaders } from '../rpc/client';\r\nimport { Base64DataBuffer } from '../serialization/base64';\r\nimport {\r\n  ExecuteTransactionRequestType,\r\n  FaucetResponse,\r\n  getTotalGasUsed,\r\n  SuiAddress,\r\n  SuiExecuteTransactionResponse,\r\n  TransactionEffects,\r\n} from '../types';\r\nimport { SignaturePubkeyPair, Signer } from './signer';\r\nimport { RpcTxnDataSerializer } from './txn-data-serializers/rpc-txn-data-serializer';\r\nimport {\r\n  MoveCallTransaction,\r\n  MergeCoinTransaction,\r\n  PayTransaction,\r\n  PaySuiTransaction,\r\n  PayAllSuiTransaction,\r\n  SplitCoinTransaction,\r\n  TransferObjectTransaction,\r\n  TransferSuiTransaction,\r\n  TxnDataSerializer,\r\n  PublishTransaction,\r\n  SignableTransaction,\r\n} from './txn-data-serializers/txn-data-serializer';\r\n\r\n///////////////////////////////\r\n// Exported Abstracts\r\nexport abstract class SignerWithProvider implements Signer {\r\n  readonly provider: Provider;\r\n  readonly serializer: TxnDataSerializer;\r\n\r\n  ///////////////////\r\n  // Sub-classes MUST implement these\r\n\r\n  // Returns the checksum address\r\n  abstract getAddress(): Promise<SuiAddress>;\r\n\r\n  /**\r\n   * Returns the signature for the data and the public key of the signer\r\n   */\r\n  abstract signData(data: Base64DataBuffer): Promise<SignaturePubkeyPair>;\r\n\r\n  // Returns a new instance of the Signer, connected to provider.\r\n  // This MAY throw if changing providers is not supported.\r\n  abstract connect(provider: Provider): SignerWithProvider;\r\n\r\n  ///////////////////\r\n  // Sub-classes MAY override these\r\n\r\n  /**\r\n   * Request gas tokens from a faucet server and send to the signer\r\n   * address\r\n   * @param httpHeaders optional request headers\r\n   */\r\n  async requestSuiFromFaucet(\r\n    httpHeaders?: HttpHeaders\r\n  ): Promise<FaucetResponse> {\r\n    return this.provider.requestSuiFromFaucet(\r\n      await this.getAddress(),\r\n      httpHeaders\r\n    );\r\n  }\r\n\r\n  constructor(provider?: Provider, serializer?: TxnDataSerializer) {\r\n    this.provider = provider || new VoidProvider();\r\n    let endpoint = '';\r\n    let skipDataValidation = false;\r\n    if (this.provider instanceof JsonRpcProvider) {\r\n      endpoint = this.provider.endpoints.fullNode;\r\n      skipDataValidation = this.provider.options.skipDataValidation!;\r\n    }\r\n    this.serializer =\r\n      serializer || new RpcTxnDataSerializer(endpoint, skipDataValidation);\r\n  }\r\n\r\n  /**\r\n   * Sign a transaction and submit to the Fullnode for execution. Only exists\r\n   * on Fullnode\r\n   */\r\n  async signAndExecuteTransaction(\r\n    transaction: Base64DataBuffer | SignableTransaction,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    // Handle submitting raw transaction bytes:\r\n    if (\r\n      transaction instanceof Base64DataBuffer ||\r\n      transaction.kind === 'bytes'\r\n    ) {\r\n      const txBytes =\r\n        transaction instanceof Base64DataBuffer\r\n          ? transaction\r\n          : new Base64DataBuffer(transaction.data);\r\n\r\n      const sig = await this.signData(txBytes);\r\n      return await this.provider.executeTransaction(\r\n        txBytes.toString(),\r\n        sig.signatureScheme,\r\n        sig.signature.toString(),\r\n        sig.pubKey.toString(),\r\n        requestType\r\n      );\r\n    }\r\n\r\n    switch (transaction.kind) {\r\n      case 'moveCall':\r\n        return this.executeMoveCall(transaction.data, requestType);\r\n      case 'transferSui':\r\n        return this.transferSui(transaction.data, requestType);\r\n      case 'transferObject':\r\n        return this.transferObject(transaction.data, requestType);\r\n      case 'mergeCoin':\r\n        return this.mergeCoin(transaction.data, requestType);\r\n      case 'splitCoin':\r\n        return this.splitCoin(transaction.data, requestType);\r\n      case 'pay':\r\n        return this.pay(transaction.data, requestType);\r\n      case 'paySui':\r\n        return this.paySui(transaction.data, requestType);\r\n      case 'payAllSui':\r\n        return this.payAllSui(transaction.data, requestType);\r\n      case 'publish':\r\n        return this.publish(transaction.data, requestType);\r\n      default:\r\n        throw new Error(\r\n          `Unknown transaction kind: \"${(transaction as any).kind}\"`\r\n        );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dry run a transaction and return the result.\r\n   * @param tx the transaction as SignableTransaction or string (in base64) that will dry run\r\n   * @returns The transaction effects\r\n   */\r\n  async dryRunTransaction(tx: SignableTransaction | string | Base64DataBuffer): Promise<TransactionEffects> {\r\n    const address = await this.getAddress();\r\n    let dryRunTxBytes: string;\r\n    if (typeof tx === 'string') {\r\n      dryRunTxBytes = tx;\r\n    } else if (tx instanceof Base64DataBuffer){\r\n      dryRunTxBytes = tx.toString();\r\n    }else{\r\n      switch (tx.kind) {\r\n        case 'bytes':\r\n          dryRunTxBytes = new Base64DataBuffer(tx.data).toString();\r\n          break;\r\n        case 'mergeCoin':\r\n          dryRunTxBytes = (await this.serializer.newMergeCoin(address, tx.data)).toString();\r\n          break;\r\n        case 'moveCall':\r\n          dryRunTxBytes = (await this.serializer.newMoveCall(address, tx.data)).toString();\r\n          break;\r\n        case 'pay':\r\n          dryRunTxBytes = (await this.serializer.newPay(address, tx.data)).toString();\r\n          break;\r\n        case 'payAllSui':\r\n          dryRunTxBytes = (await this.serializer.newPayAllSui(address, tx.data)).toString();\r\n          break;\r\n        case 'paySui':\r\n          dryRunTxBytes = (await this.serializer.newPaySui(address, tx.data)).toString();\r\n          break;\r\n        case 'publish':\r\n          dryRunTxBytes = (await this.serializer.newPublish(address, tx.data)).toString();\r\n          break;\r\n        case 'splitCoin':\r\n          dryRunTxBytes = (await this.serializer.newSplitCoin(address, tx.data)).toString();\r\n          break;\r\n        case 'transferObject':\r\n          dryRunTxBytes = (await this.serializer.newTransferObject(address, tx.data)).toString();\r\n          break;\r\n        case 'transferSui':\r\n          dryRunTxBytes = (await this.serializer.newTransferSui(address, tx.data)).toString();\r\n          break;\r\n        default:\r\n          throw new Error(`Error, unknown transaction kind ${(tx as any).kind}. Can't dry run transaction.`);\r\n      }\r\n    }\r\n    return this.provider.dryRunTransaction(dryRunTxBytes);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Serialize and sign a `TransferObject` transaction and submit to the Fullnode\r\n   * for execution\r\n   */\r\n  async transferObject(\r\n    transaction: TransferObjectTransaction,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    const signerAddress = await this.getAddress();\r\n    const txBytes = await this.serializer.newTransferObject(\r\n      signerAddress,\r\n      transaction\r\n    );\r\n    return await this.signAndExecuteTransaction(txBytes, requestType);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Serialize and sign a `TransferSui` transaction and submit to the Fullnode\r\n   * for execution\r\n   */\r\n  async transferSui(\r\n    transaction: TransferSuiTransaction,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    const signerAddress = await this.getAddress();\r\n    const txBytes = await this.serializer.newTransferSui(\r\n      signerAddress,\r\n      transaction\r\n    );\r\n    return await this.signAndExecuteTransaction(txBytes, requestType);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Serialize and Sign a `Pay` transaction and submit to the fullnode for execution\r\n   */\r\n  async pay(\r\n    transaction: PayTransaction,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    const signerAddress = await this.getAddress();\r\n    const txBytes = await this.serializer.newPay(signerAddress, transaction);\r\n    return await this.signAndExecuteTransaction(txBytes, requestType);\r\n  }\r\n\r\n  /**\r\n   * Serialize and Sign a `PaySui` transaction and submit to the fullnode for execution\r\n   */\r\n  async paySui(\r\n    transaction: PaySuiTransaction,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    const signerAddress = await this.getAddress();\r\n    const txBytes = await this.serializer.newPaySui(signerAddress, transaction);\r\n    return await this.signAndExecuteTransaction(txBytes, requestType);\r\n  }\r\n\r\n  /**\r\n   * Serialize and Sign a `PayAllSui` transaction and submit to the fullnode for execution\r\n   */\r\n  async payAllSui(\r\n    transaction: PayAllSuiTransaction,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    const signerAddress = await this.getAddress();\r\n    const txBytes = await this.serializer.newPayAllSui(\r\n      signerAddress,\r\n      transaction\r\n    );\r\n    return await this.signAndExecuteTransaction(txBytes, requestType);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Serialize and sign a `MergeCoin` transaction and submit to the Fullnode\r\n   * for execution\r\n   */\r\n  async mergeCoin(\r\n    transaction: MergeCoinTransaction,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    const signerAddress = await this.getAddress();\r\n    const txBytes = await this.serializer.newMergeCoin(\r\n      signerAddress,\r\n      transaction\r\n    );\r\n    return await this.signAndExecuteTransaction(txBytes, requestType);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Serialize and sign a `SplitCoin` transaction and submit to the Fullnode\r\n   * for execution\r\n   */\r\n  async splitCoin(\r\n    transaction: SplitCoinTransaction,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    const signerAddress = await this.getAddress();\r\n    const txBytes = await this.serializer.newSplitCoin(\r\n      signerAddress,\r\n      transaction\r\n    );\r\n    return await this.signAndExecuteTransaction(txBytes, requestType);\r\n  }\r\n\r\n  /**\r\n   * Serialize and sign a `MoveCall` transaction and submit to the Fullnode\r\n   * for execution\r\n   */\r\n  async executeMoveCall(\r\n    transaction: MoveCallTransaction,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    const signerAddress = await this.getAddress();\r\n    const txBytes = await this.serializer.newMoveCall(\r\n      signerAddress,\r\n      transaction\r\n    );\r\n    return await this.signAndExecuteTransaction(txBytes, requestType);\r\n  }\r\n\r\n  /**\r\n   *\r\n   * Serialize and sign a `Publish` transaction and submit to the Fullnode\r\n   * for execution\r\n   */\r\n  async publish(\r\n    transaction: PublishTransaction,\r\n    requestType: ExecuteTransactionRequestType = 'WaitForLocalExecution'\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    const signerAddress = await this.getAddress();\r\n    const txBytes = await this.serializer.newPublish(\r\n      signerAddress,\r\n      transaction\r\n    );\r\n    return await this.signAndExecuteTransaction(txBytes, requestType);\r\n  }\r\n\r\n  /**\r\n   * Returns the estimated gas cost for the transaction\r\n   * @param tx The transaction to estimate the gas cost. When string it is assumed it's a serialized tx in base64\r\n   * @returns total gas cost estimation\r\n   * @throws whens fails to estimate the gas cost\r\n   */\r\n  async getGasCostEstimation(...args: Parameters<SignerWithProvider['dryRunTransaction']>) {\r\n    const txEffects = await this.dryRunTransaction(...args);\r\n    const gasEstimation = getTotalGasUsed(txEffects);\r\n    if (typeof gasEstimation === 'undefined') {\r\n      throw new Error('Failed to estimate the gas cost from transaction');\r\n    }\r\n    return gasEstimation;\r\n  }\r\n}\r\n","// Copyright (c) Mysten Labs, Inc.\r\n// SPDX-License-Identifier: Apache-2.0\r\n\r\nimport { Keypair } from '../cryptography/keypair';\r\nimport { Provider } from '../providers/provider';\r\nimport { Base64DataBuffer } from '../serialization/base64';\r\nimport { SuiAddress } from '../types';\r\nimport { SignaturePubkeyPair } from './signer';\r\nimport { SignerWithProvider } from './signer-with-provider';\r\nimport { TxnDataSerializer } from './txn-data-serializers/txn-data-serializer';\r\n\r\nexport class RawSigner extends SignerWithProvider {\r\n  private readonly keypair: Keypair;\r\n\r\n  constructor(\r\n    keypair: Keypair,\r\n    provider?: Provider,\r\n    serializer?: TxnDataSerializer\r\n  ) {\r\n    super(provider, serializer);\r\n    this.keypair = keypair;\r\n  }\r\n\r\n  async getAddress(): Promise<SuiAddress> {\r\n    return this.keypair.getPublicKey().toSuiAddress();\r\n  }\r\n\r\n  async signData(data: Base64DataBuffer): Promise<SignaturePubkeyPair> {\r\n    return {\r\n      signatureScheme: this.keypair.getKeyScheme(),\r\n      signature: this.keypair.signData(data),\r\n      pubKey: this.keypair.getPublicKey(),\r\n    };\r\n  }\r\n\r\n  connect(provider: Provider): SignerWithProvider {\r\n    return new RawSigner(this.keypair, provider);\r\n  }\r\n}\r\n","import * as bip39 from '@scure/bip39';\r\nimport * as english from '@scure/bip39/wordlists/english';\r\nimport { Ed25519Keypair } from './cryptography/ed25519-keypair';\r\nimport { GetObjectDataResponse, SuiAddress, TransactionEffects } from './types';\r\nimport { JsonRpcProvider } from './providers/json-rpc-provider';\r\nimport { Coin, SUI_TYPE_ARG } from './types/framework';\r\nimport { RpcTxnDataSerializer } from './signers/txn-data-serializers/rpc-txn-data-serializer';\r\nimport {\r\n  getMoveObject,\r\n  getObjectId,\r\n  ObjectId,\r\n  SuiObjectInfo,\r\n} from './types/objects';\r\nimport { RawSigner } from './signers/raw-signer';\r\nimport { ExampleNFT } from './nft_client';\r\nimport { Network, NETWORK_TO_API } from './utils/api-endpoints';\r\nimport {\r\n  PaySuiTransaction,\r\n  PayTransaction,\r\n  SignableTransaction,\r\n  UnserializedSignableTransaction,\r\n} from './signers/txn-data-serializers/txn-data-serializer';\r\nimport { DEFAULT_CLIENT_OPTIONS } from './rpc/websocket-client';\r\nimport { Base64DataBuffer } from './serialization/base64';\r\n\r\nconst COIN_TYPE = 784;\r\nconst MAX_ACCOUNTS = 5;\r\nconst DEFAULT_GAS_BUDGET_FOR_SUI_TRANSFER = 1000;\r\nconst endpoints = NETWORK_TO_API[Network.DEVNET];\r\n\r\nconst AIRDROP_SENDER = '0xc4173a804406a365e69dfb297d4eaaf002546ebd';\r\n\r\nexport interface AccountMetaData {\r\n  derivationPath: string; //\"44'/784'/1'/0'/0'\"\r\n  address: string;\r\n  publicKey?: string;\r\n}\r\n\r\nexport interface Wallet {\r\n  code: string; // mnemonic\r\n  accounts: AccountMetaData[];\r\n}\r\n\r\nexport class WalletClient {\r\n  provider: JsonRpcProvider;\r\n  serializer: RpcTxnDataSerializer;\r\n\r\n  constructor(\r\n    nodeUrl: string = endpoints.fullNode,\r\n    faucetUrl: string = endpoints.faucet\r\n  ) {\r\n    this.provider = new JsonRpcProvider(nodeUrl, {\r\n      skipDataValidation: true,\r\n      socketOptions: DEFAULT_CLIENT_OPTIONS,\r\n      versionCacheTimoutInSeconds: 600,\r\n      faucetURL: faucetUrl,\r\n    });\r\n    this.serializer = new RpcTxnDataSerializer(nodeUrl);\r\n  }\r\n\r\n  /**\r\n   * Creates new account with bip44 path and mnemonics,\r\n   * @param path. (e.g. m/44'/784'/0'/0'/0')\r\n   * Detailed description: {@link https://github.com/bitcoin/bips/blob/master/bip-0044.mediawiki}\r\n   * @param mnemonics.\r\n   * @returns Ed25519Keypair\r\n   */\r\n  //Use deriveKeypair() in ed25519-keypair.ts\r\n  //Giving error for different derivation path other than standard 0\r\n  static fromDerivePath(mnemonics: string): Ed25519Keypair {\r\n    // const normalizeMnemonics = mnemonics\r\n    //     .trim()\r\n    //     .split(/\\s+/)\r\n    //     .map((part) => part.toLowerCase())\r\n    //     .join(\" \");\r\n\r\n    // const { key } = derivePath(path, Buffer.from(bip39.mnemonicToSeedSync(normalizeMnemonics)).toString(\"hex\"));\r\n\r\n    // return Ed25519Keypair.fromSeed(new Uint8Array(key));\r\n    return Ed25519Keypair.deriveKeypair(mnemonics);\r\n  }\r\n\r\n  /**\r\n   * returns an Ed25519Keypair object given a private key and\r\n   * address of the account\r\n   *\r\n   * @param privateKey Private key of an account as a Buffer\r\n   * @returns Ed25519Keypair object\r\n   */\r\n  static getAccountFromPrivateKey(privateKey: Buffer): Ed25519Keypair {\r\n    return Ed25519Keypair.fromSeed(privateKey.slice(0, 32));\r\n  }\r\n\r\n  /**\r\n   * Each mnemonic phrase corresponds to a single wallet\r\n   * Wallet can contain multiple accounts\r\n   * An account corresponds to a key pair + address\r\n   *\r\n   * Get all the accounts of a user from their mnemonic phrase\r\n   *\r\n   * @param code The mnemonic phrase (12 word)\r\n   * @returns Wallet object containing all accounts of a user\r\n   */\r\n\r\n  async importWallet(code: string): Promise<Wallet> {\r\n    let address = '';\r\n    let publicKey = '';\r\n    let derivationPath = '';\r\n\r\n    const accountMetaData: AccountMetaData[] = [];\r\n    for (let i = 0; i < MAX_ACCOUNTS; i += 1) {\r\n      /* eslint-disable no-await-in-loop */\r\n      derivationPath = `m/44'/${COIN_TYPE}'/${i}'/0'/0'`;\r\n      // derivationPath = `m/44'/${COIN_TYPE}'/0'/0'/${i}'`;\r\n      const keypair = WalletClient.fromDerivePath(code);\r\n      // const keypair = Ed25519Keypair.deriveKeypair(code, derivationPath)\r\n      address = keypair.getPublicKey().toSuiAddress();\r\n      publicKey = Buffer.from(keypair.getPublicKey().toBytes()).toString('hex');\r\n      // publicKey = keypair.getPublicKey().toString();\r\n      // check if this account exists on Sui or not\r\n      // const response = await this.provider.getObjectsOwnedByAddress(address);\r\n      // if (Object.keys(response).length !== 0) {\r\n      accountMetaData.push({\r\n        derivationPath,\r\n        address: address.startsWith('0x') ? address : '0x' + address,\r\n        publicKey: publicKey.startsWith('0x') ? publicKey : '0x' + publicKey,\r\n      });\r\n      // NOTE: breaking because multiple address support is not available currently\r\n      break;\r\n      // } else {\r\n      // break;\r\n      // }\r\n      /* eslint-enable no-await-in-loop */\r\n    }\r\n    return { code, accounts: accountMetaData };\r\n  }\r\n\r\n  /**\r\n   * Creates a new wallet which contains a single account,\r\n   * which is registered on Sui\r\n   *\r\n   * @returns A wallet object\r\n   */\r\n  async createWallet(code?: string): Promise<Wallet> {\r\n    if (!code) {\r\n      // mnemonic\r\n      code = bip39.generateMnemonic(english.wordlist);\r\n    }\r\n    const accountMetadata = await this.createNewAccount(code, 0);\r\n    return { code, accounts: [accountMetadata] };\r\n  }\r\n\r\n  /**\r\n   * Creates a new account in the provided wallet\r\n   *\r\n   * @param code mnemonic phrase of the wallet\r\n   * @returns\r\n   */\r\n  async createNewAccount(\r\n    code: string,\r\n    index: number\r\n  ): Promise<AccountMetaData> {\r\n    if (index >= MAX_ACCOUNTS) {\r\n      throw new Error('Max no. of accounts reached');\r\n    }\r\n    const derivationPath = `m/44'/${COIN_TYPE}'/${index}'/0'/0'`;\r\n    const keypair = WalletClient.fromDerivePath(code);\r\n    const address = keypair.getPublicKey().toSuiAddress();\r\n    const pubKey = Buffer.from(keypair.getPublicKey().toBytes()).toString(\r\n      'hex'\r\n    );\r\n    return {\r\n      derivationPath,\r\n      address: address.startsWith('0x') ? address : '0x' + address,\r\n      publicKey: pubKey.startsWith('0x') ? pubKey : '0x' + pubKey,\r\n    };\r\n  }\r\n\r\n  async transferSuiMnemonic(\r\n    amount: number,\r\n    suiAccount: Ed25519Keypair,\r\n    receiverAddress: SuiAddress,\r\n    typeArg: string = SUI_TYPE_ARG\r\n  ) {\r\n    const keypair = suiAccount;\r\n    const senderAddress = keypair.getPublicKey().toSuiAddress();\r\n    if (typeArg === SUI_TYPE_ARG) {\r\n      const coinsNeeded =\r\n        await this.provider.selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\r\n          senderAddress,\r\n          BigInt(amount + DEFAULT_GAS_BUDGET_FOR_SUI_TRANSFER),\r\n          typeArg\r\n        );\r\n      const inputCoins: ObjectId[] = coinsNeeded.map((coin) =>\r\n        getObjectId(coin)\r\n      );\r\n      const recipients: SuiAddress[] = [receiverAddress];\r\n      const amounts: number[] = [amount];\r\n      const payTxn: PayTransaction = {\r\n        inputCoins: inputCoins,\r\n        recipients: recipients,\r\n        amounts: amounts,\r\n        gasBudget: DEFAULT_GAS_BUDGET_FOR_SUI_TRANSFER,\r\n      };\r\n      const signer = new RawSigner(keypair, this.provider, this.serializer);\r\n      return await signer.pay(payTxn);\r\n    } else {\r\n      const coinsNeeded =\r\n        await this.provider.selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\r\n          senderAddress,\r\n          BigInt(amount),\r\n          typeArg\r\n        );\r\n      const inputCoins: ObjectId[] = coinsNeeded.map((coin) =>\r\n        getObjectId(coin)\r\n      );\r\n      const gasObjId = await this.getGasObject(senderAddress, inputCoins);\r\n      const recipients: SuiAddress[] = [receiverAddress];\r\n      const amounts: number[] = [amount];\r\n      const payTxn: PayTransaction = {\r\n        inputCoins: inputCoins,\r\n        recipients: recipients,\r\n        amounts: amounts,\r\n        gasPayment: gasObjId,\r\n        gasBudget: DEFAULT_GAS_BUDGET_FOR_SUI_TRANSFER,\r\n      };\r\n      const signer = new RawSigner(keypair, this.provider, this.serializer);\r\n      return await signer.pay(payTxn);\r\n    }\r\n  }\r\n\r\n  async getBalance(address: string, typeArg: string = SUI_TYPE_ARG) {\r\n    let objects = await this.provider.getCoinBalancesOwnedByAddress(\r\n      address,\r\n      typeArg\r\n    );\r\n    return Coin.totalBalance(objects);\r\n  }\r\n\r\n  async airdrop(address: string) {\r\n    return await this.provider.requestSuiFromFaucet(address);\r\n  }\r\n\r\n  async getCoinsWithRequiredBalance(\r\n    address: string,\r\n    amount: number,\r\n    typeArg: string = SUI_TYPE_ARG\r\n  ) {\r\n    const coinsNeeded =\r\n      await this.provider.selectCoinSetWithCombinedBalanceGreaterThanOrEqual(\r\n        address,\r\n        BigInt(amount),\r\n        typeArg\r\n      );\r\n    const coins: ObjectId[] = coinsNeeded.map((coin) => getObjectId(coin));\r\n    return coins;\r\n  }\r\n\r\n  async getGasObject(address: string, exclude: ObjectId[]) {\r\n    const gasObj = await this.provider.selectCoinsWithBalanceGreaterThanOrEqual(\r\n      address,\r\n      BigInt(DEFAULT_GAS_BUDGET_FOR_SUI_TRANSFER),\r\n      SUI_TYPE_ARG,\r\n      exclude\r\n    );\r\n    if (gasObj.length === 0) {\r\n      throw new Error('Not Enough Gas');\r\n    }\r\n    const gasObjId: ObjectId = getObjectId(gasObj[0]);\r\n    return gasObjId;\r\n  }\r\n\r\n  async getCustomCoins(address: string) {\r\n    const objects = await this.provider.getCoinBalancesOwnedByAddress(address);\r\n    const coinIds = objects.map((c) => ({\r\n      Id: Coin.getID(c),\r\n      symbol: Coin.getCoinSymbol(Coin.getCoinTypeArg(c)),\r\n      name: Coin.getCoinSymbol(Coin.getCoinTypeArg(c)),\r\n      balance: Number(Coin.getBalance(c)),\r\n      decimals: 9,\r\n      coinTypeArg: Coin.getCoinTypeArg(c),\r\n    }));\r\n    return coinIds;\r\n  }\r\n\r\n  async generateTransaction(\r\n    address: SuiAddress,\r\n    tx: SignableTransaction | string | Base64DataBuffer\r\n  ): Promise<Base64DataBuffer> {\r\n    let dryRunTxBytes: string;\r\n    if (typeof tx === 'string') {\r\n      dryRunTxBytes = tx;\r\n    } else if (tx instanceof Base64DataBuffer) {\r\n      dryRunTxBytes = tx.toString();\r\n    } else {\r\n      switch (tx.kind) {\r\n        case 'bytes':\r\n          dryRunTxBytes = new Base64DataBuffer(tx.data).toString();\r\n          break;\r\n        case 'mergeCoin':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newMergeCoin(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'moveCall':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newMoveCall(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'pay':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newPay(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'payAllSui':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newPayAllSui(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'paySui':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newPaySui(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'publish':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newPublish(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'splitCoin':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newSplitCoin(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'transferObject':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newTransferObject(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'transferSui':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newTransferSui(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        default:\r\n          throw new Error(\r\n            `Error, unknown transaction kind ${\r\n              (tx as any).kind\r\n            }. Can't dry run transaction.`\r\n          );\r\n      }\r\n    }\r\n    if (typeof dryRunTxBytes === 'string') {\r\n      return new Base64DataBuffer(dryRunTxBytes);\r\n    }\r\n    return dryRunTxBytes;\r\n  }\r\n\r\n  /**\r\n   * Dry run a transaction and return the result.\r\n   * @param address address of the account\r\n   * @param tx the transaction as SignableTransaction or string (in base64) that will dry run\r\n   * @returns The transaction effects\r\n   */\r\n  async dryRunTransaction(\r\n    address: string,\r\n    tx: SignableTransaction | string | Base64DataBuffer\r\n  ): Promise<TransactionEffects> {\r\n    let dryRunTxBytes: string;\r\n    if (typeof tx === 'string') {\r\n      dryRunTxBytes = tx;\r\n    } else if (tx instanceof Base64DataBuffer) {\r\n      dryRunTxBytes = tx.toString();\r\n    } else {\r\n      switch (tx.kind) {\r\n        case 'bytes':\r\n          dryRunTxBytes = new Base64DataBuffer(tx.data).toString();\r\n          break;\r\n        case 'mergeCoin':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newMergeCoin(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'moveCall':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newMoveCall(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'pay':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newPay(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'payAllSui':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newPayAllSui(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'paySui':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newPaySui(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'publish':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newPublish(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'splitCoin':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newSplitCoin(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'transferObject':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newTransferObject(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        case 'transferSui':\r\n          dryRunTxBytes = (\r\n            await this.serializer.newTransferSui(address, tx.data)\r\n          ).toString();\r\n          break;\r\n        default:\r\n          throw new Error(\r\n            `Error, unknown transaction kind ${\r\n              (tx as any).kind\r\n            }. Can't dry run transaction.`\r\n          );\r\n      }\r\n    }\r\n    return this.provider.dryRunTransaction(dryRunTxBytes);\r\n  }\r\n\r\n  async simulateTransaction(\r\n    address: string,\r\n    tx: SignableTransaction | string | Base64DataBuffer\r\n  ): Promise<TransactionEffects> {\r\n    return await this.dryRunTransaction(address, tx);\r\n  }\r\n\r\n  async getTransactions(address: SuiAddress) {\r\n    const transactions = await this.provider.getTransactionsForAddress(address);\r\n    const uniqueTransactions = [...new Set(transactions)];\r\n\r\n    const finalTransacationsData: any[] = [];\r\n    await Promise.all(\r\n      uniqueTransactions.map(async (digest: string) => {\r\n        const transactionData = await this.provider.getTransactionWithEffects(\r\n          digest\r\n        );\r\n\r\n        if (transactionData.effects.status.status === 'success') {\r\n          const events = transactionData.effects.events;\r\n          const coinBalanceReceiveEvents = events?.filter(\r\n            (event) =>\r\n              event.coinBalanceChange &&\r\n              event.coinBalanceChange.owner?.AddressOwner === address &&\r\n              event.coinBalanceChange.changeType !== 'Gas' &&\r\n              event.coinBalanceChange.amount >= 0\r\n          );\r\n          const coinBalanceSendEvents = events?.filter(\r\n            (event) =>\r\n              event.coinBalanceChange &&\r\n              event.coinBalanceChange.sender === address &&\r\n              event.coinBalanceChange.changeType !== 'Gas' &&\r\n              event.coinBalanceChange.changeType !== 'Pay'\r\n          );\r\n\r\n          console.log({ coinBalanceReceiveEvents, coinBalanceSendEvents });\r\n          const transferEvents: any = events?.filter(\r\n            (event) => event.transferObject\r\n          );\r\n          const moveEvents: any = events?.filter((event) => event.moveEvent);\r\n\r\n          let totalCoinBalanceChange: number = 0;\r\n          let changeType: any = {\r\n            type: '',\r\n            from: '',\r\n            to: '',\r\n            resourceType: '',\r\n            changeTextSuffix: '',\r\n          };\r\n\r\n          coinBalanceReceiveEvents?.forEach((event) => {\r\n            totalCoinBalanceChange += event.coinBalanceChange.amount;\r\n            if (!changeType.type) {\r\n              if (event.coinBalanceChange.sender === AIRDROP_SENDER) {\r\n                changeType = {\r\n                  type: 'Receive',\r\n                  text: 'Airdrop',\r\n                  from: event.coinBalanceChange.sender,\r\n                  to: event.coinBalanceChange.owner?.AddressOwner,\r\n                  resourceType: event.coinBalanceChange.coinType,\r\n                  changeTextSuffix:\r\n                    ' ' + event.coinBalanceChange.coinType?.split('::')[2],\r\n                };\r\n              } else {\r\n                changeType = {\r\n                  type: 'Receive',\r\n                  text: 'Received',\r\n                  from: event.coinBalanceChange.sender,\r\n                  to: event.coinBalanceChange.owner?.AddressOwner,\r\n                  resourceType: event.coinBalanceChange.coinType,\r\n                  changeTextSuffix:\r\n                    ' ' + event.coinBalanceChange.coinType?.split('::')[2],\r\n                };\r\n              }\r\n            }\r\n          });\r\n\r\n          coinBalanceSendEvents?.forEach((event) => {\r\n            totalCoinBalanceChange += event.coinBalanceChange.amount;\r\n            if (!changeType.type) {\r\n              changeType = {\r\n                type: 'Send',\r\n                text: 'Sent',\r\n                from: event.coinBalanceChange.sender,\r\n                to: event.coinBalanceChange.owner?.AddressOwner,\r\n                resourceType: event.coinBalanceChange.coinType,\r\n                changeTextSuffix:\r\n                  ' ' + event.coinBalanceChange.coinType?.split('::')[2],\r\n              };\r\n            }\r\n          });\r\n\r\n          await Promise.all(\r\n            transferEvents?.map(async (event: any) => {\r\n              if (\r\n                event.transferObject.objectType === '0x2::devnet_nft::DevNetNFT'\r\n              ) {\r\n                const nftData = await this.provider.getObject(\r\n                  event.transferObject.objectId\r\n                );\r\n\r\n                const nftDetails: any = nftData.details;\r\n                changeType = {\r\n                  nftData: nftDetails,\r\n                  type:\r\n                    event.transferObject.recipient?.AddressOwner === address\r\n                      ? 'Receive'\r\n                      : 'Send',\r\n                  text:\r\n                    event.transferObject.recipient?.AddressOwner === address\r\n                      ? 'NFT Received'\r\n                      : 'NFT Sent',\r\n                  from: event.transferObject.sender,\r\n                  to: event.transferObject.recipient?.AddressOwner,\r\n                  resourceType: event.transferObject.objectType,\r\n                  changeTextSuffix: ` ${nftDetails?.data?.fields?.name}`,\r\n                };\r\n                totalCoinBalanceChange =\r\n                  event.transferObject.recipient?.AddressOwner === address\r\n                    ? 1\r\n                    : -1;\r\n              }\r\n            })\r\n          );\r\n\r\n          await Promise.all(\r\n            moveEvents?.map(async (event: any) => {\r\n              if (event.moveEvent.type === '0x2::devnet_nft::MintNFTEvent') {\r\n                const nftData = await this.provider.getObject(\r\n                  event.moveEvent.fields.object_id\r\n                );\r\n\r\n                const nftDetails: any = nftData.details;\r\n                changeType = {\r\n                  nftData: nftDetails,\r\n                  type: 'Receive',\r\n                  text: 'NFT Minted',\r\n                  resourceType: event.moveEvent.type,\r\n                  changeTextSuffix: ` ${nftDetails?.data?.fields?.name}`,\r\n                };\r\n                totalCoinBalanceChange = 1;\r\n              }\r\n            })\r\n          );\r\n\r\n          const timestamp: any = transactionData.timestamp_ms;\r\n\r\n          finalTransacationsData.push({\r\n            ...transactionData,\r\n            totalCoinBalanceChange,\r\n            changeType,\r\n            date: new Date(timestamp).toLocaleDateString('en-GB', {\r\n              year: 'numeric',\r\n              month: 'long',\r\n              day: 'numeric',\r\n            }),\r\n          });\r\n        }\r\n      })\r\n    );\r\n\r\n    finalTransacationsData.sort((a, b) => b.timestamp_ms - a.timestamp_ms);\r\n\r\n    return finalTransacationsData;\r\n  }\r\n\r\n  async getNfts(address: SuiAddress) {\r\n    let objects = await this.provider.getObjectsOwnedByAddress(address);\r\n    var nfts: GetObjectDataResponse[] = [];\r\n    await Promise.all(\r\n      objects.map(async (obj) => {\r\n        let objData = await this.provider.getObject(obj.objectId);\r\n        let moveObj = getMoveObject(objData);\r\n        if (\r\n          moveObj!.fields.name &&\r\n          moveObj!.fields.description &&\r\n          moveObj!.fields.url\r\n        ) {\r\n          nfts.push(objData);\r\n        } else if (moveObj!.fields.metadata) {\r\n          nfts.push(objData);\r\n        }\r\n      })\r\n    );\r\n    return nfts;\r\n  }\r\n\r\n  async mintNfts(\r\n    suiAccount: Ed25519Keypair,\r\n    name?: string,\r\n    description?: string,\r\n    imageUrl?: string\r\n  ) {\r\n    const keypair = suiAccount;\r\n    const accountSigner = new RawSigner(\r\n      keypair,\r\n      this.provider,\r\n      this.serializer\r\n    );\r\n    const mintedNft = ExampleNFT.mintExampleNFT(\r\n      accountSigner,\r\n      name,\r\n      description,\r\n      imageUrl\r\n    );\r\n    return mintedNft;\r\n  }\r\n\r\n  async transferNft(\r\n    suiAccount: Ed25519Keypair,\r\n    nftId: string,\r\n    recipientID: string\r\n  ) {\r\n    const keypair = suiAccount;\r\n    const accountSigner = new RawSigner(\r\n      keypair,\r\n      this.provider,\r\n      this.serializer\r\n    );\r\n    const mintedNft = ExampleNFT.TransferNFT(accountSigner, nftId, recipientID);\r\n    return mintedNft;\r\n  }\r\n\r\n  static getAccountFromMetaData(mnemonic: string, _metadata?: object) {\r\n    const keypair: any = Ed25519Keypair.deriveKeypair(mnemonic);\r\n    return keypair;\r\n  }\r\n}\r\n","import { RawSigner } from './signers/raw-signer';\r\nimport { SuiExecuteTransactionResponse } from './types';\r\n\r\nconst DEFAULT_NFT_IMAGE =\r\n  'ipfs://QmZPWWy5Si54R3d26toaqRiqvCH7HkGdXkxwUgCm2oKKM2?filename=img-sq-01.png';\r\n// TODO: Remove this after internal dogfooding\r\nexport class ExampleNFT {\r\n  /**\r\n   * Mint a Example NFT. The wallet address must own enough gas tokens to pay for the transaction.\r\n   *\r\n   * @param signer A signer with connection to the fullnode\r\n   */\r\n  public static async mintExampleNFT(\r\n    signer: RawSigner,\r\n    name?: string,\r\n    description?: string,\r\n    imageUrl?: string\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    return await signer.executeMoveCall({\r\n      packageObjectId: '0x2',\r\n      module: 'devnet_nft',\r\n      function: 'mint',\r\n      typeArguments: [],\r\n      arguments: [\r\n        name || 'Example NFT',\r\n        description || 'An NFT created by Sui Wallet',\r\n        imageUrl || DEFAULT_NFT_IMAGE,\r\n      ],\r\n      gasBudget: 10000,\r\n    });\r\n  }\r\n\r\n  public static async TransferNFT(\r\n    signer: RawSigner,\r\n    nftId: string,\r\n    recipientID: string,\r\n    transferCost?: number\r\n  ): Promise<SuiExecuteTransactionResponse> {\r\n    return await signer.transferObject({\r\n      objectId: nftId,\r\n      gasBudget: transferCost || 10000,\r\n      recipient: recipientID,\r\n    });\r\n  }\r\n}\r\n"],"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","names":["import_tweetnacl","import_bcs","sha3","import_bcs","bip39MnemonicToSeedSync","import_bcs","nacl","import_bcs","nacl","import_hmac","import_bcs","import_js_sha3","sha3","RpcClient","fetch","import_bcs","writer","reader","WsRpcClient","Network","fetch","module","import_bcs","module","COIN_TYPE"]}